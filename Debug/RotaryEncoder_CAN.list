
RotaryEncoder_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006ed0  08006ed0  00016ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007170  08007170  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007170  08007170  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007170  08007170  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001dc  08007354  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08007354  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e185  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac8  00000000  00000000  0002e391  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001baf2  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7e0  00000000  00000000  0004d31a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7352  00000000  00000000  00057afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fee4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  000feec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006eb8 	.word	0x08006eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006eb8 	.word	0x08006eb8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f000 fca2 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c50:	f000 f82e 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f000 f9ac 	bl	8000fb0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c58:	f000 f86a 	bl	8000d30 <MX_CAN_Init>
  MX_TIM3_Init();
 8000c5c:	f000 f922 	bl	8000ea4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 f976 	bl	8000f50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c64:	f000 f8d0 	bl	8000e08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <main+0x58>)
 8000c6c:	f003 f8e2 	bl	8003e34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <main+0x5c>)
 8000c72:	f002 ffdd 	bl	8003c30 <HAL_TIM_Base_Start_IT>
	HAL_CAN_Start(&hcan);
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <main+0x60>)
 8000c78:	f000 fed9 	bl	8001a2e <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <main+0x60>)
 8000c80:	f001 f93b 	bl	8001efa <HAL_CAN_ActivateNotification>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <main+0x46>
			!= HAL_OK) {
		Error_Handler();
 8000c8a:	f000 fa91 	bl	80011b0 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c8e:	2108      	movs	r1, #8
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <main+0x64>)
 8000c92:	f001 fe1d 	bl	80028d0 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000c96:	2064      	movs	r0, #100	; 0x64
 8000c98:	f000 fce2 	bl	8001660 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c9c:	e7f7      	b.n	8000c8e <main+0x46>
 8000c9e:	bf00      	nop
 8000ca0:	20000294 	.word	0x20000294
 8000ca4:	200002f8 	.word	0x200002f8
 8000ca8:	2000026c 	.word	0x2000026c
 8000cac:	48000400 	.word	0x48000400

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	; 0x40
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 f8b6 	bl	8004e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ce6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fe07 	bl	8002904 <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cfc:	f000 fa58 	bl	80011b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2302      	movs	r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2101      	movs	r1, #1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fcfb 	bl	8003714 <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d24:	f000 fa44 	bl	80011b0 <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3740      	adds	r7, #64	; 0x40
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <MX_CAN_Init+0xd4>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d50:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d54:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d5c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d82:	481f      	ldr	r0, [pc, #124]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000d84:	f000 fc8e 	bl	80016a4 <HAL_CAN_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000d8e:	f000 fa0f 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = my_CAN_ID << 5;
 8000d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d96:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = my_CAN_ID << 5;
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = my_CAN_ID << 5;
 8000d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = my_CAN_ID << 5;
 8000da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000dbe:	230e      	movs	r3, #14
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MX_CAN_Init+0xd0>)
 8000dc8:	f000 fd67 	bl	800189a <HAL_CAN_ConfigFilter>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_CAN_Init+0xa6>
		Error_Handler();
 8000dd2:	f000 f9ed 	bl	80011b0 <Error_Handler>
	}
	HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2015      	movs	r0, #21
 8000ddc:	f001 fbb7 	bl	800254e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000de0:	2015      	movs	r0, #21
 8000de2:	f001 fbd0 	bl	8002586 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2016      	movs	r0, #22
 8000dec:	f001 fbaf 	bl	800254e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000df0:	2016      	movs	r0, #22
 8000df2:	f001 fbc8 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000026c 	.word	0x2000026c
 8000e04:	40006400 	.word	0x40006400

08000e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36 - 1;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e30:	2223      	movs	r2, #35	; 0x23
 8000e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e50:	f002 fe96 	bl	8003b80 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e5a:	f000 f9a9 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e6c:	f003 f98e 	bl	800418c <HAL_TIM_ConfigClockSource>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e76:	f000 f99b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e88:	f003 fb9a 	bl	80045c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e92:	f000 f98d 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002f8 	.word	0x200002f8

08000ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2224      	movs	r2, #36	; 0x24
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 ffbc 	bl	8004e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <MX_TIM3_Init+0xa8>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f00:	2301      	movs	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000f14:	f002 fee8 	bl	8003ce8 <HAL_TIM_Encoder_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f1e:	f000 f947 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_TIM3_Init+0xa4>)
 8000f30:	f003 fb46 	bl	80045c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f3a:	f000 f939 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	; 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000294 	.word	0x20000294
 8000f4c:	40000400 	.word	0x40000400

08000f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f94:	f003 fba0 	bl	80046d8 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 f907 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000344 	.word	0x20000344
 8000fac:	40004400 	.word	0x40004400

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_GPIO_Init+0x74>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <MX_GPIO_Init+0x74>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_GPIO_Init+0x74>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_GPIO_Init+0x74>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <MX_GPIO_Init+0x74>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_GPIO_Init+0x74>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_GPIO_Init+0x78>)
 8000ffc:	f001 fc50 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001000:	2308      	movs	r3, #8
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_GPIO_Init+0x78>)
 8001018:	f001 fad0 	bl	80025bc <HAL_GPIO_Init>

}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001038:	2100      	movs	r1, #0
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fe4b 	bl	8001cd6 <HAL_CAN_GetRxMessage>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8001046:	f000 f8b3 	bl	80011b0 <Error_Handler>
	}
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002f0 	.word	0x200002f0
 8001058:	200003e0 	.word	0x200003e0

0800105c <CAN_Send>:

void CAN_Send(uint32_t _id, uint8_t *_data) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	TxHeader.StdId = _id;					// Tx CAN ID
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <CAN_Send+0x60>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <CAN_Send+0x60>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <CAN_Send+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <CAN_Send+0x60>)
 800107a:	2208      	movs	r2, #8
 800107c:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <CAN_Send+0x60>)
 8001080:	2200      	movs	r2, #0
 8001082:	751a      	strb	r2, [r3, #20]
	memcpy(TxData, _data, 8);
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <CAN_Send+0x64>)
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	6811      	ldr	r1, [r2, #0]
 800108a:	6852      	ldr	r2, [r2, #4]
 800108c:	6019      	str	r1, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <CAN_Send+0x68>)
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <CAN_Send+0x64>)
 8001094:	4909      	ldr	r1, [pc, #36]	; (80010bc <CAN_Send+0x60>)
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <CAN_Send+0x6c>)
 8001098:	f000 fd0d 	bl	8001ab6 <HAL_CAN_AddTxMessage>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <CAN_Send+0x4a>
		Error_Handler();
 80010a2:	f000 f885 	bl	80011b0 <Error_Handler>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {
 80010a6:	bf00      	nop
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <CAN_Send+0x6c>)
 80010aa:	f000 fddf 	bl	8001c6c <HAL_CAN_GetTxMailboxesFreeLevel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f9      	beq.n	80010a8 <CAN_Send+0x4c>
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200003c8 	.word	0x200003c8
 80010c0:	200002e0 	.word	0x200002e0
 80010c4:	200002e8 	.word	0x200002e8
 80010c8:	2000026c 	.word	0x2000026c
 80010cc:	00000000 	.word	0x00000000

080010d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d14c      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0xaa>
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
		cnt = (int16_t) (TIM3->CNT);
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010f4:	601a      	str	r2, [r3, #0]
		angle_rad = 2 * PI * cnt / (4 * PPR);
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa12 	bl	8000524 <__aeabi_i2d>
 8001100:	a321      	add	r3, pc, #132	; (adr r3, 8001188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa77 	bl	80005f8 <__aeabi_dmul>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	4618      	mov	r0, r3
 8001110:	4621      	mov	r1, r4
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001118:	f7ff fb98 	bl	800084c <__aeabi_ddiv>
 800111c:	4603      	mov	r3, r0
 800111e:	460c      	mov	r4, r1
 8001120:	4618      	mov	r0, r3
 8001122:	4621      	mov	r1, r4
 8001124:	f7ff fd40 	bl	8000ba8 <__aeabi_d2f>
 8001128:	4602      	mov	r2, r0
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800112c:	601a      	str	r2, [r3, #0]
		sprintf(scnt, "%d, %f\r\n", cnt, angle_rad);
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001130:	681d      	ldr	r5, [r3, #0]
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa06 	bl	8000548 <__aeabi_f2d>
 800113c:	4603      	mov	r3, r0
 800113e:	460c      	mov	r4, r1
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	462a      	mov	r2, r5
 8001146:	4917      	ldr	r1, [pc, #92]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800114a:	f004 fad5 	bl	80056f8 <siprintf>
		HAL_UART_Transmit(&huart2, scnt, strlen(scnt) + 1, 0xFFFF);
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001150:	f7ff f83e 	bl	80001d0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29b      	uxth	r3, r3
 8001158:	3301      	adds	r3, #1
 800115a:	b29a      	uxth	r2, r3
 800115c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001160:	4911      	ldr	r1, [pc, #68]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001164:	f003 fb06 	bl	8004774 <HAL_UART_Transmit>
		memcpy(send_data, &angle_rad, 4);
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60bb      	str	r3, [r7, #8]
		CAN_Send( BLDC0_CAN_ID, send_data);
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	4619      	mov	r1, r3
 8001174:	2020      	movs	r0, #32
 8001176:	f7ff ff71 	bl	800105c <CAN_Send>
	}
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bdb0      	pop	{r4, r5, r7, pc}
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	53c8d4f1 	.word	0x53c8d4f1
 800118c:	401921fb 	.word	0x401921fb
 8001190:	200002f8 	.word	0x200002f8
 8001194:	40000400 	.word	0x40000400
 8001198:	20000268 	.word	0x20000268
 800119c:	40890000 	.word	0x40890000
 80011a0:	200002ec 	.word	0x200002ec
 80011a4:	08006ed0 	.word	0x08006ed0
 80011a8:	20000204 	.word	0x20000204
 80011ac:	20000344 	.word	0x20000344

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011b6:	e7fe      	b.n	80011b6 <Error_Handler+0x6>

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d141      	bne.n	80012a6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 8001228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001252:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001264:	2309      	movs	r3, #9
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 f9a3 	bl	80025bc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2013      	movs	r0, #19
 800127c:	f001 f967 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8001280:	2013      	movs	r0, #19
 8001282:	f001 f980 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2014      	movs	r0, #20
 800128c:	f001 f95f 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001290:	2014      	movs	r0, #20
 8001292:	f001 f978 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2015      	movs	r0, #21
 800129c:	f001 f957 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80012a0:	2015      	movs	r0, #21
 80012a2:	f001 f970 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40006400 	.word	0x40006400
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d113      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201c      	movs	r0, #28
 80012e8:	f001 f931 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ec:	201c      	movs	r0, #28
 80012ee:	f001 f94a 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_TIM_Encoder_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d127      	bne.n	8001372 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001352:	2330      	movs	r3, #48	; 0x30
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001362:	2302      	movs	r3, #2
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_TIM_Encoder_MspInit+0x84>)
 800136e:	f001 f925 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40000400 	.word	0x40000400
 8001380:	40021000 	.word	0x40021000
 8001384:	48000400 	.word	0x48000400

08001388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_UART_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d128      	bne.n	80013fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a16      	ldr	r2, [pc, #88]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	6153      	str	r3, [r2, #20]
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0x80>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f001 f8e0 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f8e2 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <CAN_TX_IRQHandler+0x10>)
 8001466:	f000 fd6e 	bl	8001f46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000026c 	.word	0x2000026c

08001474 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <CAN_RX0_IRQHandler+0x10>)
 800147a:	f000 fd64 	bl	8001f46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000026c 	.word	0x2000026c

08001488 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <CAN_RX1_IRQHandler+0x10>)
 800148e:	f000 fd5a 	bl	8001f46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000026c 	.word	0x2000026c

0800149c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM2_IRQHandler+0x10>)
 80014a2:	f002 fd54 	bl	8003f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002f8 	.word	0x200002f8

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f003 fc7c 	bl	8004ddc <__errno>
 80014e4:	4602      	mov	r2, r0
 80014e6:	230c      	movs	r3, #12
 80014e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20003000 	.word	0x20003000
 8001510:	00000400 	.word	0x00000400
 8001514:	200001f8 	.word	0x200001f8
 8001518:	20000408 	.word	0x20000408

0800151c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800156a:	f7ff ffd7 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f003 fc3b 	bl	8004de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001572:	f7ff fb69 	bl	8000c48 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001578:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001584:	08007178 	.word	0x08007178
  ldr r2, =_sbss
 8001588:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800158c:	20000404 	.word	0x20000404

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>
	...

08001594 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x28>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x28>)
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 ffc7 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fe02 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 ffdf 	bl	80025a2 <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 ffa7 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	200003fc 	.word	0x200003fc

08001648 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;  
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200003fc 	.word	0x200003fc

08001660 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_Delay+0x40>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000008 	.word	0x20000008

080016a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0ed      	b.n	8001892 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fd9c 	bl	8001200 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0202 	bic.w	r2, r2, #2
 80016d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d8:	f7ff ffb6 	bl	8001648 <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016de:	e012      	b.n	8001706 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e0:	f7ff ffb2 	bl	8001648 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b0a      	cmp	r3, #10
 80016ec:	d90b      	bls.n	8001706 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0c5      	b.n	8001892 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e5      	bne.n	80016e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001724:	f7ff ff90 	bl	8001648 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800172a:	e012      	b.n	8001752 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800172c:	f7ff ff8c 	bl	8001648 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b0a      	cmp	r3, #10
 8001738:	d90b      	bls.n	8001752 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2205      	movs	r2, #5
 800174a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e09f      	b.n	8001892 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0e5      	beq.n	800172c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7e1b      	ldrb	r3, [r3, #24]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e007      	b.n	800178a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7e5b      	ldrb	r3, [r3, #25]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7e9b      	ldrb	r3, [r3, #26]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0220 	orr.w	r2, r2, #32
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0220 	bic.w	r2, r2, #32
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7edb      	ldrb	r3, [r3, #27]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0210 	bic.w	r2, r2, #16
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0210 	orr.w	r2, r2, #16
 8001806:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7f1b      	ldrb	r3, [r3, #28]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e007      	b.n	8001832 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0208 	bic.w	r2, r2, #8
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7f5b      	ldrb	r3, [r3, #29]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0204 	orr.w	r2, r2, #4
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e007      	b.n	800185c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0204 	bic.w	r2, r2, #4
 800185a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	ea42 0103 	orr.w	r1, r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800189a:	b480      	push	{r7}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80018b2:	7cfb      	ldrb	r3, [r7, #19]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_ConfigFilter+0x26>
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	f040 80aa 	bne.w	8001a14 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2201      	movs	r2, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d123      	bne.n	8001942 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800191c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3248      	adds	r2, #72	; 0x48
 8001922:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001936:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001938:	6979      	ldr	r1, [r7, #20]
 800193a:	3348      	adds	r3, #72	; 0x48
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d122      	bne.n	8001990 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	431a      	orrs	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800196a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3248      	adds	r2, #72	; 0x48
 8001970:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001984:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	3348      	adds	r3, #72	; 0x48
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019aa:	e007      	b.n	80019bc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a06:	f023 0201 	bic.w	r2, r3, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e006      	b.n	8001a22 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
  }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12e      	bne.n	8001aa0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a5a:	f7ff fdf5 	bl	8001648 <HAL_GetTick>
 8001a5e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a60:	e012      	b.n	8001a88 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a62:	f7ff fdf1 	bl	8001648 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b0a      	cmp	r3, #10
 8001a6e:	d90b      	bls.n	8001a88 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2205      	movs	r2, #5
 8001a80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e012      	b.n	8001aae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e5      	bne.n	8001a62 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e006      	b.n	8001aae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
  }
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b089      	sub	sp, #36	; 0x24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <HAL_CAN_AddTxMessage+0x2c>
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	f040 80b8 	bne.w	8001c52 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10a      	bne.n	8001b02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a0 	beq.w	8001c42 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	0e1b      	lsrs	r3, r3, #24
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d907      	bls.n	8001b22 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e09e      	b.n	8001c60 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10d      	bne.n	8001b50 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	6809      	ldr	r1, [r1, #0]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3318      	adds	r3, #24
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	440b      	add	r3, r1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e00f      	b.n	8001b70 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	440b      	add	r3, r1
 8001b80:	3304      	adds	r3, #4
 8001b82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	7d1b      	ldrb	r3, [r3, #20]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d111      	bne.n	8001bb0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3318      	adds	r3, #24
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	6811      	ldr	r1, [r2, #0]
 8001ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	440b      	add	r3, r1
 8001bac:	3304      	adds	r3, #4
 8001bae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3307      	adds	r3, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	061a      	lsls	r2, r3, #24
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3306      	adds	r3, #6
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3305      	adds	r3, #5
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	3204      	adds	r2, #4
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	6811      	ldr	r1, [r2, #0]
 8001bd8:	ea43 0200 	orr.w	r2, r3, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001be6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3303      	adds	r3, #3
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	061a      	lsls	r2, r3, #24
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	4313      	orrs	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	4610      	mov	r0, r2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	6811      	ldr	r1, [r2, #0]
 8001c0e:	ea43 0200 	orr.w	r2, r3, r0
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	440b      	add	r3, r1
 8001c18:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3318      	adds	r3, #24
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	6811      	ldr	r1, [r2, #0]
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3318      	adds	r3, #24
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	440b      	add	r3, r1
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e00e      	b.n	8001c60 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e006      	b.n	8001c60 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3724      	adds	r7, #36	; 0x24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d002      	beq.n	8001c8c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d11d      	bne.n	8001cc8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b087      	sub	sp, #28
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d003      	beq.n	8001cfa <HAL_CAN_GetRxMessage+0x24>
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	f040 80f3 	bne.w	8001ee0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10e      	bne.n	8001d1e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0e7      	b.n	8001eee <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d8      	b.n	8001eee <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	331b      	adds	r3, #27
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0204 	and.w	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	331b      	adds	r3, #27
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0d5b      	lsrs	r3, r3, #21
 8001d6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	331b      	adds	r3, #27
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	08db      	lsrs	r3, r3, #3
 8001d84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	331b      	adds	r3, #27
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4413      	add	r3, r2
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0202 	and.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	331b      	adds	r3, #27
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 020f 	and.w	r2, r3, #15
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	331b      	adds	r3, #27
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	331b      	adds	r3, #27
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0a1a      	lsrs	r2, r3, #8
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0c1a      	lsrs	r2, r3, #16
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e1a      	lsrs	r2, r3, #24
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	3303      	adds	r3, #3
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0a1a      	lsrs	r2, r3, #8
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	3305      	adds	r3, #5
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0c1a      	lsrs	r2, r3, #16
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3306      	adds	r3, #6
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e1a      	lsrs	r2, r3, #24
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	3307      	adds	r3, #7
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	e007      	b.n	8001edc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e006      	b.n	8001eee <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d002      	beq.n	8001f18 <HAL_CAN_ActivateNotification+0x1e>
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d109      	bne.n	8001f2c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e006      	b.n	8001f3a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b08a      	sub	sp, #40	; 0x28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d07c      	beq.n	8002086 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d023      	beq.n	8001fde <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f97d 	bl	80022a8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fae:	e016      	b.n	8001fde <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e00c      	b.n	8001fde <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	e002      	b.n	8001fde <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f983 	bl	80022e4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d024      	beq.n	8002032 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f95d 	bl	80022bc <HAL_CAN_TxMailbox1CompleteCallback>
 8002002:	e016      	b.n	8002032 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e00c      	b.n	8002032 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e002      	b.n	8002032 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f963 	bl	80022f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d024      	beq.n	8002086 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002044:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f93d 	bl	80022d0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002056:	e016      	b.n	8002086 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	e00c      	b.n	8002086 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	e002      	b.n	8002086 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f943 	bl	800230c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2210      	movs	r2, #16
 80020a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2208      	movs	r2, #8
 80020c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f92a 	bl	8002320 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7fe ffa1 	bl	800102c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00c      	beq.n	800210e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2210      	movs	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2208      	movs	r2, #8
 8002128:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f90c 	bl	8002348 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8f3 	bl	8002334 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2210      	movs	r2, #16
 8002168:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8f6 	bl	800235c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2208      	movs	r2, #8
 800218a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8ef 	bl	8002370 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d075      	beq.n	8002288 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d06c      	beq.n	8002280 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002200:	2b00      	cmp	r3, #0
 8002202:	d03d      	beq.n	8002280 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d038      	beq.n	8002280 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d017      	beq.n	8002248 <HAL_CAN_IRQHandler+0x302>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d804      	bhi.n	8002226 <HAL_CAN_IRQHandler+0x2e0>
 800221c:	2b10      	cmp	r3, #16
 800221e:	d009      	beq.n	8002234 <HAL_CAN_IRQHandler+0x2ee>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d00c      	beq.n	800223e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002224:	e024      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002226:	2b50      	cmp	r3, #80	; 0x50
 8002228:	d018      	beq.n	800225c <HAL_CAN_IRQHandler+0x316>
 800222a:	2b60      	cmp	r3, #96	; 0x60
 800222c:	d01b      	beq.n	8002266 <HAL_CAN_IRQHandler+0x320>
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d00f      	beq.n	8002252 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002232:	e01d      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f043 0308 	orr.w	r3, r3, #8
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800223c:	e018      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002246:	e013      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002250:	e00e      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800225a:	e009      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002264:	e004      	b.n	8002270 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800226e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800227e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2204      	movs	r2, #4
 8002286:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f872 	bl	8002384 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ca:	e14e      	b.n	800286a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8140 	beq.w	8002864 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d00b      	beq.n	8002604 <HAL_GPIO_Init+0x48>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d007      	beq.n	8002604 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f8:	2b11      	cmp	r3, #17
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b12      	cmp	r3, #18
 8002602:	d130      	bne.n	8002666 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263a:	2201      	movs	r2, #1
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0201 	and.w	r2, r3, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0xea>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b12      	cmp	r3, #18
 80026a4:	d123      	bne.n	80026ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	6939      	ldr	r1, [r7, #16]
 80026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 809a 	beq.w	8002864 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002730:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_GPIO_Init+0x2cc>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a54      	ldr	r2, [pc, #336]	; (8002888 <HAL_GPIO_Init+0x2cc>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b52      	ldr	r3, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x2cc>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002748:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002772:	d013      	beq.n	800279c <HAL_GPIO_Init+0x1e0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a46      	ldr	r2, [pc, #280]	; (8002890 <HAL_GPIO_Init+0x2d4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00d      	beq.n	8002798 <HAL_GPIO_Init+0x1dc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a45      	ldr	r2, [pc, #276]	; (8002894 <HAL_GPIO_Init+0x2d8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <HAL_GPIO_Init+0x1d8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a44      	ldr	r2, [pc, #272]	; (8002898 <HAL_GPIO_Init+0x2dc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_GPIO_Init+0x1d4>
 800278c:	2303      	movs	r3, #3
 800278e:	e006      	b.n	800279e <HAL_GPIO_Init+0x1e2>
 8002790:	2305      	movs	r3, #5
 8002792:	e004      	b.n	800279e <HAL_GPIO_Init+0x1e2>
 8002794:	2302      	movs	r3, #2
 8002796:	e002      	b.n	800279e <HAL_GPIO_Init+0x1e2>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_GPIO_Init+0x1e2>
 800279c:	2300      	movs	r3, #0
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	f002 0203 	and.w	r2, r2, #3
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	4093      	lsls	r3, r2
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ae:	4937      	ldr	r1, [pc, #220]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027bc:	4b37      	ldr	r3, [pc, #220]	; (800289c <HAL_GPIO_Init+0x2e0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027e0:	4a2e      	ldr	r2, [pc, #184]	; (800289c <HAL_GPIO_Init+0x2e0>)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_GPIO_Init+0x2e0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_GPIO_Init+0x2e0>)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_GPIO_Init+0x2e0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_GPIO_Init+0x2e0>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_GPIO_Init+0x2e0>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_GPIO_Init+0x2e0>)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f aea9 	bne.w	80025cc <HAL_GPIO_Init+0x10>
  }
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000
 8002890:	48000400 	.word	0x48000400
 8002894:	48000800 	.word	0x48000800
 8002898:	48000c00 	.word	0x48000c00
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43d9      	mvns	r1, r3
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	400b      	ands	r3, r1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800290a:	af00      	add	r7, sp, #0
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f000 bef4 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 816a 	beq.w	8002c02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800292e:	4bb3      	ldr	r3, [pc, #716]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d00c      	beq.n	8002954 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800293a:	4bb0      	ldr	r3, [pc, #704]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d159      	bne.n	80029fa <HAL_RCC_OscConfig+0xf6>
 8002946:	4bad      	ldr	r3, [pc, #692]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d152      	bne.n	80029fa <HAL_RCC_OscConfig+0xf6>
 8002954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002958:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002968:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <HAL_RCC_OscConfig+0x82>
 8002980:	4b9e      	ldr	r3, [pc, #632]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0xae>
 8002986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800299a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029ae:	4b93      	ldr	r3, [pc, #588]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029be:	fa92 f2a2 	rbit	r2, r2
 80029c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029ca:	fab2 f282 	clz	r2, r2
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f002 021f 	and.w	r2, r2, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 810c 	beq.w	8002c00 <HAL_RCC_OscConfig+0x2fc>
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 8106 	bne.w	8002c00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f000 be86 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x110>
 8002a06:	4b7d      	ldr	r3, [pc, #500]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e030      	b.n	8002a76 <HAL_RCC_OscConfig+0x172>
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x134>
 8002a1e:	4b77      	ldr	r3, [pc, #476]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a76      	ldr	r2, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b74      	ldr	r3, [pc, #464]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a73      	ldr	r2, [pc, #460]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01e      	b.n	8002a76 <HAL_RCC_OscConfig+0x172>
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x15a>
 8002a44:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a69      	ldr	r2, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x172>
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a66      	ldr	r2, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a76:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f023 020f 	bic.w	r2, r3, #15
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	495d      	ldr	r1, [pc, #372]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d059      	beq.n	8002b48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fdd8 	bl	8001648 <HAL_GetTick>
 8002a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fdd3 	bl	8001648 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	f000 be29 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>
 8002ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ac8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x1e2>
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x20e>
 8002ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b2a:	fab2 f282 	clz	r2, r2
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f002 021f 	and.w	r2, r2, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ab      	beq.n	8002a9e <HAL_RCC_OscConfig+0x19a>
 8002b46:	e05c      	b.n	8002c02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fd7e 	bl	8001648 <HAL_GetTick>
 8002b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b52:	f7fe fd79 	bl	8001648 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d902      	bls.n	8002b68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	f000 bdcf 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>
 8002b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0x296>
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2c2>
 8002b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_RCC_OscConfig+0x2f8>)
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002bce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bd2:	fa92 f2a2 	rbit	r2, r2
 8002bd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ab      	bne.n	8002b52 <HAL_RCC_OscConfig+0x24e>
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_OscConfig+0x2fe>
 8002bfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 816f 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c12:	4bd0      	ldr	r3, [pc, #832]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c1e:	4bcd      	ldr	r3, [pc, #820]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d16c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x400>
 8002c2a:	4bca      	ldr	r3, [pc, #808]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d166      	bne.n	8002d04 <HAL_RCC_OscConfig+0x400>
 8002c36:	2302      	movs	r3, #2
 8002c38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_OscConfig+0x362>
 8002c60:	4bbc      	ldr	r3, [pc, #752]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	e013      	b.n	8002c8e <HAL_RCC_OscConfig+0x38a>
 8002c66:	2302      	movs	r3, #2
 8002c68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c78:	2302      	movs	r3, #2
 8002c7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c8a:	4bb2      	ldr	r3, [pc, #712]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c98:	fa92 f2a2 	rbit	r2, r2
 8002c9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ca0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f042 0220 	orr.w	r2, r2, #32
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f002 021f 	and.w	r2, r2, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x3cc>
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f000 bd1b 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4ba0      	ldr	r3, [pc, #640]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	21f8      	movs	r1, #248	; 0xf8
 8002ce0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ce8:	fa91 f1a1 	rbit	r1, r1
 8002cec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002cf0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cf4:	fab1 f181 	clz	r1, r1
 8002cf8:	b2c9      	uxtb	r1, r1
 8002cfa:	408b      	lsls	r3, r1
 8002cfc:	4995      	ldr	r1, [pc, #596]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e0f5      	b.n	8002ef0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8085 	beq.w	8002e1a <HAL_RCC_OscConfig+0x516>
 8002d10:	2301      	movs	r3, #1
 8002d12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	461a      	mov	r2, r3
 8002d38:	2301      	movs	r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fc84 	bl	8001648 <HAL_GetTick>
 8002d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe fc7f 	bl	8001648 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d902      	bls.n	8002d5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	f000 bcd5 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_OscConfig+0x488>
 8002d86:	4b73      	ldr	r3, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e013      	b.n	8002db4 <HAL_RCC_OscConfig+0x4b0>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002da4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002db0:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2202      	movs	r2, #2
 8002db6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dbe:	fa92 f2a2 	rbit	r2, r2
 8002dc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0af      	beq.n	8002d46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	4b5b      	ldr	r3, [pc, #364]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	21f8      	movs	r1, #248	; 0xf8
 8002df6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dfe:	fa91 f1a1 	rbit	r1, r1
 8002e02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e0a:	fab1 f181 	clz	r1, r1
 8002e0e:	b2c9      	uxtb	r1, r1
 8002e10:	408b      	lsls	r3, r1
 8002e12:	4950      	ldr	r1, [pc, #320]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e06a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x5ec>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	461a      	mov	r2, r3
 8002e42:	2300      	movs	r3, #0
 8002e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fbff 	bl	8001648 <HAL_GetTick>
 8002e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e50:	f7fe fbfa 	bl	8001648 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d902      	bls.n	8002e66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	f000 bc50 	b.w	8003706 <HAL_RCC_OscConfig+0xe02>
 8002e66:	2302      	movs	r3, #2
 8002e68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCC_OscConfig+0x592>
 8002e90:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e013      	b.n	8002ebe <HAL_RCC_OscConfig+0x5ba>
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_RCC_OscConfig+0x650>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ec4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ed0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ed4:	fab2 f282 	clz	r2, r2
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f042 0220 	orr.w	r2, r2, #32
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f002 021f 	and.w	r2, r2, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1af      	bne.n	8002e50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80da 	beq.w	80030b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d069      	beq.n	8002fde <HAL_RCC_OscConfig+0x6da>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_OscConfig+0x654>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2301      	movs	r3, #1
 8002f32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fe fb88 	bl	8001648 <HAL_GetTick>
 8002f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fb83 	bl	8001648 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d906      	bls.n	8002f5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e3d9      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	10908120 	.word	0x10908120
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f72:	2202      	movs	r2, #2
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	4ba5      	ldr	r3, [pc, #660]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8002fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	6019      	str	r1, [r3, #0]
 8002faa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f1a3 	rbit	r1, r3
 8002fb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fb8:	6019      	str	r1, [r3, #0]
  return result;
 8002fba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0b0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x63a>
 8002fdc:	e06a      	b.n	80030b4 <HAL_RCC_OscConfig+0x7b0>
 8002fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ff4:	601a      	str	r2, [r3, #0]
  return result;
 8002ff6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ffa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fb1a 	bl	8001648 <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	e009      	b.n	800302e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301a:	f7fe fb15 	bl	8001648 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e36b      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 800302e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003074:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003076:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800307a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800307e:	2102      	movs	r1, #2
 8003080:	6019      	str	r1, [r3, #0]
 8003082:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f1a3 	rbit	r1, r3
 800308c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003090:	6019      	str	r1, [r3, #0]
  return result;
 8003092:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1b2      	bne.n	800301a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8158 	beq.w	8003374 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b5a      	ldr	r3, [pc, #360]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a56      	ldr	r2, [pc, #344]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b54      	ldr	r3, [pc, #336]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f107 0308 	add.w	r3, r7, #8
 80030f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <HAL_RCC_OscConfig+0x938>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11a      	bne.n	800313e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_RCC_OscConfig+0x938>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_RCC_OscConfig+0x938>)
 800310e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003112:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003114:	f7fe fa98 	bl	8001648 <HAL_GetTick>
 8003118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	e009      	b.n	8003132 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7fe fa93 	bl	8001648 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e2e9      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCC_OscConfig+0x938>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ef      	beq.n	800311e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x852>
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a39      	ldr	r2, [pc, #228]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e02f      	b.n	80031b6 <HAL_RCC_OscConfig+0x8b2>
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <HAL_RCC_OscConfig+0x876>
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6213      	str	r3, [r2, #32]
 800316c:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4a30      	ldr	r2, [pc, #192]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003172:	f023 0304 	bic.w	r3, r3, #4
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	e01d      	b.n	80031b6 <HAL_RCC_OscConfig+0x8b2>
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x89a>
 8003184:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a27      	ldr	r2, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	e00b      	b.n	80031b6 <HAL_RCC_OscConfig+0x8b2>
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4a21      	ldr	r2, [pc, #132]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d06b      	beq.n	8003298 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fa42 	bl	8001648 <HAL_GetTick>
 80031c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00b      	b.n	80031e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fa3d 	bl	8001648 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e291      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 80031e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031e6:	2202      	movs	r2, #2
 80031e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	fa93 f2a3 	rbit	r2, r3
 80031f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003210:	601a      	str	r2, [r3, #0]
  return result;
 8003212:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003216:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d109      	bne.n	8003240 <HAL_RCC_OscConfig+0x93c>
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <HAL_RCC_OscConfig+0x930>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	e014      	b.n	800325c <HAL_RCC_OscConfig+0x958>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	10908120 	.word	0x10908120
 800323c:	40007000 	.word	0x40007000
 8003240:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003244:	2202      	movs	r2, #2
 8003246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f2a3 	rbit	r2, r3
 8003252:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	4bbb      	ldr	r3, [pc, #748]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003260:	2102      	movs	r1, #2
 8003262:	6011      	str	r1, [r2, #0]
 8003264:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	fa92 f1a2 	rbit	r1, r2
 800326e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003272:	6011      	str	r1, [r2, #0]
  return result;
 8003274:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	f002 021f 	and.w	r2, r2, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d099      	beq.n	80031ca <HAL_RCC_OscConfig+0x8c6>
 8003296:	e063      	b.n	8003360 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe f9d6 	bl	8001648 <HAL_GetTick>
 800329c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f9d1 	bl	8001648 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e225      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 80032ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032be:	2202      	movs	r2, #2
 80032c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f2a3 	rbit	r2, r3
 80032cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032d6:	2202      	movs	r2, #2
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fa93 f2a3 	rbit	r2, r3
 80032e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032e8:	601a      	str	r2, [r3, #0]
  return result;
 80032ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d102      	bne.n	800330a <HAL_RCC_OscConfig+0xa06>
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	e00d      	b.n	8003326 <HAL_RCC_OscConfig+0xa22>
 800330a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800330e:	2202      	movs	r2, #2
 8003310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800332a:	2102      	movs	r1, #2
 800332c:	6011      	str	r1, [r2, #0]
 800332e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	fa92 f1a2 	rbit	r1, r2
 8003338:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800333c:	6011      	str	r1, [r2, #0]
  return result;
 800333e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	fab2 f282 	clz	r2, r2
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f002 021f 	and.w	r2, r2, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1a0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003360:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b77      	ldr	r3, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4a76      	ldr	r2, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 800336e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003372:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 81c2 	beq.w	8003704 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	f000 819c 	beq.w	80036c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f040 8114 	bne.w	80035c2 <HAL_RCC_OscConfig+0xcbe>
 800339a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800339e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033b2:	601a      	str	r2, [r3, #0]
  return result;
 80033b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	461a      	mov	r2, r3
 80033cc:	2300      	movs	r3, #0
 80033ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe f93a 	bl	8001648 <HAL_GetTick>
 80033d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d8:	e009      	b.n	80033ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033da:	f7fe f935 	bl	8001648 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e18b      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 80033ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003406:	601a      	str	r2, [r3, #0]
  return result;
 8003408:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800340c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <HAL_RCC_OscConfig+0xb24>
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	e01b      	b.n	8003460 <HAL_RCC_OscConfig+0xb5c>
 8003428:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800342c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003464:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003468:	6011      	str	r1, [r2, #0]
 800346a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	fa92 f1a2 	rbit	r1, r2
 8003474:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003478:	6011      	str	r1, [r2, #0]
  return result;
 800347a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	f042 0220 	orr.w	r2, r2, #32
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	f002 021f 	and.w	r2, r2, #31
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f202 	lsl.w	r2, r1, r2
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d19e      	bne.n	80033da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349c:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	fa93 f2a3 	rbit	r2, r3
 80034cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034d0:	601a      	str	r2, [r3, #0]
  return result;
 80034d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	461a      	mov	r2, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe f8ab 	bl	8001648 <HAL_GetTick>
 80034f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f6:	e009      	b.n	800350c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe f8a6 	bl	8001648 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0fc      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 800350c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003524:	601a      	str	r2, [r3, #0]
  return result;
 8003526:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800352a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCC_OscConfig+0xc48>
 8003540:	4b01      	ldr	r3, [pc, #4]	; (8003548 <HAL_RCC_OscConfig+0xc44>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	e01e      	b.n	8003584 <HAL_RCC_OscConfig+0xc80>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800356a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fa93 f2a3 	rbit	r2, r3
 800357a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_OscConfig+0xe0c>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003588:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fa92 f1a2 	rbit	r1, r2
 8003598:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800359c:	6011      	str	r1, [r2, #0]
  return result;
 800359e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f002 021f 	and.w	r2, r2, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d09b      	beq.n	80034f8 <HAL_RCC_OscConfig+0xbf4>
 80035c0:	e0a0      	b.n	8003704 <HAL_RCC_OscConfig+0xe00>
 80035c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f2a3 	rbit	r2, r3
 80035d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035da:	601a      	str	r2, [r3, #0]
  return result;
 80035dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	461a      	mov	r2, r3
 80035f4:	2300      	movs	r3, #0
 80035f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe f826 	bl	8001648 <HAL_GetTick>
 80035fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003600:	e009      	b.n	8003616 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe f821 	bl	8001648 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e077      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
 8003616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800361a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362e:	601a      	str	r2, [r3, #0]
  return result;
 8003630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003634:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_RCC_OscConfig+0xd4c>
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_RCC_OscConfig+0xe0c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e01b      	b.n	8003688 <HAL_RCC_OscConfig+0xd84>
 8003650:	f107 0320 	add.w	r3, r7, #32
 8003654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f107 0320 	add.w	r3, r7, #32
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f107 0318 	add.w	r3, r7, #24
 800366e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f107 0318 	add.w	r3, r7, #24
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	fa93 f2a3 	rbit	r2, r3
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_OscConfig+0xe0c>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f107 0210 	add.w	r2, r7, #16
 800368c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003690:	6011      	str	r1, [r2, #0]
 8003692:	f107 0210 	add.w	r2, r7, #16
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	fa92 f1a2 	rbit	r1, r2
 800369c:	f107 020c 	add.w	r2, r7, #12
 80036a0:	6011      	str	r1, [r2, #0]
  return result;
 80036a2:	f107 020c 	add.w	r2, r7, #12
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f042 0220 	orr.w	r2, r2, #32
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f002 021f 	and.w	r2, r2, #31
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d19e      	bne.n	8003602 <HAL_RCC_OscConfig+0xcfe>
 80036c4:	e01e      	b.n	8003704 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e018      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_RCC_OscConfig+0xe0c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e4:	1d3b      	adds	r3, r7, #4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d108      	bne.n	8003700 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b09e      	sub	sp, #120	; 0x78
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e162      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b90      	ldr	r3, [pc, #576]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d910      	bls.n	800375c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b8d      	ldr	r3, [pc, #564]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 0207 	bic.w	r2, r3, #7
 8003742:	498b      	ldr	r1, [pc, #556]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b89      	ldr	r3, [pc, #548]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e14a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b82      	ldr	r3, [pc, #520]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	497f      	ldr	r1, [pc, #508]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80dc 	beq.w	8003940 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d13c      	bne.n	800380a <HAL_RCC_ClockConfig+0xf6>
 8003790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003794:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800379e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_ClockConfig+0xa6>
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	e00f      	b.n	80037da <HAL_RCC_ClockConfig+0xc6>
 80037ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	667b      	str	r3, [r7, #100]	; 0x64
 80037c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037cc:	663b      	str	r3, [r7, #96]	; 0x60
 80037ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037de:	65ba      	str	r2, [r7, #88]	; 0x58
 80037e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037e2:	fa92 f2a2 	rbit	r2, r2
 80037e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037ea:	fab2 f282 	clz	r2, r2
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	f042 0220 	orr.w	r2, r2, #32
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f002 021f 	and.w	r2, r2, #31
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d17b      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0f3      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d13c      	bne.n	800388c <HAL_RCC_ClockConfig+0x178>
 8003812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d102      	bne.n	800383c <HAL_RCC_ClockConfig+0x128>
 8003836:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	e00f      	b.n	800385c <HAL_RCC_ClockConfig+0x148>
 800383c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003840:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
 800384a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384e:	643b      	str	r3, [r7, #64]	; 0x40
 8003850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003860:	63ba      	str	r2, [r7, #56]	; 0x38
 8003862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003864:	fa92 f2a2 	rbit	r2, r2
 8003868:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800386a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d13a      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b2      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
 800388c:	2302      	movs	r3, #2
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x1a0>
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e00d      	b.n	80038d0 <HAL_RCC_ClockConfig+0x1bc>
 80038b4:	2302      	movs	r3, #2
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	2302      	movs	r3, #2
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2202      	movs	r2, #2
 80038d2:	61ba      	str	r2, [r7, #24]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	617a      	str	r2, [r7, #20]
  return result;
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f042 0220 	orr.w	r2, r2, #32
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f002 021f 	and.w	r2, r2, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e079      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	491a      	ldr	r1, [pc, #104]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003910:	f7fd fe9a 	bl	8001648 <HAL_GetTick>
 8003914:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fd fe96 	bl	8001648 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e061      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_ClockConfig+0x260>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d214      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4906      	ldr	r1, [pc, #24]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e040      	b.n	80039f2 <HAL_RCC_ClockConfig+0x2de>
 8003970:	40022000 	.word	0x40022000
 8003974:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCC_ClockConfig+0x2e8>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	491a      	ldr	r1, [pc, #104]	; (80039fc <HAL_RCC_ClockConfig+0x2e8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a2:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x2e8>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4912      	ldr	r1, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x2e8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039b6:	f000 f829 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ba:	4601      	mov	r1, r0
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_RCC_ClockConfig+0x2e8>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c4:	22f0      	movs	r2, #240	; 0xf0
 80039c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	fa92 f2a2 	rbit	r2, r2
 80039ce:	60fa      	str	r2, [r7, #12]
  return result;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	fab2 f282 	clz	r2, r2
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	40d3      	lsrs	r3, r2
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x2ec>)
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
 80039de:	fa21 f303 	lsr.w	r3, r1, r3
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_RCC_ClockConfig+0x2f0>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_RCC_ClockConfig+0x2f4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fde8 	bl	80015c0 <HAL_InitTick>
  
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3778      	adds	r7, #120	; 0x78
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08006edc 	.word	0x08006edc
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b08b      	sub	sp, #44	; 0x2c
 8003a10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x30>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x36>
 8003a3a:	e03c      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a3e:	623b      	str	r3, [r7, #32]
      break;
 8003a40:	e03c      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	fa92 f2a2 	rbit	r2, r2
 8003a54:	607a      	str	r2, [r7, #4]
  return result;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	40d3      	lsrs	r3, r2
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	220f      	movs	r2, #15
 8003a70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	fa92 f2a2 	rbit	r2, r2
 8003a78:	60fa      	str	r2, [r7, #12]
  return result;
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	40d3      	lsrs	r3, r2
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	623b      	str	r3, [r7, #32]
      break;
 8003ab4:	e002      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ab8:	623b      	str	r3, [r7, #32]
      break;
 8003aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abc:	6a3b      	ldr	r3, [r7, #32]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	372c      	adds	r7, #44	; 0x2c
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	007a1200 	.word	0x007a1200
 8003ad4:	08006ef4 	.word	0x08006ef4
 8003ad8:	08006f04 	.word	0x08006f04
 8003adc:	003d0900 	.word	0x003d0900

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000000 	.word	0x20000000

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003afe:	f7ff ffef 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b02:	4601      	mov	r1, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	603a      	str	r2, [r7, #0]
  return result;
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	fab2 f282 	clz	r2, r2
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	40d3      	lsrs	r3, r2
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	08006eec 	.word	0x08006eec

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b42:	f7ff ffcd 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b46:	4601      	mov	r1, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	fa92 f2a2 	rbit	r2, r2
 8003b5c:	603a      	str	r2, [r7, #0]
  return result;
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	40d3      	lsrs	r3, r2
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08006eec 	.word	0x08006eec

08003b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e049      	b.n	8003c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fb86 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 fbc6 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d001      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e040      	b.n	8003cca <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x58>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d009      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x58>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_TIM_Base_Start_IT+0xac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x58>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d115      	bne.n	8003cb4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b06      	cmp	r3, #6
 8003c98:	d015      	beq.n	8003cc6 <HAL_TIM_Base_Start_IT+0x96>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca0:	d011      	beq.n	8003cc6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	e008      	b.n	8003cc6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e000      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	00010007 	.word	0x00010007

08003ce8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e097      	b.n	8003e2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7fd faf5 	bl	8001300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003d2c:	f023 0307 	bic.w	r3, r3, #7
 8003d30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 fb07 	bl	8004350 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d88:	f023 030c 	bic.w	r3, r3, #12
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	4313      	orrs	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	011a      	lsls	r2, r3, #4
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	031b      	lsls	r3, r3, #12
 8003db8:	4313      	orrs	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d110      	bne.n	8003e86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e6a:	7b7b      	ldrb	r3, [r7, #13]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e068      	b.n	8003f46 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e84:	e031      	b.n	8003eea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d110      	bne.n	8003eae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d102      	bne.n	8003e98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e92:	7b3b      	ldrb	r3, [r7, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e054      	b.n	8003f46 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eac:	e01d      	b.n	8003eea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d108      	bne.n	8003ec6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eb4:	7bbb      	ldrb	r3, [r7, #14]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eba:	7b7b      	ldrb	r3, [r7, #13]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d102      	bne.n	8003ec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ec0:	7b3b      	ldrb	r3, [r7, #12]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d001      	beq.n	8003eca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e03d      	b.n	8003f46 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_TIM_Encoder_Start+0xc2>
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d008      	beq.n	8003f06 <HAL_TIM_Encoder_Start+0xd2>
 8003ef4:	e00f      	b.n	8003f16 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb38 	bl	8004574 <TIM_CCxChannelCmd>
      break;
 8003f04:	e016      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fb30 	bl	8004574 <TIM_CCxChannelCmd>
      break;
 8003f14:	e00e      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb28 	bl	8004574 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb21 	bl	8004574 <TIM_CCxChannelCmd>
      break;
 8003f32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d122      	bne.n	8003faa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d11b      	bne.n	8003faa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0202 	mvn.w	r2, #2
 8003f7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f9be 	bl	8004312 <HAL_TIM_IC_CaptureCallback>
 8003f96:	e005      	b.n	8003fa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f9b0 	bl	80042fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9c1 	bl	8004326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d122      	bne.n	8003ffe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d11b      	bne.n	8003ffe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0204 	mvn.w	r2, #4
 8003fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f994 	bl	8004312 <HAL_TIM_IC_CaptureCallback>
 8003fea:	e005      	b.n	8003ff8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f986 	bl	80042fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f997 	bl	8004326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d122      	bne.n	8004052 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d11b      	bne.n	8004052 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0208 	mvn.w	r2, #8
 8004022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2204      	movs	r2, #4
 8004028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f96a 	bl	8004312 <HAL_TIM_IC_CaptureCallback>
 800403e:	e005      	b.n	800404c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f95c 	bl	80042fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f96d 	bl	8004326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d122      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d11b      	bne.n	80040a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0210 	mvn.w	r2, #16
 8004076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2208      	movs	r2, #8
 800407c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f940 	bl	8004312 <HAL_TIM_IC_CaptureCallback>
 8004092:	e005      	b.n	80040a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f932 	bl	80042fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f943 	bl	8004326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10e      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f06f 0201 	mvn.w	r2, #1
 80040ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fc ffff 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d10e      	bne.n	80040fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d107      	bne.n	80040fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fad9 	bl	80046b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 facc 	bl	80046c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8f1 	bl	800433a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b20      	cmp	r3, #32
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0220 	mvn.w	r2, #32
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa8c 	bl	800469c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0a8      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d067      	beq.n	80042b0 <HAL_TIM_ConfigClockSource+0x124>
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d80b      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x70>
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d073      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x144>
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d802      	bhi.n	80041f2 <HAL_TIM_ConfigClockSource+0x66>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d06f      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041f0:	e078      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d06c      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x144>
 80041f6:	2b30      	cmp	r3, #48	; 0x30
 80041f8:	d06a      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80041fa:	e073      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80041fc:	2b70      	cmp	r3, #112	; 0x70
 80041fe:	d00d      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x90>
 8004200:	2b70      	cmp	r3, #112	; 0x70
 8004202:	d804      	bhi.n	800420e <HAL_TIM_ConfigClockSource+0x82>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d033      	beq.n	8004270 <HAL_TIM_ConfigClockSource+0xe4>
 8004208:	2b60      	cmp	r3, #96	; 0x60
 800420a:	d041      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800420c:	e06a      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004212:	d066      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x156>
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004218:	d017      	beq.n	800424a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800421a:	e063      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6899      	ldr	r1, [r3, #8]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f000 f982 	bl	8004534 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800423e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
      break;
 8004248:	e04c      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6899      	ldr	r1, [r3, #8]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f000 f96b 	bl	8004534 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800426c:	609a      	str	r2, [r3, #8]
      break;
 800426e:	e039      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	461a      	mov	r2, r3
 800427e:	f000 f8df 	bl	8004440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2150      	movs	r1, #80	; 0x50
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f938 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 800428e:	e029      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	461a      	mov	r2, r3
 800429e:	f000 f8fe 	bl	800449e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2160      	movs	r1, #96	; 0x60
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f928 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 80042ae:	e019      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	f000 f8bf 	bl	8004440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2140      	movs	r1, #64	; 0x40
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f918 	bl	80044fe <TIM_ITRx_SetConfig>
      break;
 80042ce:	e009      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f000 f90f 	bl	80044fe <TIM_ITRx_SetConfig>
        break;
 80042e0:	e000      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80042e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a32      	ldr	r2, [pc, #200]	; (800442c <TIM_Base_SetConfig+0xdc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0x28>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0x28>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <TIM_Base_SetConfig+0xe0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d108      	bne.n	800438a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a27      	ldr	r2, [pc, #156]	; (800442c <TIM_Base_SetConfig+0xdc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0x6a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0x6a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <TIM_Base_SetConfig+0xe0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x6a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <TIM_Base_SetConfig+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x6a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <TIM_Base_SetConfig+0xe8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x6a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <TIM_Base_SetConfig+0xec>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a0e      	ldr	r2, [pc, #56]	; (800442c <TIM_Base_SetConfig+0xdc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0xc0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <TIM_Base_SetConfig+0xe4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0xc0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <TIM_Base_SetConfig+0xe8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0xc0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <TIM_Base_SetConfig+0xec>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40000400 	.word	0x40000400
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800446a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 030a 	bic.w	r3, r3, #10
 800447c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0210 	bic.w	r2, r3, #16
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	f043 0307 	orr.w	r3, r3, #7
 8004520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	431a      	orrs	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2201      	movs	r2, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	43db      	mvns	r3, r3
 8004596:	401a      	ands	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e054      	b.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a24      	ldr	r2, [pc, #144]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d108      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004608:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a11      	ldr	r2, [pc, #68]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10c      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40000400 	.word	0x40000400
 8004698:	40014000 	.word	0x40014000

0800469c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e040      	b.n	800476c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fe44 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2224      	movs	r2, #36	; 0x24
 8004704:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8c0 	bl	800489c <UART_SetConfig>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e022      	b.n	800476c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9ec 	bl	8004b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fa73 	bl	8004c50 <UART_CheckIdleState>
 800476a:	4603      	mov	r3, r0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004788:	2b20      	cmp	r3, #32
 800478a:	f040 8082 	bne.w	8004892 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_UART_Transmit+0x26>
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07a      	b.n	8004894 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Transmit+0x38>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e073      	b.n	8004894 <HAL_UART_Transmit+0x120>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2221      	movs	r2, #33	; 0x21
 80047c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c2:	f7fc ff41 	bl	8001648 <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d108      	bne.n	80047f4 <HAL_UART_Transmit+0x80>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e003      	b.n	80047fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004804:	e02d      	b.n	8004862 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	2180      	movs	r1, #128	; 0x80
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fa66 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e039      	b.n	8004894 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004832:	b292      	uxth	r2, r2
 8004834:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3302      	adds	r3, #2
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e008      	b.n	8004850 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b292      	uxth	r2, r2
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1cb      	bne.n	8004806 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fa32 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e005      	b.n	8004894 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <UART_SetConfig+0x258>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a79      	ldr	r2, [pc, #484]	; (8004af8 <UART_SetConfig+0x25c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d121      	bne.n	800495c <UART_SetConfig+0xc0>
 8004918:	4b78      	ldr	r3, [pc, #480]	; (8004afc <UART_SetConfig+0x260>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b03      	cmp	r3, #3
 8004922:	d817      	bhi.n	8004954 <UART_SetConfig+0xb8>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x90>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	0800493d 	.word	0x0800493d
 8004930:	08004949 	.word	0x08004949
 8004934:	0800494f 	.word	0x0800494f
 8004938:	08004943 	.word	0x08004943
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e01e      	b.n	8004980 <UART_SetConfig+0xe4>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e01b      	b.n	8004980 <UART_SetConfig+0xe4>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e018      	b.n	8004980 <UART_SetConfig+0xe4>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e015      	b.n	8004980 <UART_SetConfig+0xe4>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	bf00      	nop
 800495a:	e011      	b.n	8004980 <UART_SetConfig+0xe4>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a67      	ldr	r2, [pc, #412]	; (8004b00 <UART_SetConfig+0x264>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d102      	bne.n	800496c <UART_SetConfig+0xd0>
 8004966:	2300      	movs	r3, #0
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e009      	b.n	8004980 <UART_SetConfig+0xe4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a64      	ldr	r2, [pc, #400]	; (8004b04 <UART_SetConfig+0x268>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d102      	bne.n	800497c <UART_SetConfig+0xe0>
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e001      	b.n	8004980 <UART_SetConfig+0xe4>
 800497c:	2310      	movs	r3, #16
 800497e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	d15c      	bne.n	8004a44 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800498a:	7ffb      	ldrb	r3, [r7, #31]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d828      	bhi.n	80049e2 <UART_SetConfig+0x146>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0xfc>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049e3 	.word	0x080049e3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7ff f89c 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 80049c0:	61b8      	str	r0, [r7, #24]
        break;
 80049c2:	e013      	b.n	80049ec <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7ff f8ba 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 80049c8:	61b8      	str	r0, [r7, #24]
        break;
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b4e      	ldr	r3, [pc, #312]	; (8004b08 <UART_SetConfig+0x26c>)
 80049ce:	61bb      	str	r3, [r7, #24]
        break;
 80049d0:	e00c      	b.n	80049ec <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7ff f81b 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80049d6:	61b8      	str	r0, [r7, #24]
        break;
 80049d8:	e008      	b.n	80049ec <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	61bb      	str	r3, [r7, #24]
        break;
 80049e0:	e004      	b.n	80049ec <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	77bb      	strb	r3, [r7, #30]
        break;
 80049ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d074      	beq.n	8004adc <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	005a      	lsls	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b0f      	cmp	r3, #15
 8004a0e:	d916      	bls.n	8004a3e <UART_SetConfig+0x1a2>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a16:	d212      	bcs.n	8004a3e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f023 030f 	bic.w	r3, r3, #15
 8004a20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	89fa      	ldrh	r2, [r7, #14]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e04e      	b.n	8004adc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	77bb      	strb	r3, [r7, #30]
 8004a42:	e04b      	b.n	8004adc <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a44:	7ffb      	ldrb	r3, [r7, #31]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d827      	bhi.n	8004a9a <UART_SetConfig+0x1fe>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x1b4>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a8b 	.word	0x08004a8b
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7ff f840 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8004a78:	61b8      	str	r0, [r7, #24]
        break;
 8004a7a:	e013      	b.n	8004aa4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7ff f85e 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8004a80:	61b8      	str	r0, [r7, #24]
        break;
 8004a82:	e00f      	b.n	8004aa4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <UART_SetConfig+0x26c>)
 8004a86:	61bb      	str	r3, [r7, #24]
        break;
 8004a88:	e00c      	b.n	8004aa4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fe ffbf 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8004a8e:	61b8      	str	r0, [r7, #24]
        break;
 8004a90:	e008      	b.n	8004aa4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a96:	61bb      	str	r3, [r7, #24]
        break;
 8004a98:	e004      	b.n	8004aa4 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8004aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085a      	lsrs	r2, r3, #1
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	d908      	bls.n	8004ad8 <UART_SetConfig+0x23c>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d204      	bcs.n	8004ad8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	e001      	b.n	8004adc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	efff69f3 	.word	0xefff69f3
 8004af8:	40013800 	.word	0x40013800
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40004400 	.word	0x40004400
 8004b04:	40004800 	.word	0x40004800
 8004b08:	007a1200 	.word	0x007a1200

08004b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0a:	d10a      	bne.n	8004c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c60:	f7fc fcf2 	bl	8001648 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10e      	bne.n	8004c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f82d 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e023      	b.n	8004cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d10e      	bne.n	8004cbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f817 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e00d      	b.n	8004cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e05e      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d05a      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fc fca4 	bl	8001648 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11b      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e043      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02c      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d66:	d124      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e00f      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d091      	beq.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c

08004de8 <__libc_init_array>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4e0d      	ldr	r6, [pc, #52]	; (8004e20 <__libc_init_array+0x38>)
 8004dec:	4c0d      	ldr	r4, [pc, #52]	; (8004e24 <__libc_init_array+0x3c>)
 8004dee:	1ba4      	subs	r4, r4, r6
 8004df0:	10a4      	asrs	r4, r4, #2
 8004df2:	2500      	movs	r5, #0
 8004df4:	42a5      	cmp	r5, r4
 8004df6:	d109      	bne.n	8004e0c <__libc_init_array+0x24>
 8004df8:	4e0b      	ldr	r6, [pc, #44]	; (8004e28 <__libc_init_array+0x40>)
 8004dfa:	4c0c      	ldr	r4, [pc, #48]	; (8004e2c <__libc_init_array+0x44>)
 8004dfc:	f002 f85c 	bl	8006eb8 <_init>
 8004e00:	1ba4      	subs	r4, r4, r6
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	2500      	movs	r5, #0
 8004e06:	42a5      	cmp	r5, r4
 8004e08:	d105      	bne.n	8004e16 <__libc_init_array+0x2e>
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e10:	4798      	blx	r3
 8004e12:	3501      	adds	r5, #1
 8004e14:	e7ee      	b.n	8004df4 <__libc_init_array+0xc>
 8004e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e1a:	4798      	blx	r3
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	e7f2      	b.n	8004e06 <__libc_init_array+0x1e>
 8004e20:	08007170 	.word	0x08007170
 8004e24:	08007170 	.word	0x08007170
 8004e28:	08007170 	.word	0x08007170
 8004e2c:	08007174 	.word	0x08007174

08004e30 <memset>:
 8004e30:	4402      	add	r2, r0
 8004e32:	4603      	mov	r3, r0
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memset+0xa>
 8004e38:	4770      	bx	lr
 8004e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3e:	e7f9      	b.n	8004e34 <memset+0x4>

08004e40 <__cvt>:
 8004e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	ec55 4b10 	vmov	r4, r5, d0
 8004e48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004e4a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	460e      	mov	r6, r1
 8004e52:	4691      	mov	r9, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	bfb8      	it	lt
 8004e58:	4622      	movlt	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	f027 0720 	bic.w	r7, r7, #32
 8004e60:	bfbb      	ittet	lt
 8004e62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e66:	461d      	movlt	r5, r3
 8004e68:	2300      	movge	r3, #0
 8004e6a:	232d      	movlt	r3, #45	; 0x2d
 8004e6c:	bfb8      	it	lt
 8004e6e:	4614      	movlt	r4, r2
 8004e70:	2f46      	cmp	r7, #70	; 0x46
 8004e72:	700b      	strb	r3, [r1, #0]
 8004e74:	d004      	beq.n	8004e80 <__cvt+0x40>
 8004e76:	2f45      	cmp	r7, #69	; 0x45
 8004e78:	d100      	bne.n	8004e7c <__cvt+0x3c>
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	e000      	b.n	8004e82 <__cvt+0x42>
 8004e80:	2103      	movs	r1, #3
 8004e82:	ab03      	add	r3, sp, #12
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	ab02      	add	r3, sp, #8
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	4653      	mov	r3, sl
 8004e8e:	ec45 4b10 	vmov	d0, r4, r5
 8004e92:	f000 fcdd 	bl	8005850 <_dtoa_r>
 8004e96:	2f47      	cmp	r7, #71	; 0x47
 8004e98:	4680      	mov	r8, r0
 8004e9a:	d102      	bne.n	8004ea2 <__cvt+0x62>
 8004e9c:	f019 0f01 	tst.w	r9, #1
 8004ea0:	d026      	beq.n	8004ef0 <__cvt+0xb0>
 8004ea2:	2f46      	cmp	r7, #70	; 0x46
 8004ea4:	eb08 0906 	add.w	r9, r8, r6
 8004ea8:	d111      	bne.n	8004ece <__cvt+0x8e>
 8004eaa:	f898 3000 	ldrb.w	r3, [r8]
 8004eae:	2b30      	cmp	r3, #48	; 0x30
 8004eb0:	d10a      	bne.n	8004ec8 <__cvt+0x88>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ebe:	b918      	cbnz	r0, 8004ec8 <__cvt+0x88>
 8004ec0:	f1c6 0601 	rsb	r6, r6, #1
 8004ec4:	f8ca 6000 	str.w	r6, [sl]
 8004ec8:	f8da 3000 	ldr.w	r3, [sl]
 8004ecc:	4499      	add	r9, r3
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eda:	b938      	cbnz	r0, 8004eec <__cvt+0xac>
 8004edc:	2230      	movs	r2, #48	; 0x30
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	454b      	cmp	r3, r9
 8004ee2:	d205      	bcs.n	8004ef0 <__cvt+0xb0>
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	9103      	str	r1, [sp, #12]
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e7f8      	b.n	8004ede <__cvt+0x9e>
 8004eec:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ef4:	eba3 0308 	sub.w	r3, r3, r8
 8004ef8:	4640      	mov	r0, r8
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	b004      	add	sp, #16
 8004efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004f02 <__exponent>:
 8004f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f04:	2900      	cmp	r1, #0
 8004f06:	4604      	mov	r4, r0
 8004f08:	bfba      	itte	lt
 8004f0a:	4249      	neglt	r1, r1
 8004f0c:	232d      	movlt	r3, #45	; 0x2d
 8004f0e:	232b      	movge	r3, #43	; 0x2b
 8004f10:	2909      	cmp	r1, #9
 8004f12:	f804 2b02 	strb.w	r2, [r4], #2
 8004f16:	7043      	strb	r3, [r0, #1]
 8004f18:	dd20      	ble.n	8004f5c <__exponent+0x5a>
 8004f1a:	f10d 0307 	add.w	r3, sp, #7
 8004f1e:	461f      	mov	r7, r3
 8004f20:	260a      	movs	r6, #10
 8004f22:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f26:	fb06 1115 	mls	r1, r6, r5, r1
 8004f2a:	3130      	adds	r1, #48	; 0x30
 8004f2c:	2d09      	cmp	r5, #9
 8004f2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f32:	f103 32ff 	add.w	r2, r3, #4294967295
 8004f36:	4629      	mov	r1, r5
 8004f38:	dc09      	bgt.n	8004f4e <__exponent+0x4c>
 8004f3a:	3130      	adds	r1, #48	; 0x30
 8004f3c:	3b02      	subs	r3, #2
 8004f3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f42:	42bb      	cmp	r3, r7
 8004f44:	4622      	mov	r2, r4
 8004f46:	d304      	bcc.n	8004f52 <__exponent+0x50>
 8004f48:	1a10      	subs	r0, r2, r0
 8004f4a:	b003      	add	sp, #12
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4e:	4613      	mov	r3, r2
 8004f50:	e7e7      	b.n	8004f22 <__exponent+0x20>
 8004f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f56:	f804 2b01 	strb.w	r2, [r4], #1
 8004f5a:	e7f2      	b.n	8004f42 <__exponent+0x40>
 8004f5c:	2330      	movs	r3, #48	; 0x30
 8004f5e:	4419      	add	r1, r3
 8004f60:	7083      	strb	r3, [r0, #2]
 8004f62:	1d02      	adds	r2, r0, #4
 8004f64:	70c1      	strb	r1, [r0, #3]
 8004f66:	e7ef      	b.n	8004f48 <__exponent+0x46>

08004f68 <_printf_float>:
 8004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6c:	b08d      	sub	sp, #52	; 0x34
 8004f6e:	460c      	mov	r4, r1
 8004f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004f74:	4616      	mov	r6, r2
 8004f76:	461f      	mov	r7, r3
 8004f78:	4605      	mov	r5, r0
 8004f7a:	f001 fa21 	bl	80063c0 <_localeconv_r>
 8004f7e:	6803      	ldr	r3, [r0, #0]
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb f924 	bl	80001d0 <strlen>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f90:	9005      	str	r0, [sp, #20]
 8004f92:	3307      	adds	r3, #7
 8004f94:	f023 0307 	bic.w	r3, r3, #7
 8004f98:	f103 0208 	add.w	r2, r3, #8
 8004f9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fa0:	f8d4 b000 	ldr.w	fp, [r4]
 8004fa4:	f8c8 2000 	str.w	r2, [r8]
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fb0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fb4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fb8:	9307      	str	r3, [sp, #28]
 8004fba:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	4ba7      	ldr	r3, [pc, #668]	; (8005260 <_printf_float+0x2f8>)
 8004fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fc8:	f7fb fdb0 	bl	8000b2c <__aeabi_dcmpun>
 8004fcc:	bb70      	cbnz	r0, 800502c <_printf_float+0xc4>
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	4ba3      	ldr	r3, [pc, #652]	; (8005260 <_printf_float+0x2f8>)
 8004fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fd8:	f7fb fd8a 	bl	8000af0 <__aeabi_dcmple>
 8004fdc:	bb30      	cbnz	r0, 800502c <_printf_float+0xc4>
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	f7fb fd79 	bl	8000adc <__aeabi_dcmplt>
 8004fea:	b110      	cbz	r0, 8004ff2 <_printf_float+0x8a>
 8004fec:	232d      	movs	r3, #45	; 0x2d
 8004fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff2:	4a9c      	ldr	r2, [pc, #624]	; (8005264 <_printf_float+0x2fc>)
 8004ff4:	4b9c      	ldr	r3, [pc, #624]	; (8005268 <_printf_float+0x300>)
 8004ff6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ffa:	bf8c      	ite	hi
 8004ffc:	4690      	movhi	r8, r2
 8004ffe:	4698      	movls	r8, r3
 8005000:	2303      	movs	r3, #3
 8005002:	f02b 0204 	bic.w	r2, fp, #4
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	f04f 0900 	mov.w	r9, #0
 800500e:	9700      	str	r7, [sp, #0]
 8005010:	4633      	mov	r3, r6
 8005012:	aa0b      	add	r2, sp, #44	; 0x2c
 8005014:	4621      	mov	r1, r4
 8005016:	4628      	mov	r0, r5
 8005018:	f000 f9e6 	bl	80053e8 <_printf_common>
 800501c:	3001      	adds	r0, #1
 800501e:	f040 808d 	bne.w	800513c <_printf_float+0x1d4>
 8005022:	f04f 30ff 	mov.w	r0, #4294967295
 8005026:	b00d      	add	sp, #52	; 0x34
 8005028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	4640      	mov	r0, r8
 8005032:	4649      	mov	r1, r9
 8005034:	f7fb fd7a 	bl	8000b2c <__aeabi_dcmpun>
 8005038:	b110      	cbz	r0, 8005040 <_printf_float+0xd8>
 800503a:	4a8c      	ldr	r2, [pc, #560]	; (800526c <_printf_float+0x304>)
 800503c:	4b8c      	ldr	r3, [pc, #560]	; (8005270 <_printf_float+0x308>)
 800503e:	e7da      	b.n	8004ff6 <_printf_float+0x8e>
 8005040:	6861      	ldr	r1, [r4, #4]
 8005042:	1c4b      	adds	r3, r1, #1
 8005044:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005048:	a80a      	add	r0, sp, #40	; 0x28
 800504a:	d13e      	bne.n	80050ca <_printf_float+0x162>
 800504c:	2306      	movs	r3, #6
 800504e:	6063      	str	r3, [r4, #4]
 8005050:	2300      	movs	r3, #0
 8005052:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005056:	ab09      	add	r3, sp, #36	; 0x24
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	ec49 8b10 	vmov	d0, r8, r9
 800505e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	f8cd a004 	str.w	sl, [sp, #4]
 8005068:	6861      	ldr	r1, [r4, #4]
 800506a:	4628      	mov	r0, r5
 800506c:	f7ff fee8 	bl	8004e40 <__cvt>
 8005070:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005074:	2b47      	cmp	r3, #71	; 0x47
 8005076:	4680      	mov	r8, r0
 8005078:	d109      	bne.n	800508e <_printf_float+0x126>
 800507a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507c:	1cd8      	adds	r0, r3, #3
 800507e:	db02      	blt.n	8005086 <_printf_float+0x11e>
 8005080:	6862      	ldr	r2, [r4, #4]
 8005082:	4293      	cmp	r3, r2
 8005084:	dd47      	ble.n	8005116 <_printf_float+0x1ae>
 8005086:	f1aa 0a02 	sub.w	sl, sl, #2
 800508a:	fa5f fa8a 	uxtb.w	sl, sl
 800508e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005094:	d824      	bhi.n	80050e0 <_printf_float+0x178>
 8005096:	3901      	subs	r1, #1
 8005098:	4652      	mov	r2, sl
 800509a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800509e:	9109      	str	r1, [sp, #36]	; 0x24
 80050a0:	f7ff ff2f 	bl	8004f02 <__exponent>
 80050a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050a6:	1813      	adds	r3, r2, r0
 80050a8:	2a01      	cmp	r2, #1
 80050aa:	4681      	mov	r9, r0
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	dc02      	bgt.n	80050b6 <_printf_float+0x14e>
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	07d1      	lsls	r1, r2, #31
 80050b4:	d501      	bpl.n	80050ba <_printf_float+0x152>
 80050b6:	3301      	adds	r3, #1
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0a5      	beq.n	800500e <_printf_float+0xa6>
 80050c2:	232d      	movs	r3, #45	; 0x2d
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c8:	e7a1      	b.n	800500e <_printf_float+0xa6>
 80050ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80050ce:	f000 8177 	beq.w	80053c0 <_printf_float+0x458>
 80050d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80050d6:	d1bb      	bne.n	8005050 <_printf_float+0xe8>
 80050d8:	2900      	cmp	r1, #0
 80050da:	d1b9      	bne.n	8005050 <_printf_float+0xe8>
 80050dc:	2301      	movs	r3, #1
 80050de:	e7b6      	b.n	800504e <_printf_float+0xe6>
 80050e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80050e4:	d119      	bne.n	800511a <_printf_float+0x1b2>
 80050e6:	2900      	cmp	r1, #0
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	dd0c      	ble.n	8005106 <_printf_float+0x19e>
 80050ec:	6121      	str	r1, [r4, #16]
 80050ee:	b913      	cbnz	r3, 80050f6 <_printf_float+0x18e>
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	07d2      	lsls	r2, r2, #31
 80050f4:	d502      	bpl.n	80050fc <_printf_float+0x194>
 80050f6:	3301      	adds	r3, #1
 80050f8:	440b      	add	r3, r1
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8005100:	f04f 0900 	mov.w	r9, #0
 8005104:	e7d9      	b.n	80050ba <_printf_float+0x152>
 8005106:	b913      	cbnz	r3, 800510e <_printf_float+0x1a6>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	07d0      	lsls	r0, r2, #31
 800510c:	d501      	bpl.n	8005112 <_printf_float+0x1aa>
 800510e:	3302      	adds	r3, #2
 8005110:	e7f3      	b.n	80050fa <_printf_float+0x192>
 8005112:	2301      	movs	r3, #1
 8005114:	e7f1      	b.n	80050fa <_printf_float+0x192>
 8005116:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800511a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800511e:	4293      	cmp	r3, r2
 8005120:	db05      	blt.n	800512e <_printf_float+0x1c6>
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	07d1      	lsls	r1, r2, #31
 8005128:	d5e8      	bpl.n	80050fc <_printf_float+0x194>
 800512a:	3301      	adds	r3, #1
 800512c:	e7e5      	b.n	80050fa <_printf_float+0x192>
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfd4      	ite	le
 8005132:	f1c3 0302 	rsble	r3, r3, #2
 8005136:	2301      	movgt	r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	e7de      	b.n	80050fa <_printf_float+0x192>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	055a      	lsls	r2, r3, #21
 8005140:	d407      	bmi.n	8005152 <_printf_float+0x1ea>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	4642      	mov	r2, r8
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	d12b      	bne.n	80051a8 <_printf_float+0x240>
 8005150:	e767      	b.n	8005022 <_printf_float+0xba>
 8005152:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005156:	f240 80dc 	bls.w	8005312 <_printf_float+0x3aa>
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005162:	f7fb fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005166:	2800      	cmp	r0, #0
 8005168:	d033      	beq.n	80051d2 <_printf_float+0x26a>
 800516a:	2301      	movs	r3, #1
 800516c:	4a41      	ldr	r2, [pc, #260]	; (8005274 <_printf_float+0x30c>)
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f af54 	beq.w	8005022 <_printf_float+0xba>
 800517a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800517e:	429a      	cmp	r2, r3
 8005180:	db02      	blt.n	8005188 <_printf_float+0x220>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	07d8      	lsls	r0, r3, #31
 8005186:	d50f      	bpl.n	80051a8 <_printf_float+0x240>
 8005188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	f43f af45 	beq.w	8005022 <_printf_float+0xba>
 8005198:	f04f 0800 	mov.w	r8, #0
 800519c:	f104 091a 	add.w	r9, r4, #26
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	4543      	cmp	r3, r8
 80051a6:	dc09      	bgt.n	80051bc <_printf_float+0x254>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	f100 8103 	bmi.w	80053b6 <_printf_float+0x44e>
 80051b0:	68e0      	ldr	r0, [r4, #12]
 80051b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b4:	4298      	cmp	r0, r3
 80051b6:	bfb8      	it	lt
 80051b8:	4618      	movlt	r0, r3
 80051ba:	e734      	b.n	8005026 <_printf_float+0xbe>
 80051bc:	2301      	movs	r3, #1
 80051be:	464a      	mov	r2, r9
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af2b 	beq.w	8005022 <_printf_float+0xba>
 80051cc:	f108 0801 	add.w	r8, r8, #1
 80051d0:	e7e6      	b.n	80051a0 <_printf_float+0x238>
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dc2b      	bgt.n	8005230 <_printf_float+0x2c8>
 80051d8:	2301      	movs	r3, #1
 80051da:	4a26      	ldr	r2, [pc, #152]	; (8005274 <_printf_float+0x30c>)
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f af1d 	beq.w	8005022 <_printf_float+0xba>
 80051e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ea:	b923      	cbnz	r3, 80051f6 <_printf_float+0x28e>
 80051ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ee:	b913      	cbnz	r3, 80051f6 <_printf_float+0x28e>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d5d8      	bpl.n	80051a8 <_printf_float+0x240>
 80051f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f af0e 	beq.w	8005022 <_printf_float+0xba>
 8005206:	f04f 0900 	mov.w	r9, #0
 800520a:	f104 0a1a 	add.w	sl, r4, #26
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	425b      	negs	r3, r3
 8005212:	454b      	cmp	r3, r9
 8005214:	dc01      	bgt.n	800521a <_printf_float+0x2b2>
 8005216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005218:	e794      	b.n	8005144 <_printf_float+0x1dc>
 800521a:	2301      	movs	r3, #1
 800521c:	4652      	mov	r2, sl
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	f43f aefc 	beq.w	8005022 <_printf_float+0xba>
 800522a:	f109 0901 	add.w	r9, r9, #1
 800522e:	e7ee      	b.n	800520e <_printf_float+0x2a6>
 8005230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005234:	429a      	cmp	r2, r3
 8005236:	bfa8      	it	ge
 8005238:	461a      	movge	r2, r3
 800523a:	2a00      	cmp	r2, #0
 800523c:	4691      	mov	r9, r2
 800523e:	dd07      	ble.n	8005250 <_printf_float+0x2e8>
 8005240:	4613      	mov	r3, r2
 8005242:	4631      	mov	r1, r6
 8005244:	4642      	mov	r2, r8
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	f43f aee9 	beq.w	8005022 <_printf_float+0xba>
 8005250:	f104 031a 	add.w	r3, r4, #26
 8005254:	f04f 0b00 	mov.w	fp, #0
 8005258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800525c:	9306      	str	r3, [sp, #24]
 800525e:	e015      	b.n	800528c <_printf_float+0x324>
 8005260:	7fefffff 	.word	0x7fefffff
 8005264:	08006f18 	.word	0x08006f18
 8005268:	08006f14 	.word	0x08006f14
 800526c:	08006f20 	.word	0x08006f20
 8005270:	08006f1c 	.word	0x08006f1c
 8005274:	08006f24 	.word	0x08006f24
 8005278:	2301      	movs	r3, #1
 800527a:	9a06      	ldr	r2, [sp, #24]
 800527c:	4631      	mov	r1, r6
 800527e:	4628      	mov	r0, r5
 8005280:	47b8      	blx	r7
 8005282:	3001      	adds	r0, #1
 8005284:	f43f aecd 	beq.w	8005022 <_printf_float+0xba>
 8005288:	f10b 0b01 	add.w	fp, fp, #1
 800528c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005290:	ebaa 0309 	sub.w	r3, sl, r9
 8005294:	455b      	cmp	r3, fp
 8005296:	dcef      	bgt.n	8005278 <_printf_float+0x310>
 8005298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800529c:	429a      	cmp	r2, r3
 800529e:	44d0      	add	r8, sl
 80052a0:	db15      	blt.n	80052ce <_printf_float+0x366>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	07da      	lsls	r2, r3, #31
 80052a6:	d412      	bmi.n	80052ce <_printf_float+0x366>
 80052a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ac:	eba3 020a 	sub.w	r2, r3, sl
 80052b0:	eba3 0a01 	sub.w	sl, r3, r1
 80052b4:	4592      	cmp	sl, r2
 80052b6:	bfa8      	it	ge
 80052b8:	4692      	movge	sl, r2
 80052ba:	f1ba 0f00 	cmp.w	sl, #0
 80052be:	dc0e      	bgt.n	80052de <_printf_float+0x376>
 80052c0:	f04f 0800 	mov.w	r8, #0
 80052c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80052c8:	f104 091a 	add.w	r9, r4, #26
 80052cc:	e019      	b.n	8005302 <_printf_float+0x39a>
 80052ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	d1e5      	bne.n	80052a8 <_printf_float+0x340>
 80052dc:	e6a1      	b.n	8005022 <_printf_float+0xba>
 80052de:	4653      	mov	r3, sl
 80052e0:	4642      	mov	r2, r8
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b8      	blx	r7
 80052e8:	3001      	adds	r0, #1
 80052ea:	d1e9      	bne.n	80052c0 <_printf_float+0x358>
 80052ec:	e699      	b.n	8005022 <_printf_float+0xba>
 80052ee:	2301      	movs	r3, #1
 80052f0:	464a      	mov	r2, r9
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f ae92 	beq.w	8005022 <_printf_float+0xba>
 80052fe:	f108 0801 	add.w	r8, r8, #1
 8005302:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	eba3 030a 	sub.w	r3, r3, sl
 800530c:	4543      	cmp	r3, r8
 800530e:	dcee      	bgt.n	80052ee <_printf_float+0x386>
 8005310:	e74a      	b.n	80051a8 <_printf_float+0x240>
 8005312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005314:	2a01      	cmp	r2, #1
 8005316:	dc01      	bgt.n	800531c <_printf_float+0x3b4>
 8005318:	07db      	lsls	r3, r3, #31
 800531a:	d53a      	bpl.n	8005392 <_printf_float+0x42a>
 800531c:	2301      	movs	r3, #1
 800531e:	4642      	mov	r2, r8
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f ae7b 	beq.w	8005022 <_printf_float+0xba>
 800532c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f108 0801 	add.w	r8, r8, #1
 800533c:	f43f ae71 	beq.w	8005022 <_printf_float+0xba>
 8005340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005342:	2200      	movs	r2, #0
 8005344:	f103 3aff 	add.w	sl, r3, #4294967295
 8005348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800534c:	2300      	movs	r3, #0
 800534e:	f7fb fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005352:	b9c8      	cbnz	r0, 8005388 <_printf_float+0x420>
 8005354:	4653      	mov	r3, sl
 8005356:	4642      	mov	r2, r8
 8005358:	4631      	mov	r1, r6
 800535a:	4628      	mov	r0, r5
 800535c:	47b8      	blx	r7
 800535e:	3001      	adds	r0, #1
 8005360:	d10e      	bne.n	8005380 <_printf_float+0x418>
 8005362:	e65e      	b.n	8005022 <_printf_float+0xba>
 8005364:	2301      	movs	r3, #1
 8005366:	4652      	mov	r2, sl
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	f43f ae57 	beq.w	8005022 <_printf_float+0xba>
 8005374:	f108 0801 	add.w	r8, r8, #1
 8005378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	4543      	cmp	r3, r8
 800537e:	dcf1      	bgt.n	8005364 <_printf_float+0x3fc>
 8005380:	464b      	mov	r3, r9
 8005382:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005386:	e6de      	b.n	8005146 <_printf_float+0x1de>
 8005388:	f04f 0800 	mov.w	r8, #0
 800538c:	f104 0a1a 	add.w	sl, r4, #26
 8005390:	e7f2      	b.n	8005378 <_printf_float+0x410>
 8005392:	2301      	movs	r3, #1
 8005394:	e7df      	b.n	8005356 <_printf_float+0x3ee>
 8005396:	2301      	movs	r3, #1
 8005398:	464a      	mov	r2, r9
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f ae3e 	beq.w	8005022 <_printf_float+0xba>
 80053a6:	f108 0801 	add.w	r8, r8, #1
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	4543      	cmp	r3, r8
 80053b2:	dcf0      	bgt.n	8005396 <_printf_float+0x42e>
 80053b4:	e6fc      	b.n	80051b0 <_printf_float+0x248>
 80053b6:	f04f 0800 	mov.w	r8, #0
 80053ba:	f104 0919 	add.w	r9, r4, #25
 80053be:	e7f4      	b.n	80053aa <_printf_float+0x442>
 80053c0:	2900      	cmp	r1, #0
 80053c2:	f43f ae8b 	beq.w	80050dc <_printf_float+0x174>
 80053c6:	2300      	movs	r3, #0
 80053c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80053cc:	ab09      	add	r3, sp, #36	; 0x24
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	ec49 8b10 	vmov	d0, r8, r9
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	f8cd a004 	str.w	sl, [sp, #4]
 80053da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053de:	4628      	mov	r0, r5
 80053e0:	f7ff fd2e 	bl	8004e40 <__cvt>
 80053e4:	4680      	mov	r8, r0
 80053e6:	e648      	b.n	800507a <_printf_float+0x112>

080053e8 <_printf_common>:
 80053e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	4691      	mov	r9, r2
 80053ee:	461f      	mov	r7, r3
 80053f0:	688a      	ldr	r2, [r1, #8]
 80053f2:	690b      	ldr	r3, [r1, #16]
 80053f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bfb8      	it	lt
 80053fc:	4613      	movlt	r3, r2
 80053fe:	f8c9 3000 	str.w	r3, [r9]
 8005402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005406:	4606      	mov	r6, r0
 8005408:	460c      	mov	r4, r1
 800540a:	b112      	cbz	r2, 8005412 <_printf_common+0x2a>
 800540c:	3301      	adds	r3, #1
 800540e:	f8c9 3000 	str.w	r3, [r9]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	0699      	lsls	r1, r3, #26
 8005416:	bf42      	ittt	mi
 8005418:	f8d9 3000 	ldrmi.w	r3, [r9]
 800541c:	3302      	addmi	r3, #2
 800541e:	f8c9 3000 	strmi.w	r3, [r9]
 8005422:	6825      	ldr	r5, [r4, #0]
 8005424:	f015 0506 	ands.w	r5, r5, #6
 8005428:	d107      	bne.n	800543a <_printf_common+0x52>
 800542a:	f104 0a19 	add.w	sl, r4, #25
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	f8d9 2000 	ldr.w	r2, [r9]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	42ab      	cmp	r3, r5
 8005438:	dc28      	bgt.n	800548c <_printf_common+0xa4>
 800543a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	3300      	adds	r3, #0
 8005442:	bf18      	it	ne
 8005444:	2301      	movne	r3, #1
 8005446:	0692      	lsls	r2, r2, #26
 8005448:	d42d      	bmi.n	80054a6 <_printf_common+0xbe>
 800544a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800544e:	4639      	mov	r1, r7
 8005450:	4630      	mov	r0, r6
 8005452:	47c0      	blx	r8
 8005454:	3001      	adds	r0, #1
 8005456:	d020      	beq.n	800549a <_printf_common+0xb2>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	68e5      	ldr	r5, [r4, #12]
 800545c:	f8d9 2000 	ldr.w	r2, [r9]
 8005460:	f003 0306 	and.w	r3, r3, #6
 8005464:	2b04      	cmp	r3, #4
 8005466:	bf08      	it	eq
 8005468:	1aad      	subeq	r5, r5, r2
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	6922      	ldr	r2, [r4, #16]
 800546e:	bf0c      	ite	eq
 8005470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005474:	2500      	movne	r5, #0
 8005476:	4293      	cmp	r3, r2
 8005478:	bfc4      	itt	gt
 800547a:	1a9b      	subgt	r3, r3, r2
 800547c:	18ed      	addgt	r5, r5, r3
 800547e:	f04f 0900 	mov.w	r9, #0
 8005482:	341a      	adds	r4, #26
 8005484:	454d      	cmp	r5, r9
 8005486:	d11a      	bne.n	80054be <_printf_common+0xd6>
 8005488:	2000      	movs	r0, #0
 800548a:	e008      	b.n	800549e <_printf_common+0xb6>
 800548c:	2301      	movs	r3, #1
 800548e:	4652      	mov	r2, sl
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d103      	bne.n	80054a2 <_printf_common+0xba>
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a2:	3501      	adds	r5, #1
 80054a4:	e7c3      	b.n	800542e <_printf_common+0x46>
 80054a6:	18e1      	adds	r1, r4, r3
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	2030      	movs	r0, #48	; 0x30
 80054ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b0:	4422      	add	r2, r4
 80054b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ba:	3302      	adds	r3, #2
 80054bc:	e7c5      	b.n	800544a <_printf_common+0x62>
 80054be:	2301      	movs	r3, #1
 80054c0:	4622      	mov	r2, r4
 80054c2:	4639      	mov	r1, r7
 80054c4:	4630      	mov	r0, r6
 80054c6:	47c0      	blx	r8
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0e6      	beq.n	800549a <_printf_common+0xb2>
 80054cc:	f109 0901 	add.w	r9, r9, #1
 80054d0:	e7d8      	b.n	8005484 <_printf_common+0x9c>
	...

080054d4 <_printf_i>:
 80054d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054dc:	460c      	mov	r4, r1
 80054de:	7e09      	ldrb	r1, [r1, #24]
 80054e0:	b085      	sub	sp, #20
 80054e2:	296e      	cmp	r1, #110	; 0x6e
 80054e4:	4617      	mov	r7, r2
 80054e6:	4606      	mov	r6, r0
 80054e8:	4698      	mov	r8, r3
 80054ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054ec:	f000 80b3 	beq.w	8005656 <_printf_i+0x182>
 80054f0:	d822      	bhi.n	8005538 <_printf_i+0x64>
 80054f2:	2963      	cmp	r1, #99	; 0x63
 80054f4:	d036      	beq.n	8005564 <_printf_i+0x90>
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x3a>
 80054f8:	2900      	cmp	r1, #0
 80054fa:	f000 80b9 	beq.w	8005670 <_printf_i+0x19c>
 80054fe:	2958      	cmp	r1, #88	; 0x58
 8005500:	f000 8083 	beq.w	800560a <_printf_i+0x136>
 8005504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005508:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800550c:	e032      	b.n	8005574 <_printf_i+0xa0>
 800550e:	2964      	cmp	r1, #100	; 0x64
 8005510:	d001      	beq.n	8005516 <_printf_i+0x42>
 8005512:	2969      	cmp	r1, #105	; 0x69
 8005514:	d1f6      	bne.n	8005504 <_printf_i+0x30>
 8005516:	6820      	ldr	r0, [r4, #0]
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	0605      	lsls	r5, r0, #24
 800551c:	f103 0104 	add.w	r1, r3, #4
 8005520:	d52a      	bpl.n	8005578 <_printf_i+0xa4>
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6011      	str	r1, [r2, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	da03      	bge.n	8005532 <_printf_i+0x5e>
 800552a:	222d      	movs	r2, #45	; 0x2d
 800552c:	425b      	negs	r3, r3
 800552e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005532:	486f      	ldr	r0, [pc, #444]	; (80056f0 <_printf_i+0x21c>)
 8005534:	220a      	movs	r2, #10
 8005536:	e039      	b.n	80055ac <_printf_i+0xd8>
 8005538:	2973      	cmp	r1, #115	; 0x73
 800553a:	f000 809d 	beq.w	8005678 <_printf_i+0x1a4>
 800553e:	d808      	bhi.n	8005552 <_printf_i+0x7e>
 8005540:	296f      	cmp	r1, #111	; 0x6f
 8005542:	d020      	beq.n	8005586 <_printf_i+0xb2>
 8005544:	2970      	cmp	r1, #112	; 0x70
 8005546:	d1dd      	bne.n	8005504 <_printf_i+0x30>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f043 0320 	orr.w	r3, r3, #32
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	e003      	b.n	800555a <_printf_i+0x86>
 8005552:	2975      	cmp	r1, #117	; 0x75
 8005554:	d017      	beq.n	8005586 <_printf_i+0xb2>
 8005556:	2978      	cmp	r1, #120	; 0x78
 8005558:	d1d4      	bne.n	8005504 <_printf_i+0x30>
 800555a:	2378      	movs	r3, #120	; 0x78
 800555c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005560:	4864      	ldr	r0, [pc, #400]	; (80056f4 <_printf_i+0x220>)
 8005562:	e055      	b.n	8005610 <_printf_i+0x13c>
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	1d19      	adds	r1, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6011      	str	r1, [r2, #0]
 800556c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005574:	2301      	movs	r3, #1
 8005576:	e08c      	b.n	8005692 <_printf_i+0x1be>
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6011      	str	r1, [r2, #0]
 800557c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005580:	bf18      	it	ne
 8005582:	b21b      	sxthne	r3, r3
 8005584:	e7cf      	b.n	8005526 <_printf_i+0x52>
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	6825      	ldr	r5, [r4, #0]
 800558a:	1d18      	adds	r0, r3, #4
 800558c:	6010      	str	r0, [r2, #0]
 800558e:	0628      	lsls	r0, r5, #24
 8005590:	d501      	bpl.n	8005596 <_printf_i+0xc2>
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	e002      	b.n	800559c <_printf_i+0xc8>
 8005596:	0668      	lsls	r0, r5, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0xbe>
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	4854      	ldr	r0, [pc, #336]	; (80056f0 <_printf_i+0x21c>)
 800559e:	296f      	cmp	r1, #111	; 0x6f
 80055a0:	bf14      	ite	ne
 80055a2:	220a      	movne	r2, #10
 80055a4:	2208      	moveq	r2, #8
 80055a6:	2100      	movs	r1, #0
 80055a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ac:	6865      	ldr	r5, [r4, #4]
 80055ae:	60a5      	str	r5, [r4, #8]
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	f2c0 8095 	blt.w	80056e0 <_printf_i+0x20c>
 80055b6:	6821      	ldr	r1, [r4, #0]
 80055b8:	f021 0104 	bic.w	r1, r1, #4
 80055bc:	6021      	str	r1, [r4, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d13d      	bne.n	800563e <_printf_i+0x16a>
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	f040 808e 	bne.w	80056e4 <_printf_i+0x210>
 80055c8:	4665      	mov	r5, ip
 80055ca:	2a08      	cmp	r2, #8
 80055cc:	d10b      	bne.n	80055e6 <_printf_i+0x112>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	07db      	lsls	r3, r3, #31
 80055d2:	d508      	bpl.n	80055e6 <_printf_i+0x112>
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	bfde      	ittt	le
 80055dc:	2330      	movle	r3, #48	; 0x30
 80055de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055e6:	ebac 0305 	sub.w	r3, ip, r5
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	f8cd 8000 	str.w	r8, [sp]
 80055f0:	463b      	mov	r3, r7
 80055f2:	aa03      	add	r2, sp, #12
 80055f4:	4621      	mov	r1, r4
 80055f6:	4630      	mov	r0, r6
 80055f8:	f7ff fef6 	bl	80053e8 <_printf_common>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d14d      	bne.n	800569c <_printf_i+0x1c8>
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	b005      	add	sp, #20
 8005606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800560a:	4839      	ldr	r0, [pc, #228]	; (80056f0 <_printf_i+0x21c>)
 800560c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005610:	6813      	ldr	r3, [r2, #0]
 8005612:	6821      	ldr	r1, [r4, #0]
 8005614:	1d1d      	adds	r5, r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6015      	str	r5, [r2, #0]
 800561a:	060a      	lsls	r2, r1, #24
 800561c:	d50b      	bpl.n	8005636 <_printf_i+0x162>
 800561e:	07ca      	lsls	r2, r1, #31
 8005620:	bf44      	itt	mi
 8005622:	f041 0120 	orrmi.w	r1, r1, #32
 8005626:	6021      	strmi	r1, [r4, #0]
 8005628:	b91b      	cbnz	r3, 8005632 <_printf_i+0x15e>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	f022 0220 	bic.w	r2, r2, #32
 8005630:	6022      	str	r2, [r4, #0]
 8005632:	2210      	movs	r2, #16
 8005634:	e7b7      	b.n	80055a6 <_printf_i+0xd2>
 8005636:	064d      	lsls	r5, r1, #25
 8005638:	bf48      	it	mi
 800563a:	b29b      	uxthmi	r3, r3
 800563c:	e7ef      	b.n	800561e <_printf_i+0x14a>
 800563e:	4665      	mov	r5, ip
 8005640:	fbb3 f1f2 	udiv	r1, r3, r2
 8005644:	fb02 3311 	mls	r3, r2, r1, r3
 8005648:	5cc3      	ldrb	r3, [r0, r3]
 800564a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800564e:	460b      	mov	r3, r1
 8005650:	2900      	cmp	r1, #0
 8005652:	d1f5      	bne.n	8005640 <_printf_i+0x16c>
 8005654:	e7b9      	b.n	80055ca <_printf_i+0xf6>
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	6825      	ldr	r5, [r4, #0]
 800565a:	6961      	ldr	r1, [r4, #20]
 800565c:	1d18      	adds	r0, r3, #4
 800565e:	6010      	str	r0, [r2, #0]
 8005660:	0628      	lsls	r0, r5, #24
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	d501      	bpl.n	800566a <_printf_i+0x196>
 8005666:	6019      	str	r1, [r3, #0]
 8005668:	e002      	b.n	8005670 <_printf_i+0x19c>
 800566a:	066a      	lsls	r2, r5, #25
 800566c:	d5fb      	bpl.n	8005666 <_printf_i+0x192>
 800566e:	8019      	strh	r1, [r3, #0]
 8005670:	2300      	movs	r3, #0
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	4665      	mov	r5, ip
 8005676:	e7b9      	b.n	80055ec <_printf_i+0x118>
 8005678:	6813      	ldr	r3, [r2, #0]
 800567a:	1d19      	adds	r1, r3, #4
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	681d      	ldr	r5, [r3, #0]
 8005680:	6862      	ldr	r2, [r4, #4]
 8005682:	2100      	movs	r1, #0
 8005684:	4628      	mov	r0, r5
 8005686:	f7fa fdab 	bl	80001e0 <memchr>
 800568a:	b108      	cbz	r0, 8005690 <_printf_i+0x1bc>
 800568c:	1b40      	subs	r0, r0, r5
 800568e:	6060      	str	r0, [r4, #4]
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	2300      	movs	r3, #0
 8005696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569a:	e7a7      	b.n	80055ec <_printf_i+0x118>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	462a      	mov	r2, r5
 80056a0:	4639      	mov	r1, r7
 80056a2:	4630      	mov	r0, r6
 80056a4:	47c0      	blx	r8
 80056a6:	3001      	adds	r0, #1
 80056a8:	d0aa      	beq.n	8005600 <_printf_i+0x12c>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	079b      	lsls	r3, r3, #30
 80056ae:	d413      	bmi.n	80056d8 <_printf_i+0x204>
 80056b0:	68e0      	ldr	r0, [r4, #12]
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	4298      	cmp	r0, r3
 80056b6:	bfb8      	it	lt
 80056b8:	4618      	movlt	r0, r3
 80056ba:	e7a3      	b.n	8005604 <_printf_i+0x130>
 80056bc:	2301      	movs	r3, #1
 80056be:	464a      	mov	r2, r9
 80056c0:	4639      	mov	r1, r7
 80056c2:	4630      	mov	r0, r6
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d09a      	beq.n	8005600 <_printf_i+0x12c>
 80056ca:	3501      	adds	r5, #1
 80056cc:	68e3      	ldr	r3, [r4, #12]
 80056ce:	9a03      	ldr	r2, [sp, #12]
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	42ab      	cmp	r3, r5
 80056d4:	dcf2      	bgt.n	80056bc <_printf_i+0x1e8>
 80056d6:	e7eb      	b.n	80056b0 <_printf_i+0x1dc>
 80056d8:	2500      	movs	r5, #0
 80056da:	f104 0919 	add.w	r9, r4, #25
 80056de:	e7f5      	b.n	80056cc <_printf_i+0x1f8>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ac      	bne.n	800563e <_printf_i+0x16a>
 80056e4:	7803      	ldrb	r3, [r0, #0]
 80056e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ee:	e76c      	b.n	80055ca <_printf_i+0xf6>
 80056f0:	08006f26 	.word	0x08006f26
 80056f4:	08006f37 	.word	0x08006f37

080056f8 <siprintf>:
 80056f8:	b40e      	push	{r1, r2, r3}
 80056fa:	b500      	push	{lr}
 80056fc:	b09c      	sub	sp, #112	; 0x70
 80056fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005700:	9002      	str	r0, [sp, #8]
 8005702:	9006      	str	r0, [sp, #24]
 8005704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005708:	4809      	ldr	r0, [pc, #36]	; (8005730 <siprintf+0x38>)
 800570a:	9107      	str	r1, [sp, #28]
 800570c:	9104      	str	r1, [sp, #16]
 800570e:	4909      	ldr	r1, [pc, #36]	; (8005734 <siprintf+0x3c>)
 8005710:	f853 2b04 	ldr.w	r2, [r3], #4
 8005714:	9105      	str	r1, [sp, #20]
 8005716:	6800      	ldr	r0, [r0, #0]
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	a902      	add	r1, sp, #8
 800571c:	f001 fa5c 	bl	8006bd8 <_svfiprintf_r>
 8005720:	9b02      	ldr	r3, [sp, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	b01c      	add	sp, #112	; 0x70
 8005728:	f85d eb04 	ldr.w	lr, [sp], #4
 800572c:	b003      	add	sp, #12
 800572e:	4770      	bx	lr
 8005730:	2000000c 	.word	0x2000000c
 8005734:	ffff0208 	.word	0xffff0208

08005738 <quorem>:
 8005738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	6903      	ldr	r3, [r0, #16]
 800573e:	690c      	ldr	r4, [r1, #16]
 8005740:	42a3      	cmp	r3, r4
 8005742:	4680      	mov	r8, r0
 8005744:	f2c0 8082 	blt.w	800584c <quorem+0x114>
 8005748:	3c01      	subs	r4, #1
 800574a:	f101 0714 	add.w	r7, r1, #20
 800574e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005752:	f100 0614 	add.w	r6, r0, #20
 8005756:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800575a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800575e:	eb06 030c 	add.w	r3, r6, ip
 8005762:	3501      	adds	r5, #1
 8005764:	eb07 090c 	add.w	r9, r7, ip
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	fbb0 f5f5 	udiv	r5, r0, r5
 800576e:	b395      	cbz	r5, 80057d6 <quorem+0x9e>
 8005770:	f04f 0a00 	mov.w	sl, #0
 8005774:	4638      	mov	r0, r7
 8005776:	46b6      	mov	lr, r6
 8005778:	46d3      	mov	fp, sl
 800577a:	f850 2b04 	ldr.w	r2, [r0], #4
 800577e:	b293      	uxth	r3, r2
 8005780:	fb05 a303 	mla	r3, r5, r3, sl
 8005784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005788:	b29b      	uxth	r3, r3
 800578a:	ebab 0303 	sub.w	r3, fp, r3
 800578e:	0c12      	lsrs	r2, r2, #16
 8005790:	f8de b000 	ldr.w	fp, [lr]
 8005794:	fb05 a202 	mla	r2, r5, r2, sl
 8005798:	fa13 f38b 	uxtah	r3, r3, fp
 800579c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80057a0:	fa1f fb82 	uxth.w	fp, r2
 80057a4:	f8de 2000 	ldr.w	r2, [lr]
 80057a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80057ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057b6:	4581      	cmp	r9, r0
 80057b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80057bc:	f84e 3b04 	str.w	r3, [lr], #4
 80057c0:	d2db      	bcs.n	800577a <quorem+0x42>
 80057c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80057c6:	b933      	cbnz	r3, 80057d6 <quorem+0x9e>
 80057c8:	9b01      	ldr	r3, [sp, #4]
 80057ca:	3b04      	subs	r3, #4
 80057cc:	429e      	cmp	r6, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	d330      	bcc.n	8005834 <quorem+0xfc>
 80057d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80057d6:	4640      	mov	r0, r8
 80057d8:	f001 f828 	bl	800682c <__mcmp>
 80057dc:	2800      	cmp	r0, #0
 80057de:	db25      	blt.n	800582c <quorem+0xf4>
 80057e0:	3501      	adds	r5, #1
 80057e2:	4630      	mov	r0, r6
 80057e4:	f04f 0c00 	mov.w	ip, #0
 80057e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80057ec:	f8d0 e000 	ldr.w	lr, [r0]
 80057f0:	b293      	uxth	r3, r2
 80057f2:	ebac 0303 	sub.w	r3, ip, r3
 80057f6:	0c12      	lsrs	r2, r2, #16
 80057f8:	fa13 f38e 	uxtah	r3, r3, lr
 80057fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800580a:	45b9      	cmp	r9, r7
 800580c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005810:	f840 3b04 	str.w	r3, [r0], #4
 8005814:	d2e8      	bcs.n	80057e8 <quorem+0xb0>
 8005816:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800581a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800581e:	b92a      	cbnz	r2, 800582c <quorem+0xf4>
 8005820:	3b04      	subs	r3, #4
 8005822:	429e      	cmp	r6, r3
 8005824:	461a      	mov	r2, r3
 8005826:	d30b      	bcc.n	8005840 <quorem+0x108>
 8005828:	f8c8 4010 	str.w	r4, [r8, #16]
 800582c:	4628      	mov	r0, r5
 800582e:	b003      	add	sp, #12
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	3b04      	subs	r3, #4
 8005838:	2a00      	cmp	r2, #0
 800583a:	d1ca      	bne.n	80057d2 <quorem+0x9a>
 800583c:	3c01      	subs	r4, #1
 800583e:	e7c5      	b.n	80057cc <quorem+0x94>
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	3b04      	subs	r3, #4
 8005844:	2a00      	cmp	r2, #0
 8005846:	d1ef      	bne.n	8005828 <quorem+0xf0>
 8005848:	3c01      	subs	r4, #1
 800584a:	e7ea      	b.n	8005822 <quorem+0xea>
 800584c:	2000      	movs	r0, #0
 800584e:	e7ee      	b.n	800582e <quorem+0xf6>

08005850 <_dtoa_r>:
 8005850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005854:	ec57 6b10 	vmov	r6, r7, d0
 8005858:	b097      	sub	sp, #92	; 0x5c
 800585a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800585c:	9106      	str	r1, [sp, #24]
 800585e:	4604      	mov	r4, r0
 8005860:	920b      	str	r2, [sp, #44]	; 0x2c
 8005862:	9312      	str	r3, [sp, #72]	; 0x48
 8005864:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005868:	e9cd 6700 	strd	r6, r7, [sp]
 800586c:	b93d      	cbnz	r5, 800587e <_dtoa_r+0x2e>
 800586e:	2010      	movs	r0, #16
 8005870:	f000 fdb4 	bl	80063dc <malloc>
 8005874:	6260      	str	r0, [r4, #36]	; 0x24
 8005876:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800587a:	6005      	str	r5, [r0, #0]
 800587c:	60c5      	str	r5, [r0, #12]
 800587e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005880:	6819      	ldr	r1, [r3, #0]
 8005882:	b151      	cbz	r1, 800589a <_dtoa_r+0x4a>
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	604a      	str	r2, [r1, #4]
 8005888:	2301      	movs	r3, #1
 800588a:	4093      	lsls	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
 800588e:	4620      	mov	r0, r4
 8005890:	f000 fdeb 	bl	800646a <_Bfree>
 8005894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	1e3b      	subs	r3, r7, #0
 800589c:	bfbb      	ittet	lt
 800589e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058a2:	9301      	strlt	r3, [sp, #4]
 80058a4:	2300      	movge	r3, #0
 80058a6:	2201      	movlt	r2, #1
 80058a8:	bfac      	ite	ge
 80058aa:	f8c8 3000 	strge.w	r3, [r8]
 80058ae:	f8c8 2000 	strlt.w	r2, [r8]
 80058b2:	4baf      	ldr	r3, [pc, #700]	; (8005b70 <_dtoa_r+0x320>)
 80058b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058b8:	ea33 0308 	bics.w	r3, r3, r8
 80058bc:	d114      	bne.n	80058e8 <_dtoa_r+0x98>
 80058be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	9b00      	ldr	r3, [sp, #0]
 80058c8:	b923      	cbnz	r3, 80058d4 <_dtoa_r+0x84>
 80058ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f000 8542 	beq.w	8006358 <_dtoa_r+0xb08>
 80058d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005b84 <_dtoa_r+0x334>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8544 	beq.w	8006368 <_dtoa_r+0xb18>
 80058e0:	f10b 0303 	add.w	r3, fp, #3
 80058e4:	f000 bd3e 	b.w	8006364 <_dtoa_r+0xb14>
 80058e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2300      	movs	r3, #0
 80058f0:	4630      	mov	r0, r6
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fb f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f8:	4681      	mov	r9, r0
 80058fa:	b168      	cbz	r0, 8005918 <_dtoa_r+0xc8>
 80058fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058fe:	2301      	movs	r3, #1
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8524 	beq.w	8006352 <_dtoa_r+0xb02>
 800590a:	4b9a      	ldr	r3, [pc, #616]	; (8005b74 <_dtoa_r+0x324>)
 800590c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800590e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	f000 bd28 	b.w	8006368 <_dtoa_r+0xb18>
 8005918:	aa14      	add	r2, sp, #80	; 0x50
 800591a:	a915      	add	r1, sp, #84	; 0x54
 800591c:	ec47 6b10 	vmov	d0, r6, r7
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fffa 	bl	800691a <__d2b>
 8005926:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800592a:	9004      	str	r0, [sp, #16]
 800592c:	2d00      	cmp	r5, #0
 800592e:	d07c      	beq.n	8005a2a <_dtoa_r+0x1da>
 8005930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005934:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005938:	46b2      	mov	sl, r6
 800593a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800593e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005942:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005946:	2200      	movs	r2, #0
 8005948:	4b8b      	ldr	r3, [pc, #556]	; (8005b78 <_dtoa_r+0x328>)
 800594a:	4650      	mov	r0, sl
 800594c:	4659      	mov	r1, fp
 800594e:	f7fa fc9b 	bl	8000288 <__aeabi_dsub>
 8005952:	a381      	add	r3, pc, #516	; (adr r3, 8005b58 <_dtoa_r+0x308>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fe4e 	bl	80005f8 <__aeabi_dmul>
 800595c:	a380      	add	r3, pc, #512	; (adr r3, 8005b60 <_dtoa_r+0x310>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fc93 	bl	800028c <__adddf3>
 8005966:	4606      	mov	r6, r0
 8005968:	4628      	mov	r0, r5
 800596a:	460f      	mov	r7, r1
 800596c:	f7fa fdda 	bl	8000524 <__aeabi_i2d>
 8005970:	a37d      	add	r3, pc, #500	; (adr r3, 8005b68 <_dtoa_r+0x318>)
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fa fe3f 	bl	80005f8 <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa fc83 	bl	800028c <__adddf3>
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	f7fb f8e5 	bl	8000b58 <__aeabi_d2iz>
 800598e:	2200      	movs	r2, #0
 8005990:	4682      	mov	sl, r0
 8005992:	2300      	movs	r3, #0
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fb f8a0 	bl	8000adc <__aeabi_dcmplt>
 800599c:	b148      	cbz	r0, 80059b2 <_dtoa_r+0x162>
 800599e:	4650      	mov	r0, sl
 80059a0:	f7fa fdc0 	bl	8000524 <__aeabi_i2d>
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	f7fb f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ac:	b908      	cbnz	r0, 80059b2 <_dtoa_r+0x162>
 80059ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059b2:	f1ba 0f16 	cmp.w	sl, #22
 80059b6:	d859      	bhi.n	8005a6c <_dtoa_r+0x21c>
 80059b8:	4970      	ldr	r1, [pc, #448]	; (8005b7c <_dtoa_r+0x32c>)
 80059ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80059be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059c6:	f7fb f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d050      	beq.n	8005a70 <_dtoa_r+0x220>
 80059ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059d2:	2300      	movs	r3, #0
 80059d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80059d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059d8:	1b5d      	subs	r5, r3, r5
 80059da:	f1b5 0801 	subs.w	r8, r5, #1
 80059de:	bf49      	itett	mi
 80059e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80059e4:	2300      	movpl	r3, #0
 80059e6:	9305      	strmi	r3, [sp, #20]
 80059e8:	f04f 0800 	movmi.w	r8, #0
 80059ec:	bf58      	it	pl
 80059ee:	9305      	strpl	r3, [sp, #20]
 80059f0:	f1ba 0f00 	cmp.w	sl, #0
 80059f4:	db3e      	blt.n	8005a74 <_dtoa_r+0x224>
 80059f6:	2300      	movs	r3, #0
 80059f8:	44d0      	add	r8, sl
 80059fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	9b06      	ldr	r3, [sp, #24]
 8005a02:	2b09      	cmp	r3, #9
 8005a04:	f200 8090 	bhi.w	8005b28 <_dtoa_r+0x2d8>
 8005a08:	2b05      	cmp	r3, #5
 8005a0a:	bfc4      	itt	gt
 8005a0c:	3b04      	subgt	r3, #4
 8005a0e:	9306      	strgt	r3, [sp, #24]
 8005a10:	9b06      	ldr	r3, [sp, #24]
 8005a12:	f1a3 0302 	sub.w	r3, r3, #2
 8005a16:	bfcc      	ite	gt
 8005a18:	2500      	movgt	r5, #0
 8005a1a:	2501      	movle	r5, #1
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	f200 808f 	bhi.w	8005b40 <_dtoa_r+0x2f0>
 8005a22:	e8df f003 	tbb	[pc, r3]
 8005a26:	7f7d      	.short	0x7f7d
 8005a28:	7131      	.short	0x7131
 8005a2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005a2e:	441d      	add	r5, r3
 8005a30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005a34:	2820      	cmp	r0, #32
 8005a36:	dd13      	ble.n	8005a60 <_dtoa_r+0x210>
 8005a38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005a3c:	9b00      	ldr	r3, [sp, #0]
 8005a3e:	fa08 f800 	lsl.w	r8, r8, r0
 8005a42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005a46:	fa23 f000 	lsr.w	r0, r3, r0
 8005a4a:	ea48 0000 	orr.w	r0, r8, r0
 8005a4e:	f7fa fd59 	bl	8000504 <__aeabi_ui2d>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4682      	mov	sl, r0
 8005a56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005a5a:	3d01      	subs	r5, #1
 8005a5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a5e:	e772      	b.n	8005946 <_dtoa_r+0xf6>
 8005a60:	9b00      	ldr	r3, [sp, #0]
 8005a62:	f1c0 0020 	rsb	r0, r0, #32
 8005a66:	fa03 f000 	lsl.w	r0, r3, r0
 8005a6a:	e7f0      	b.n	8005a4e <_dtoa_r+0x1fe>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e7b1      	b.n	80059d4 <_dtoa_r+0x184>
 8005a70:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a72:	e7b0      	b.n	80059d6 <_dtoa_r+0x186>
 8005a74:	9b05      	ldr	r3, [sp, #20]
 8005a76:	eba3 030a 	sub.w	r3, r3, sl
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	f1ca 0300 	rsb	r3, sl, #0
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	2300      	movs	r3, #0
 8005a84:	930e      	str	r3, [sp, #56]	; 0x38
 8005a86:	e7bb      	b.n	8005a00 <_dtoa_r+0x1b0>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dd59      	ble.n	8005b46 <_dtoa_r+0x2f6>
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	4699      	mov	r9, r3
 8005a96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a98:	2200      	movs	r2, #0
 8005a9a:	6072      	str	r2, [r6, #4]
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	f102 0014 	add.w	r0, r2, #20
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	6871      	ldr	r1, [r6, #4]
 8005aa6:	d953      	bls.n	8005b50 <_dtoa_r+0x300>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 fcaa 	bl	8006402 <_Balloc>
 8005aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab0:	6030      	str	r0, [r6, #0]
 8005ab2:	f1b9 0f0e 	cmp.w	r9, #14
 8005ab6:	f8d3 b000 	ldr.w	fp, [r3]
 8005aba:	f200 80e6 	bhi.w	8005c8a <_dtoa_r+0x43a>
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	f000 80e3 	beq.w	8005c8a <_dtoa_r+0x43a>
 8005ac4:	ed9d 7b00 	vldr	d7, [sp]
 8005ac8:	f1ba 0f00 	cmp.w	sl, #0
 8005acc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005ad0:	dd74      	ble.n	8005bbc <_dtoa_r+0x36c>
 8005ad2:	4a2a      	ldr	r2, [pc, #168]	; (8005b7c <_dtoa_r+0x32c>)
 8005ad4:	f00a 030f 	and.w	r3, sl, #15
 8005ad8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005adc:	ed93 7b00 	vldr	d7, [r3]
 8005ae0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005ae4:	06f0      	lsls	r0, r6, #27
 8005ae6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005aea:	d565      	bpl.n	8005bb8 <_dtoa_r+0x368>
 8005aec:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <_dtoa_r+0x330>)
 8005aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005af2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005af6:	f7fa fea9 	bl	800084c <__aeabi_ddiv>
 8005afa:	e9cd 0100 	strd	r0, r1, [sp]
 8005afe:	f006 060f 	and.w	r6, r6, #15
 8005b02:	2503      	movs	r5, #3
 8005b04:	4f1e      	ldr	r7, [pc, #120]	; (8005b80 <_dtoa_r+0x330>)
 8005b06:	e04c      	b.n	8005ba2 <_dtoa_r+0x352>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0e:	4453      	add	r3, sl
 8005b10:	f103 0901 	add.w	r9, r3, #1
 8005b14:	9302      	str	r3, [sp, #8]
 8005b16:	464b      	mov	r3, r9
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	bfb8      	it	lt
 8005b1c:	2301      	movlt	r3, #1
 8005b1e:	e7ba      	b.n	8005a96 <_dtoa_r+0x246>
 8005b20:	2300      	movs	r3, #0
 8005b22:	e7b2      	b.n	8005a8a <_dtoa_r+0x23a>
 8005b24:	2300      	movs	r3, #0
 8005b26:	e7f0      	b.n	8005b0a <_dtoa_r+0x2ba>
 8005b28:	2501      	movs	r5, #1
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9306      	str	r3, [sp, #24]
 8005b2e:	950a      	str	r5, [sp, #40]	; 0x28
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	4699      	mov	r9, r3
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2312      	movs	r3, #18
 8005b3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b3e:	e7aa      	b.n	8005a96 <_dtoa_r+0x246>
 8005b40:	2301      	movs	r3, #1
 8005b42:	930a      	str	r3, [sp, #40]	; 0x28
 8005b44:	e7f4      	b.n	8005b30 <_dtoa_r+0x2e0>
 8005b46:	2301      	movs	r3, #1
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	e7f5      	b.n	8005b3c <_dtoa_r+0x2ec>
 8005b50:	3101      	adds	r1, #1
 8005b52:	6071      	str	r1, [r6, #4]
 8005b54:	0052      	lsls	r2, r2, #1
 8005b56:	e7a2      	b.n	8005a9e <_dtoa_r+0x24e>
 8005b58:	636f4361 	.word	0x636f4361
 8005b5c:	3fd287a7 	.word	0x3fd287a7
 8005b60:	8b60c8b3 	.word	0x8b60c8b3
 8005b64:	3fc68a28 	.word	0x3fc68a28
 8005b68:	509f79fb 	.word	0x509f79fb
 8005b6c:	3fd34413 	.word	0x3fd34413
 8005b70:	7ff00000 	.word	0x7ff00000
 8005b74:	08006f25 	.word	0x08006f25
 8005b78:	3ff80000 	.word	0x3ff80000
 8005b7c:	08006f80 	.word	0x08006f80
 8005b80:	08006f58 	.word	0x08006f58
 8005b84:	08006f51 	.word	0x08006f51
 8005b88:	07f1      	lsls	r1, r6, #31
 8005b8a:	d508      	bpl.n	8005b9e <_dtoa_r+0x34e>
 8005b8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b94:	f7fa fd30 	bl	80005f8 <__aeabi_dmul>
 8005b98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	1076      	asrs	r6, r6, #1
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	d1f0      	bne.n	8005b88 <_dtoa_r+0x338>
 8005ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bae:	f7fa fe4d 	bl	800084c <__aeabi_ddiv>
 8005bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8005bb6:	e01a      	b.n	8005bee <_dtoa_r+0x39e>
 8005bb8:	2502      	movs	r5, #2
 8005bba:	e7a3      	b.n	8005b04 <_dtoa_r+0x2b4>
 8005bbc:	f000 80a0 	beq.w	8005d00 <_dtoa_r+0x4b0>
 8005bc0:	f1ca 0600 	rsb	r6, sl, #0
 8005bc4:	4b9f      	ldr	r3, [pc, #636]	; (8005e44 <_dtoa_r+0x5f4>)
 8005bc6:	4fa0      	ldr	r7, [pc, #640]	; (8005e48 <_dtoa_r+0x5f8>)
 8005bc8:	f006 020f 	and.w	r2, r6, #15
 8005bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bd8:	f7fa fd0e 	bl	80005f8 <__aeabi_dmul>
 8005bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8005be0:	1136      	asrs	r6, r6, #4
 8005be2:	2300      	movs	r3, #0
 8005be4:	2502      	movs	r5, #2
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	d17f      	bne.n	8005cea <_dtoa_r+0x49a>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e1      	bne.n	8005bb2 <_dtoa_r+0x362>
 8005bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8087 	beq.w	8005d04 <_dtoa_r+0x4b4>
 8005bf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4b93      	ldr	r3, [pc, #588]	; (8005e4c <_dtoa_r+0x5fc>)
 8005bfe:	4630      	mov	r0, r6
 8005c00:	4639      	mov	r1, r7
 8005c02:	f7fa ff6b 	bl	8000adc <__aeabi_dcmplt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d07c      	beq.n	8005d04 <_dtoa_r+0x4b4>
 8005c0a:	f1b9 0f00 	cmp.w	r9, #0
 8005c0e:	d079      	beq.n	8005d04 <_dtoa_r+0x4b4>
 8005c10:	9b02      	ldr	r3, [sp, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dd35      	ble.n	8005c82 <_dtoa_r+0x432>
 8005c16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c1a:	9308      	str	r3, [sp, #32]
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4b8b      	ldr	r3, [pc, #556]	; (8005e50 <_dtoa_r+0x600>)
 8005c22:	4630      	mov	r0, r6
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	e9cd 0100 	strd	r0, r1, [sp]
 8005c2c:	9f02      	ldr	r7, [sp, #8]
 8005c2e:	3501      	adds	r5, #1
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7fa fc77 	bl	8000524 <__aeabi_i2d>
 8005c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c3a:	f7fa fcdd 	bl	80005f8 <__aeabi_dmul>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4b84      	ldr	r3, [pc, #528]	; (8005e54 <_dtoa_r+0x604>)
 8005c42:	f7fa fb23 	bl	800028c <__adddf3>
 8005c46:	4605      	mov	r5, r0
 8005c48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c4c:	2f00      	cmp	r7, #0
 8005c4e:	d15d      	bne.n	8005d0c <_dtoa_r+0x4bc>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4b81      	ldr	r3, [pc, #516]	; (8005e58 <_dtoa_r+0x608>)
 8005c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c58:	f7fa fb16 	bl	8000288 <__aeabi_dsub>
 8005c5c:	462a      	mov	r2, r5
 8005c5e:	4633      	mov	r3, r6
 8005c60:	e9cd 0100 	strd	r0, r1, [sp]
 8005c64:	f7fa ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f040 8288 	bne.w	800617e <_dtoa_r+0x92e>
 8005c6e:	462a      	mov	r2, r5
 8005c70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c78:	f7fa ff30 	bl	8000adc <__aeabi_dcmplt>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f040 827c 	bne.w	800617a <_dtoa_r+0x92a>
 8005c82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c86:	e9cd 2300 	strd	r2, r3, [sp]
 8005c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f2c0 8150 	blt.w	8005f32 <_dtoa_r+0x6e2>
 8005c92:	f1ba 0f0e 	cmp.w	sl, #14
 8005c96:	f300 814c 	bgt.w	8005f32 <_dtoa_r+0x6e2>
 8005c9a:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <_dtoa_r+0x5f4>)
 8005c9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ca0:	ed93 7b00 	vldr	d7, [r3]
 8005ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cac:	f280 80d8 	bge.w	8005e60 <_dtoa_r+0x610>
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	f300 80d4 	bgt.w	8005e60 <_dtoa_r+0x610>
 8005cb8:	f040 825e 	bne.w	8006178 <_dtoa_r+0x928>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <_dtoa_r+0x608>)
 8005cc0:	ec51 0b17 	vmov	r0, r1, d7
 8005cc4:	f7fa fc98 	bl	80005f8 <__aeabi_dmul>
 8005cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ccc:	f7fa ff1a 	bl	8000b04 <__aeabi_dcmpge>
 8005cd0:	464f      	mov	r7, r9
 8005cd2:	464e      	mov	r6, r9
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f040 8234 	bne.w	8006142 <_dtoa_r+0x8f2>
 8005cda:	2331      	movs	r3, #49	; 0x31
 8005cdc:	f10b 0501 	add.w	r5, fp, #1
 8005ce0:	f88b 3000 	strb.w	r3, [fp]
 8005ce4:	f10a 0a01 	add.w	sl, sl, #1
 8005ce8:	e22f      	b.n	800614a <_dtoa_r+0x8fa>
 8005cea:	07f2      	lsls	r2, r6, #31
 8005cec:	d505      	bpl.n	8005cfa <_dtoa_r+0x4aa>
 8005cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf2:	f7fa fc81 	bl	80005f8 <__aeabi_dmul>
 8005cf6:	3501      	adds	r5, #1
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	1076      	asrs	r6, r6, #1
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	e772      	b.n	8005be6 <_dtoa_r+0x396>
 8005d00:	2502      	movs	r5, #2
 8005d02:	e774      	b.n	8005bee <_dtoa_r+0x39e>
 8005d04:	f8cd a020 	str.w	sl, [sp, #32]
 8005d08:	464f      	mov	r7, r9
 8005d0a:	e791      	b.n	8005c30 <_dtoa_r+0x3e0>
 8005d0c:	4b4d      	ldr	r3, [pc, #308]	; (8005e44 <_dtoa_r+0x5f4>)
 8005d0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d047      	beq.n	8005dac <_dtoa_r+0x55c>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	2000      	movs	r0, #0
 8005d22:	494e      	ldr	r1, [pc, #312]	; (8005e5c <_dtoa_r+0x60c>)
 8005d24:	f7fa fd92 	bl	800084c <__aeabi_ddiv>
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4633      	mov	r3, r6
 8005d2c:	f7fa faac 	bl	8000288 <__aeabi_dsub>
 8005d30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d34:	465d      	mov	r5, fp
 8005d36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d3a:	f7fa ff0d 	bl	8000b58 <__aeabi_d2iz>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	f7fa fbf0 	bl	8000524 <__aeabi_i2d>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d4c:	f7fa fa9c 	bl	8000288 <__aeabi_dsub>
 8005d50:	3630      	adds	r6, #48	; 0x30
 8005d52:	f805 6b01 	strb.w	r6, [r5], #1
 8005d56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d5a:	e9cd 0100 	strd	r0, r1, [sp]
 8005d5e:	f7fa febd 	bl	8000adc <__aeabi_dcmplt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d163      	bne.n	8005e2e <_dtoa_r+0x5de>
 8005d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4937      	ldr	r1, [pc, #220]	; (8005e4c <_dtoa_r+0x5fc>)
 8005d6e:	f7fa fa8b 	bl	8000288 <__aeabi_dsub>
 8005d72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d76:	f7fa feb1 	bl	8000adc <__aeabi_dcmplt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f040 80b7 	bne.w	8005eee <_dtoa_r+0x69e>
 8005d80:	eba5 030b 	sub.w	r3, r5, fp
 8005d84:	429f      	cmp	r7, r3
 8005d86:	f77f af7c 	ble.w	8005c82 <_dtoa_r+0x432>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	4b30      	ldr	r3, [pc, #192]	; (8005e50 <_dtoa_r+0x600>)
 8005d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d92:	f7fa fc31 	bl	80005f8 <__aeabi_dmul>
 8005d96:	2200      	movs	r2, #0
 8005d98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d9c:	4b2c      	ldr	r3, [pc, #176]	; (8005e50 <_dtoa_r+0x600>)
 8005d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005da2:	f7fa fc29 	bl	80005f8 <__aeabi_dmul>
 8005da6:	e9cd 0100 	strd	r0, r1, [sp]
 8005daa:	e7c4      	b.n	8005d36 <_dtoa_r+0x4e6>
 8005dac:	462a      	mov	r2, r5
 8005dae:	4633      	mov	r3, r6
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005db8:	eb0b 0507 	add.w	r5, fp, r7
 8005dbc:	465e      	mov	r6, fp
 8005dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dc2:	f7fa fec9 	bl	8000b58 <__aeabi_d2iz>
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	f7fa fbac 	bl	8000524 <__aeabi_i2d>
 8005dcc:	3730      	adds	r7, #48	; 0x30
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dd6:	f7fa fa57 	bl	8000288 <__aeabi_dsub>
 8005dda:	f806 7b01 	strb.w	r7, [r6], #1
 8005dde:	42ae      	cmp	r6, r5
 8005de0:	e9cd 0100 	strd	r0, r1, [sp]
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	d126      	bne.n	8005e38 <_dtoa_r+0x5e8>
 8005dea:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <_dtoa_r+0x60c>)
 8005dec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005df0:	f7fa fa4c 	bl	800028c <__adddf3>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dfc:	f7fa fe8c 	bl	8000b18 <__aeabi_dcmpgt>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d174      	bne.n	8005eee <_dtoa_r+0x69e>
 8005e04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e08:	2000      	movs	r0, #0
 8005e0a:	4914      	ldr	r1, [pc, #80]	; (8005e5c <_dtoa_r+0x60c>)
 8005e0c:	f7fa fa3c 	bl	8000288 <__aeabi_dsub>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e18:	f7fa fe60 	bl	8000adc <__aeabi_dcmplt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f43f af30 	beq.w	8005c82 <_dtoa_r+0x432>
 8005e22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e26:	2b30      	cmp	r3, #48	; 0x30
 8005e28:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e2c:	d002      	beq.n	8005e34 <_dtoa_r+0x5e4>
 8005e2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005e32:	e04a      	b.n	8005eca <_dtoa_r+0x67a>
 8005e34:	4615      	mov	r5, r2
 8005e36:	e7f4      	b.n	8005e22 <_dtoa_r+0x5d2>
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <_dtoa_r+0x600>)
 8005e3a:	f7fa fbdd 	bl	80005f8 <__aeabi_dmul>
 8005e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8005e42:	e7bc      	b.n	8005dbe <_dtoa_r+0x56e>
 8005e44:	08006f80 	.word	0x08006f80
 8005e48:	08006f58 	.word	0x08006f58
 8005e4c:	3ff00000 	.word	0x3ff00000
 8005e50:	40240000 	.word	0x40240000
 8005e54:	401c0000 	.word	0x401c0000
 8005e58:	40140000 	.word	0x40140000
 8005e5c:	3fe00000 	.word	0x3fe00000
 8005e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e64:	465d      	mov	r5, fp
 8005e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	f7fa fced 	bl	800084c <__aeabi_ddiv>
 8005e72:	f7fa fe71 	bl	8000b58 <__aeabi_d2iz>
 8005e76:	4680      	mov	r8, r0
 8005e78:	f7fa fb54 	bl	8000524 <__aeabi_i2d>
 8005e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e80:	f7fa fbba 	bl	80005f8 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005e90:	f7fa f9fa 	bl	8000288 <__aeabi_dsub>
 8005e94:	f805 6b01 	strb.w	r6, [r5], #1
 8005e98:	eba5 060b 	sub.w	r6, r5, fp
 8005e9c:	45b1      	cmp	r9, r6
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	d139      	bne.n	8005f18 <_dtoa_r+0x6c8>
 8005ea4:	f7fa f9f2 	bl	800028c <__adddf3>
 8005ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	f7fa fe32 	bl	8000b18 <__aeabi_dcmpgt>
 8005eb4:	b9c8      	cbnz	r0, 8005eea <_dtoa_r+0x69a>
 8005eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec2:	b110      	cbz	r0, 8005eca <_dtoa_r+0x67a>
 8005ec4:	f018 0f01 	tst.w	r8, #1
 8005ec8:	d10f      	bne.n	8005eea <_dtoa_r+0x69a>
 8005eca:	9904      	ldr	r1, [sp, #16]
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 facc 	bl	800646a <_Bfree>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ed6:	702b      	strb	r3, [r5, #0]
 8005ed8:	f10a 0301 	add.w	r3, sl, #1
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8241 	beq.w	8006368 <_dtoa_r+0xb18>
 8005ee6:	601d      	str	r5, [r3, #0]
 8005ee8:	e23e      	b.n	8006368 <_dtoa_r+0xb18>
 8005eea:	f8cd a020 	str.w	sl, [sp, #32]
 8005eee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ef2:	2a39      	cmp	r2, #57	; 0x39
 8005ef4:	f105 33ff 	add.w	r3, r5, #4294967295
 8005ef8:	d108      	bne.n	8005f0c <_dtoa_r+0x6bc>
 8005efa:	459b      	cmp	fp, r3
 8005efc:	d10a      	bne.n	8005f14 <_dtoa_r+0x6c4>
 8005efe:	9b08      	ldr	r3, [sp, #32]
 8005f00:	3301      	adds	r3, #1
 8005f02:	9308      	str	r3, [sp, #32]
 8005f04:	2330      	movs	r3, #48	; 0x30
 8005f06:	f88b 3000 	strb.w	r3, [fp]
 8005f0a:	465b      	mov	r3, fp
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	3201      	adds	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e78c      	b.n	8005e2e <_dtoa_r+0x5de>
 8005f14:	461d      	mov	r5, r3
 8005f16:	e7ea      	b.n	8005eee <_dtoa_r+0x69e>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4b9b      	ldr	r3, [pc, #620]	; (8006188 <_dtoa_r+0x938>)
 8005f1c:	f7fa fb6c 	bl	80005f8 <__aeabi_dmul>
 8005f20:	2200      	movs	r2, #0
 8005f22:	2300      	movs	r3, #0
 8005f24:	4606      	mov	r6, r0
 8005f26:	460f      	mov	r7, r1
 8005f28:	f7fa fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d09a      	beq.n	8005e66 <_dtoa_r+0x616>
 8005f30:	e7cb      	b.n	8005eca <_dtoa_r+0x67a>
 8005f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	f000 808b 	beq.w	8006050 <_dtoa_r+0x800>
 8005f3a:	9a06      	ldr	r2, [sp, #24]
 8005f3c:	2a01      	cmp	r2, #1
 8005f3e:	dc6e      	bgt.n	800601e <_dtoa_r+0x7ce>
 8005f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	d067      	beq.n	8006016 <_dtoa_r+0x7c6>
 8005f46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f4a:	9f07      	ldr	r7, [sp, #28]
 8005f4c:	9d05      	ldr	r5, [sp, #20]
 8005f4e:	9a05      	ldr	r2, [sp, #20]
 8005f50:	2101      	movs	r1, #1
 8005f52:	441a      	add	r2, r3
 8005f54:	4620      	mov	r0, r4
 8005f56:	9205      	str	r2, [sp, #20]
 8005f58:	4498      	add	r8, r3
 8005f5a:	f000 fb26 	bl	80065aa <__i2b>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	dd0c      	ble.n	8005f7e <_dtoa_r+0x72e>
 8005f64:	f1b8 0f00 	cmp.w	r8, #0
 8005f68:	dd09      	ble.n	8005f7e <_dtoa_r+0x72e>
 8005f6a:	4545      	cmp	r5, r8
 8005f6c:	9a05      	ldr	r2, [sp, #20]
 8005f6e:	462b      	mov	r3, r5
 8005f70:	bfa8      	it	ge
 8005f72:	4643      	movge	r3, r8
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	9205      	str	r2, [sp, #20]
 8005f78:	1aed      	subs	r5, r5, r3
 8005f7a:	eba8 0803 	sub.w	r8, r8, r3
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	b1eb      	cbz	r3, 8005fbe <_dtoa_r+0x76e>
 8005f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d067      	beq.n	8006058 <_dtoa_r+0x808>
 8005f88:	b18f      	cbz	r7, 8005fae <_dtoa_r+0x75e>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	463a      	mov	r2, r7
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fbaa 	bl	80066e8 <__pow5mult>
 8005f94:	9a04      	ldr	r2, [sp, #16]
 8005f96:	4601      	mov	r1, r0
 8005f98:	4606      	mov	r6, r0
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 fb0e 	bl	80065bc <__multiply>
 8005fa0:	9904      	ldr	r1, [sp, #16]
 8005fa2:	9008      	str	r0, [sp, #32]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fa60 	bl	800646a <_Bfree>
 8005faa:	9b08      	ldr	r3, [sp, #32]
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	9b07      	ldr	r3, [sp, #28]
 8005fb0:	1bda      	subs	r2, r3, r7
 8005fb2:	d004      	beq.n	8005fbe <_dtoa_r+0x76e>
 8005fb4:	9904      	ldr	r1, [sp, #16]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 fb96 	bl	80066e8 <__pow5mult>
 8005fbc:	9004      	str	r0, [sp, #16]
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 faf2 	bl	80065aa <__i2b>
 8005fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc8:	4607      	mov	r7, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 81d0 	beq.w	8006370 <_dtoa_r+0xb20>
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 fb87 	bl	80066e8 <__pow5mult>
 8005fda:	9b06      	ldr	r3, [sp, #24]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	4607      	mov	r7, r0
 8005fe0:	dc40      	bgt.n	8006064 <_dtoa_r+0x814>
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d139      	bne.n	800605c <_dtoa_r+0x80c>
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d136      	bne.n	8006060 <_dtoa_r+0x810>
 8005ff2:	9b01      	ldr	r3, [sp, #4]
 8005ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	0d1b      	lsrs	r3, r3, #20
 8005ffa:	051b      	lsls	r3, r3, #20
 8005ffc:	b12b      	cbz	r3, 800600a <_dtoa_r+0x7ba>
 8005ffe:	9b05      	ldr	r3, [sp, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	9305      	str	r3, [sp, #20]
 8006004:	f108 0801 	add.w	r8, r8, #1
 8006008:	2301      	movs	r3, #1
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d12a      	bne.n	8006068 <_dtoa_r+0x818>
 8006012:	2001      	movs	r0, #1
 8006014:	e030      	b.n	8006078 <_dtoa_r+0x828>
 8006016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006018:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800601c:	e795      	b.n	8005f4a <_dtoa_r+0x6fa>
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	f109 37ff 	add.w	r7, r9, #4294967295
 8006024:	42bb      	cmp	r3, r7
 8006026:	bfbf      	itttt	lt
 8006028:	9b07      	ldrlt	r3, [sp, #28]
 800602a:	9707      	strlt	r7, [sp, #28]
 800602c:	1afa      	sublt	r2, r7, r3
 800602e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006030:	bfbb      	ittet	lt
 8006032:	189b      	addlt	r3, r3, r2
 8006034:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006036:	1bdf      	subge	r7, r3, r7
 8006038:	2700      	movlt	r7, #0
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	bfb5      	itete	lt
 8006040:	9b05      	ldrlt	r3, [sp, #20]
 8006042:	9d05      	ldrge	r5, [sp, #20]
 8006044:	eba3 0509 	sublt.w	r5, r3, r9
 8006048:	464b      	movge	r3, r9
 800604a:	bfb8      	it	lt
 800604c:	2300      	movlt	r3, #0
 800604e:	e77e      	b.n	8005f4e <_dtoa_r+0x6fe>
 8006050:	9f07      	ldr	r7, [sp, #28]
 8006052:	9d05      	ldr	r5, [sp, #20]
 8006054:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006056:	e783      	b.n	8005f60 <_dtoa_r+0x710>
 8006058:	9a07      	ldr	r2, [sp, #28]
 800605a:	e7ab      	b.n	8005fb4 <_dtoa_r+0x764>
 800605c:	2300      	movs	r3, #0
 800605e:	e7d4      	b.n	800600a <_dtoa_r+0x7ba>
 8006060:	9b00      	ldr	r3, [sp, #0]
 8006062:	e7d2      	b.n	800600a <_dtoa_r+0x7ba>
 8006064:	2300      	movs	r3, #0
 8006066:	9307      	str	r3, [sp, #28]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800606e:	6918      	ldr	r0, [r3, #16]
 8006070:	f000 fa4d 	bl	800650e <__hi0bits>
 8006074:	f1c0 0020 	rsb	r0, r0, #32
 8006078:	4440      	add	r0, r8
 800607a:	f010 001f 	ands.w	r0, r0, #31
 800607e:	d047      	beq.n	8006110 <_dtoa_r+0x8c0>
 8006080:	f1c0 0320 	rsb	r3, r0, #32
 8006084:	2b04      	cmp	r3, #4
 8006086:	dd3b      	ble.n	8006100 <_dtoa_r+0x8b0>
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	f1c0 001c 	rsb	r0, r0, #28
 800608e:	4403      	add	r3, r0
 8006090:	9305      	str	r3, [sp, #20]
 8006092:	4405      	add	r5, r0
 8006094:	4480      	add	r8, r0
 8006096:	9b05      	ldr	r3, [sp, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	dd05      	ble.n	80060a8 <_dtoa_r+0x858>
 800609c:	461a      	mov	r2, r3
 800609e:	9904      	ldr	r1, [sp, #16]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fb6f 	bl	8006784 <__lshift>
 80060a6:	9004      	str	r0, [sp, #16]
 80060a8:	f1b8 0f00 	cmp.w	r8, #0
 80060ac:	dd05      	ble.n	80060ba <_dtoa_r+0x86a>
 80060ae:	4639      	mov	r1, r7
 80060b0:	4642      	mov	r2, r8
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fb66 	bl	8006784 <__lshift>
 80060b8:	4607      	mov	r7, r0
 80060ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060bc:	b353      	cbz	r3, 8006114 <_dtoa_r+0x8c4>
 80060be:	4639      	mov	r1, r7
 80060c0:	9804      	ldr	r0, [sp, #16]
 80060c2:	f000 fbb3 	bl	800682c <__mcmp>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	da24      	bge.n	8006114 <_dtoa_r+0x8c4>
 80060ca:	2300      	movs	r3, #0
 80060cc:	220a      	movs	r2, #10
 80060ce:	9904      	ldr	r1, [sp, #16]
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f9e1 	bl	8006498 <__multadd>
 80060d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d8:	9004      	str	r0, [sp, #16]
 80060da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 814d 	beq.w	800637e <_dtoa_r+0xb2e>
 80060e4:	2300      	movs	r3, #0
 80060e6:	4631      	mov	r1, r6
 80060e8:	220a      	movs	r2, #10
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f9d4 	bl	8006498 <__multadd>
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	4606      	mov	r6, r0
 80060f6:	dc4f      	bgt.n	8006198 <_dtoa_r+0x948>
 80060f8:	9b06      	ldr	r3, [sp, #24]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	dd4c      	ble.n	8006198 <_dtoa_r+0x948>
 80060fe:	e011      	b.n	8006124 <_dtoa_r+0x8d4>
 8006100:	d0c9      	beq.n	8006096 <_dtoa_r+0x846>
 8006102:	9a05      	ldr	r2, [sp, #20]
 8006104:	331c      	adds	r3, #28
 8006106:	441a      	add	r2, r3
 8006108:	9205      	str	r2, [sp, #20]
 800610a:	441d      	add	r5, r3
 800610c:	4498      	add	r8, r3
 800610e:	e7c2      	b.n	8006096 <_dtoa_r+0x846>
 8006110:	4603      	mov	r3, r0
 8006112:	e7f6      	b.n	8006102 <_dtoa_r+0x8b2>
 8006114:	f1b9 0f00 	cmp.w	r9, #0
 8006118:	dc38      	bgt.n	800618c <_dtoa_r+0x93c>
 800611a:	9b06      	ldr	r3, [sp, #24]
 800611c:	2b02      	cmp	r3, #2
 800611e:	dd35      	ble.n	800618c <_dtoa_r+0x93c>
 8006120:	f8cd 9008 	str.w	r9, [sp, #8]
 8006124:	9b02      	ldr	r3, [sp, #8]
 8006126:	b963      	cbnz	r3, 8006142 <_dtoa_r+0x8f2>
 8006128:	4639      	mov	r1, r7
 800612a:	2205      	movs	r2, #5
 800612c:	4620      	mov	r0, r4
 800612e:	f000 f9b3 	bl	8006498 <__multadd>
 8006132:	4601      	mov	r1, r0
 8006134:	4607      	mov	r7, r0
 8006136:	9804      	ldr	r0, [sp, #16]
 8006138:	f000 fb78 	bl	800682c <__mcmp>
 800613c:	2800      	cmp	r0, #0
 800613e:	f73f adcc 	bgt.w	8005cda <_dtoa_r+0x48a>
 8006142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006144:	465d      	mov	r5, fp
 8006146:	ea6f 0a03 	mvn.w	sl, r3
 800614a:	f04f 0900 	mov.w	r9, #0
 800614e:	4639      	mov	r1, r7
 8006150:	4620      	mov	r0, r4
 8006152:	f000 f98a 	bl	800646a <_Bfree>
 8006156:	2e00      	cmp	r6, #0
 8006158:	f43f aeb7 	beq.w	8005eca <_dtoa_r+0x67a>
 800615c:	f1b9 0f00 	cmp.w	r9, #0
 8006160:	d005      	beq.n	800616e <_dtoa_r+0x91e>
 8006162:	45b1      	cmp	r9, r6
 8006164:	d003      	beq.n	800616e <_dtoa_r+0x91e>
 8006166:	4649      	mov	r1, r9
 8006168:	4620      	mov	r0, r4
 800616a:	f000 f97e 	bl	800646a <_Bfree>
 800616e:	4631      	mov	r1, r6
 8006170:	4620      	mov	r0, r4
 8006172:	f000 f97a 	bl	800646a <_Bfree>
 8006176:	e6a8      	b.n	8005eca <_dtoa_r+0x67a>
 8006178:	2700      	movs	r7, #0
 800617a:	463e      	mov	r6, r7
 800617c:	e7e1      	b.n	8006142 <_dtoa_r+0x8f2>
 800617e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006182:	463e      	mov	r6, r7
 8006184:	e5a9      	b.n	8005cda <_dtoa_r+0x48a>
 8006186:	bf00      	nop
 8006188:	40240000 	.word	0x40240000
 800618c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80fa 	beq.w	800638c <_dtoa_r+0xb3c>
 8006198:	2d00      	cmp	r5, #0
 800619a:	dd05      	ble.n	80061a8 <_dtoa_r+0x958>
 800619c:	4631      	mov	r1, r6
 800619e:	462a      	mov	r2, r5
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 faef 	bl	8006784 <__lshift>
 80061a6:	4606      	mov	r6, r0
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d04c      	beq.n	8006248 <_dtoa_r+0x9f8>
 80061ae:	6871      	ldr	r1, [r6, #4]
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 f926 	bl	8006402 <_Balloc>
 80061b6:	6932      	ldr	r2, [r6, #16]
 80061b8:	3202      	adds	r2, #2
 80061ba:	4605      	mov	r5, r0
 80061bc:	0092      	lsls	r2, r2, #2
 80061be:	f106 010c 	add.w	r1, r6, #12
 80061c2:	300c      	adds	r0, #12
 80061c4:	f000 f912 	bl	80063ec <memcpy>
 80061c8:	2201      	movs	r2, #1
 80061ca:	4629      	mov	r1, r5
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fad9 	bl	8006784 <__lshift>
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	f8cd b014 	str.w	fp, [sp, #20]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	46b1      	mov	r9, r6
 80061de:	9307      	str	r3, [sp, #28]
 80061e0:	4606      	mov	r6, r0
 80061e2:	4639      	mov	r1, r7
 80061e4:	9804      	ldr	r0, [sp, #16]
 80061e6:	f7ff faa7 	bl	8005738 <quorem>
 80061ea:	4649      	mov	r1, r9
 80061ec:	4605      	mov	r5, r0
 80061ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80061f2:	9804      	ldr	r0, [sp, #16]
 80061f4:	f000 fb1a 	bl	800682c <__mcmp>
 80061f8:	4632      	mov	r2, r6
 80061fa:	9000      	str	r0, [sp, #0]
 80061fc:	4639      	mov	r1, r7
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 fb2e 	bl	8006860 <__mdiff>
 8006204:	68c3      	ldr	r3, [r0, #12]
 8006206:	4602      	mov	r2, r0
 8006208:	bb03      	cbnz	r3, 800624c <_dtoa_r+0x9fc>
 800620a:	4601      	mov	r1, r0
 800620c:	9008      	str	r0, [sp, #32]
 800620e:	9804      	ldr	r0, [sp, #16]
 8006210:	f000 fb0c 	bl	800682c <__mcmp>
 8006214:	9a08      	ldr	r2, [sp, #32]
 8006216:	4603      	mov	r3, r0
 8006218:	4611      	mov	r1, r2
 800621a:	4620      	mov	r0, r4
 800621c:	9308      	str	r3, [sp, #32]
 800621e:	f000 f924 	bl	800646a <_Bfree>
 8006222:	9b08      	ldr	r3, [sp, #32]
 8006224:	b9a3      	cbnz	r3, 8006250 <_dtoa_r+0xa00>
 8006226:	9a06      	ldr	r2, [sp, #24]
 8006228:	b992      	cbnz	r2, 8006250 <_dtoa_r+0xa00>
 800622a:	9a07      	ldr	r2, [sp, #28]
 800622c:	b982      	cbnz	r2, 8006250 <_dtoa_r+0xa00>
 800622e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006232:	d029      	beq.n	8006288 <_dtoa_r+0xa38>
 8006234:	9b00      	ldr	r3, [sp, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	dd01      	ble.n	800623e <_dtoa_r+0x9ee>
 800623a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800623e:	9b05      	ldr	r3, [sp, #20]
 8006240:	1c5d      	adds	r5, r3, #1
 8006242:	f883 8000 	strb.w	r8, [r3]
 8006246:	e782      	b.n	800614e <_dtoa_r+0x8fe>
 8006248:	4630      	mov	r0, r6
 800624a:	e7c2      	b.n	80061d2 <_dtoa_r+0x982>
 800624c:	2301      	movs	r3, #1
 800624e:	e7e3      	b.n	8006218 <_dtoa_r+0x9c8>
 8006250:	9a00      	ldr	r2, [sp, #0]
 8006252:	2a00      	cmp	r2, #0
 8006254:	db04      	blt.n	8006260 <_dtoa_r+0xa10>
 8006256:	d125      	bne.n	80062a4 <_dtoa_r+0xa54>
 8006258:	9a06      	ldr	r2, [sp, #24]
 800625a:	bb1a      	cbnz	r2, 80062a4 <_dtoa_r+0xa54>
 800625c:	9a07      	ldr	r2, [sp, #28]
 800625e:	bb0a      	cbnz	r2, 80062a4 <_dtoa_r+0xa54>
 8006260:	2b00      	cmp	r3, #0
 8006262:	ddec      	ble.n	800623e <_dtoa_r+0x9ee>
 8006264:	2201      	movs	r2, #1
 8006266:	9904      	ldr	r1, [sp, #16]
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fa8b 	bl	8006784 <__lshift>
 800626e:	4639      	mov	r1, r7
 8006270:	9004      	str	r0, [sp, #16]
 8006272:	f000 fadb 	bl	800682c <__mcmp>
 8006276:	2800      	cmp	r0, #0
 8006278:	dc03      	bgt.n	8006282 <_dtoa_r+0xa32>
 800627a:	d1e0      	bne.n	800623e <_dtoa_r+0x9ee>
 800627c:	f018 0f01 	tst.w	r8, #1
 8006280:	d0dd      	beq.n	800623e <_dtoa_r+0x9ee>
 8006282:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006286:	d1d8      	bne.n	800623a <_dtoa_r+0x9ea>
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	9a05      	ldr	r2, [sp, #20]
 800628c:	1c5d      	adds	r5, r3, #1
 800628e:	2339      	movs	r3, #57	; 0x39
 8006290:	7013      	strb	r3, [r2, #0]
 8006292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006296:	2b39      	cmp	r3, #57	; 0x39
 8006298:	f105 32ff 	add.w	r2, r5, #4294967295
 800629c:	d04f      	beq.n	800633e <_dtoa_r+0xaee>
 800629e:	3301      	adds	r3, #1
 80062a0:	7013      	strb	r3, [r2, #0]
 80062a2:	e754      	b.n	800614e <_dtoa_r+0x8fe>
 80062a4:	9a05      	ldr	r2, [sp, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f102 0501 	add.w	r5, r2, #1
 80062ac:	dd06      	ble.n	80062bc <_dtoa_r+0xa6c>
 80062ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062b2:	d0e9      	beq.n	8006288 <_dtoa_r+0xa38>
 80062b4:	f108 0801 	add.w	r8, r8, #1
 80062b8:	9b05      	ldr	r3, [sp, #20]
 80062ba:	e7c2      	b.n	8006242 <_dtoa_r+0x9f2>
 80062bc:	9a02      	ldr	r2, [sp, #8]
 80062be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80062c2:	eba5 030b 	sub.w	r3, r5, fp
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d021      	beq.n	800630e <_dtoa_r+0xabe>
 80062ca:	2300      	movs	r3, #0
 80062cc:	220a      	movs	r2, #10
 80062ce:	9904      	ldr	r1, [sp, #16]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 f8e1 	bl	8006498 <__multadd>
 80062d6:	45b1      	cmp	r9, r6
 80062d8:	9004      	str	r0, [sp, #16]
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	f04f 020a 	mov.w	r2, #10
 80062e2:	4649      	mov	r1, r9
 80062e4:	4620      	mov	r0, r4
 80062e6:	d105      	bne.n	80062f4 <_dtoa_r+0xaa4>
 80062e8:	f000 f8d6 	bl	8006498 <__multadd>
 80062ec:	4681      	mov	r9, r0
 80062ee:	4606      	mov	r6, r0
 80062f0:	9505      	str	r5, [sp, #20]
 80062f2:	e776      	b.n	80061e2 <_dtoa_r+0x992>
 80062f4:	f000 f8d0 	bl	8006498 <__multadd>
 80062f8:	4631      	mov	r1, r6
 80062fa:	4681      	mov	r9, r0
 80062fc:	2300      	movs	r3, #0
 80062fe:	220a      	movs	r2, #10
 8006300:	4620      	mov	r0, r4
 8006302:	f000 f8c9 	bl	8006498 <__multadd>
 8006306:	4606      	mov	r6, r0
 8006308:	e7f2      	b.n	80062f0 <_dtoa_r+0xaa0>
 800630a:	f04f 0900 	mov.w	r9, #0
 800630e:	2201      	movs	r2, #1
 8006310:	9904      	ldr	r1, [sp, #16]
 8006312:	4620      	mov	r0, r4
 8006314:	f000 fa36 	bl	8006784 <__lshift>
 8006318:	4639      	mov	r1, r7
 800631a:	9004      	str	r0, [sp, #16]
 800631c:	f000 fa86 	bl	800682c <__mcmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	dcb6      	bgt.n	8006292 <_dtoa_r+0xa42>
 8006324:	d102      	bne.n	800632c <_dtoa_r+0xadc>
 8006326:	f018 0f01 	tst.w	r8, #1
 800632a:	d1b2      	bne.n	8006292 <_dtoa_r+0xa42>
 800632c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	f105 32ff 	add.w	r2, r5, #4294967295
 8006336:	f47f af0a 	bne.w	800614e <_dtoa_r+0x8fe>
 800633a:	4615      	mov	r5, r2
 800633c:	e7f6      	b.n	800632c <_dtoa_r+0xadc>
 800633e:	4593      	cmp	fp, r2
 8006340:	d105      	bne.n	800634e <_dtoa_r+0xafe>
 8006342:	2331      	movs	r3, #49	; 0x31
 8006344:	f10a 0a01 	add.w	sl, sl, #1
 8006348:	f88b 3000 	strb.w	r3, [fp]
 800634c:	e6ff      	b.n	800614e <_dtoa_r+0x8fe>
 800634e:	4615      	mov	r5, r2
 8006350:	e79f      	b.n	8006292 <_dtoa_r+0xa42>
 8006352:	f8df b064 	ldr.w	fp, [pc, #100]	; 80063b8 <_dtoa_r+0xb68>
 8006356:	e007      	b.n	8006368 <_dtoa_r+0xb18>
 8006358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800635a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80063bc <_dtoa_r+0xb6c>
 800635e:	b11b      	cbz	r3, 8006368 <_dtoa_r+0xb18>
 8006360:	f10b 0308 	add.w	r3, fp, #8
 8006364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	4658      	mov	r0, fp
 800636a:	b017      	add	sp, #92	; 0x5c
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	f77f ae35 	ble.w	8005fe2 <_dtoa_r+0x792>
 8006378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	e649      	b.n	8006012 <_dtoa_r+0x7c2>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	dc03      	bgt.n	800638c <_dtoa_r+0xb3c>
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	2b02      	cmp	r3, #2
 8006388:	f73f aecc 	bgt.w	8006124 <_dtoa_r+0x8d4>
 800638c:	465d      	mov	r5, fp
 800638e:	4639      	mov	r1, r7
 8006390:	9804      	ldr	r0, [sp, #16]
 8006392:	f7ff f9d1 	bl	8005738 <quorem>
 8006396:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800639a:	f805 8b01 	strb.w	r8, [r5], #1
 800639e:	9a02      	ldr	r2, [sp, #8]
 80063a0:	eba5 030b 	sub.w	r3, r5, fp
 80063a4:	429a      	cmp	r2, r3
 80063a6:	ddb0      	ble.n	800630a <_dtoa_r+0xaba>
 80063a8:	2300      	movs	r3, #0
 80063aa:	220a      	movs	r2, #10
 80063ac:	9904      	ldr	r1, [sp, #16]
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 f872 	bl	8006498 <__multadd>
 80063b4:	9004      	str	r0, [sp, #16]
 80063b6:	e7ea      	b.n	800638e <_dtoa_r+0xb3e>
 80063b8:	08006f24 	.word	0x08006f24
 80063bc:	08006f48 	.word	0x08006f48

080063c0 <_localeconv_r>:
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <_localeconv_r+0x14>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6a18      	ldr	r0, [r3, #32]
 80063c6:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <_localeconv_r+0x18>)
 80063c8:	2800      	cmp	r0, #0
 80063ca:	bf08      	it	eq
 80063cc:	4618      	moveq	r0, r3
 80063ce:	30f0      	adds	r0, #240	; 0xf0
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000000c 	.word	0x2000000c
 80063d8:	20000070 	.word	0x20000070

080063dc <malloc>:
 80063dc:	4b02      	ldr	r3, [pc, #8]	; (80063e8 <malloc+0xc>)
 80063de:	4601      	mov	r1, r0
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	f000 bb45 	b.w	8006a70 <_malloc_r>
 80063e6:	bf00      	nop
 80063e8:	2000000c 	.word	0x2000000c

080063ec <memcpy>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	1e43      	subs	r3, r0, #1
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	d100      	bne.n	80063f8 <memcpy+0xc>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006400:	e7f7      	b.n	80063f2 <memcpy+0x6>

08006402 <_Balloc>:
 8006402:	b570      	push	{r4, r5, r6, lr}
 8006404:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006406:	4604      	mov	r4, r0
 8006408:	460e      	mov	r6, r1
 800640a:	b93d      	cbnz	r5, 800641c <_Balloc+0x1a>
 800640c:	2010      	movs	r0, #16
 800640e:	f7ff ffe5 	bl	80063dc <malloc>
 8006412:	6260      	str	r0, [r4, #36]	; 0x24
 8006414:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006418:	6005      	str	r5, [r0, #0]
 800641a:	60c5      	str	r5, [r0, #12]
 800641c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800641e:	68eb      	ldr	r3, [r5, #12]
 8006420:	b183      	cbz	r3, 8006444 <_Balloc+0x42>
 8006422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800642a:	b9b8      	cbnz	r0, 800645c <_Balloc+0x5a>
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f506 	lsl.w	r5, r1, r6
 8006432:	1d6a      	adds	r2, r5, #5
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	4620      	mov	r0, r4
 8006438:	f000 fabe 	bl	80069b8 <_calloc_r>
 800643c:	b160      	cbz	r0, 8006458 <_Balloc+0x56>
 800643e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006442:	e00e      	b.n	8006462 <_Balloc+0x60>
 8006444:	2221      	movs	r2, #33	; 0x21
 8006446:	2104      	movs	r1, #4
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fab5 	bl	80069b8 <_calloc_r>
 800644e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006450:	60e8      	str	r0, [r5, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e4      	bne.n	8006422 <_Balloc+0x20>
 8006458:	2000      	movs	r0, #0
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	6802      	ldr	r2, [r0, #0]
 800645e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006462:	2300      	movs	r3, #0
 8006464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006468:	e7f7      	b.n	800645a <_Balloc+0x58>

0800646a <_Bfree>:
 800646a:	b570      	push	{r4, r5, r6, lr}
 800646c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800646e:	4606      	mov	r6, r0
 8006470:	460d      	mov	r5, r1
 8006472:	b93c      	cbnz	r4, 8006484 <_Bfree+0x1a>
 8006474:	2010      	movs	r0, #16
 8006476:	f7ff ffb1 	bl	80063dc <malloc>
 800647a:	6270      	str	r0, [r6, #36]	; 0x24
 800647c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006480:	6004      	str	r4, [r0, #0]
 8006482:	60c4      	str	r4, [r0, #12]
 8006484:	b13d      	cbz	r5, 8006496 <_Bfree+0x2c>
 8006486:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006488:	686a      	ldr	r2, [r5, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006490:	6029      	str	r1, [r5, #0]
 8006492:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006496:	bd70      	pop	{r4, r5, r6, pc}

08006498 <__multadd>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	690d      	ldr	r5, [r1, #16]
 800649e:	461f      	mov	r7, r3
 80064a0:	4606      	mov	r6, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	f101 0c14 	add.w	ip, r1, #20
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8dc 0000 	ldr.w	r0, [ip]
 80064ae:	b281      	uxth	r1, r0
 80064b0:	fb02 7101 	mla	r1, r2, r1, r7
 80064b4:	0c0f      	lsrs	r7, r1, #16
 80064b6:	0c00      	lsrs	r0, r0, #16
 80064b8:	fb02 7000 	mla	r0, r2, r0, r7
 80064bc:	b289      	uxth	r1, r1
 80064be:	3301      	adds	r3, #1
 80064c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80064c4:	429d      	cmp	r5, r3
 80064c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80064ca:	f84c 1b04 	str.w	r1, [ip], #4
 80064ce:	dcec      	bgt.n	80064aa <__multadd+0x12>
 80064d0:	b1d7      	cbz	r7, 8006508 <__multadd+0x70>
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dc12      	bgt.n	80064fe <__multadd+0x66>
 80064d8:	6861      	ldr	r1, [r4, #4]
 80064da:	4630      	mov	r0, r6
 80064dc:	3101      	adds	r1, #1
 80064de:	f7ff ff90 	bl	8006402 <_Balloc>
 80064e2:	6922      	ldr	r2, [r4, #16]
 80064e4:	3202      	adds	r2, #2
 80064e6:	f104 010c 	add.w	r1, r4, #12
 80064ea:	4680      	mov	r8, r0
 80064ec:	0092      	lsls	r2, r2, #2
 80064ee:	300c      	adds	r0, #12
 80064f0:	f7ff ff7c 	bl	80063ec <memcpy>
 80064f4:	4621      	mov	r1, r4
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7ff ffb7 	bl	800646a <_Bfree>
 80064fc:	4644      	mov	r4, r8
 80064fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006502:	3501      	adds	r5, #1
 8006504:	615f      	str	r7, [r3, #20]
 8006506:	6125      	str	r5, [r4, #16]
 8006508:	4620      	mov	r0, r4
 800650a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800650e <__hi0bits>:
 800650e:	0c02      	lsrs	r2, r0, #16
 8006510:	0412      	lsls	r2, r2, #16
 8006512:	4603      	mov	r3, r0
 8006514:	b9b2      	cbnz	r2, 8006544 <__hi0bits+0x36>
 8006516:	0403      	lsls	r3, r0, #16
 8006518:	2010      	movs	r0, #16
 800651a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800651e:	bf04      	itt	eq
 8006520:	021b      	lsleq	r3, r3, #8
 8006522:	3008      	addeq	r0, #8
 8006524:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006528:	bf04      	itt	eq
 800652a:	011b      	lsleq	r3, r3, #4
 800652c:	3004      	addeq	r0, #4
 800652e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006532:	bf04      	itt	eq
 8006534:	009b      	lsleq	r3, r3, #2
 8006536:	3002      	addeq	r0, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	db06      	blt.n	800654a <__hi0bits+0x3c>
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	d503      	bpl.n	8006548 <__hi0bits+0x3a>
 8006540:	3001      	adds	r0, #1
 8006542:	4770      	bx	lr
 8006544:	2000      	movs	r0, #0
 8006546:	e7e8      	b.n	800651a <__hi0bits+0xc>
 8006548:	2020      	movs	r0, #32
 800654a:	4770      	bx	lr

0800654c <__lo0bits>:
 800654c:	6803      	ldr	r3, [r0, #0]
 800654e:	f013 0207 	ands.w	r2, r3, #7
 8006552:	4601      	mov	r1, r0
 8006554:	d00b      	beq.n	800656e <__lo0bits+0x22>
 8006556:	07da      	lsls	r2, r3, #31
 8006558:	d423      	bmi.n	80065a2 <__lo0bits+0x56>
 800655a:	0798      	lsls	r0, r3, #30
 800655c:	bf49      	itett	mi
 800655e:	085b      	lsrmi	r3, r3, #1
 8006560:	089b      	lsrpl	r3, r3, #2
 8006562:	2001      	movmi	r0, #1
 8006564:	600b      	strmi	r3, [r1, #0]
 8006566:	bf5c      	itt	pl
 8006568:	600b      	strpl	r3, [r1, #0]
 800656a:	2002      	movpl	r0, #2
 800656c:	4770      	bx	lr
 800656e:	b298      	uxth	r0, r3
 8006570:	b9a8      	cbnz	r0, 800659e <__lo0bits+0x52>
 8006572:	0c1b      	lsrs	r3, r3, #16
 8006574:	2010      	movs	r0, #16
 8006576:	f013 0fff 	tst.w	r3, #255	; 0xff
 800657a:	bf04      	itt	eq
 800657c:	0a1b      	lsreq	r3, r3, #8
 800657e:	3008      	addeq	r0, #8
 8006580:	071a      	lsls	r2, r3, #28
 8006582:	bf04      	itt	eq
 8006584:	091b      	lsreq	r3, r3, #4
 8006586:	3004      	addeq	r0, #4
 8006588:	079a      	lsls	r2, r3, #30
 800658a:	bf04      	itt	eq
 800658c:	089b      	lsreq	r3, r3, #2
 800658e:	3002      	addeq	r0, #2
 8006590:	07da      	lsls	r2, r3, #31
 8006592:	d402      	bmi.n	800659a <__lo0bits+0x4e>
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	d006      	beq.n	80065a6 <__lo0bits+0x5a>
 8006598:	3001      	adds	r0, #1
 800659a:	600b      	str	r3, [r1, #0]
 800659c:	4770      	bx	lr
 800659e:	4610      	mov	r0, r2
 80065a0:	e7e9      	b.n	8006576 <__lo0bits+0x2a>
 80065a2:	2000      	movs	r0, #0
 80065a4:	4770      	bx	lr
 80065a6:	2020      	movs	r0, #32
 80065a8:	4770      	bx	lr

080065aa <__i2b>:
 80065aa:	b510      	push	{r4, lr}
 80065ac:	460c      	mov	r4, r1
 80065ae:	2101      	movs	r1, #1
 80065b0:	f7ff ff27 	bl	8006402 <_Balloc>
 80065b4:	2201      	movs	r2, #1
 80065b6:	6144      	str	r4, [r0, #20]
 80065b8:	6102      	str	r2, [r0, #16]
 80065ba:	bd10      	pop	{r4, pc}

080065bc <__multiply>:
 80065bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	4614      	mov	r4, r2
 80065c2:	690a      	ldr	r2, [r1, #16]
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bfb8      	it	lt
 80065ca:	460b      	movlt	r3, r1
 80065cc:	4688      	mov	r8, r1
 80065ce:	bfbc      	itt	lt
 80065d0:	46a0      	movlt	r8, r4
 80065d2:	461c      	movlt	r4, r3
 80065d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065e4:	eb07 0609 	add.w	r6, r7, r9
 80065e8:	42b3      	cmp	r3, r6
 80065ea:	bfb8      	it	lt
 80065ec:	3101      	addlt	r1, #1
 80065ee:	f7ff ff08 	bl	8006402 <_Balloc>
 80065f2:	f100 0514 	add.w	r5, r0, #20
 80065f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80065fa:	462b      	mov	r3, r5
 80065fc:	2200      	movs	r2, #0
 80065fe:	4573      	cmp	r3, lr
 8006600:	d316      	bcc.n	8006630 <__multiply+0x74>
 8006602:	f104 0214 	add.w	r2, r4, #20
 8006606:	f108 0114 	add.w	r1, r8, #20
 800660a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800660e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	9b00      	ldr	r3, [sp, #0]
 8006616:	9201      	str	r2, [sp, #4]
 8006618:	4293      	cmp	r3, r2
 800661a:	d80c      	bhi.n	8006636 <__multiply+0x7a>
 800661c:	2e00      	cmp	r6, #0
 800661e:	dd03      	ble.n	8006628 <__multiply+0x6c>
 8006620:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05d      	beq.n	80066e4 <__multiply+0x128>
 8006628:	6106      	str	r6, [r0, #16]
 800662a:	b003      	add	sp, #12
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	f843 2b04 	str.w	r2, [r3], #4
 8006634:	e7e3      	b.n	80065fe <__multiply+0x42>
 8006636:	f8b2 b000 	ldrh.w	fp, [r2]
 800663a:	f1bb 0f00 	cmp.w	fp, #0
 800663e:	d023      	beq.n	8006688 <__multiply+0xcc>
 8006640:	4689      	mov	r9, r1
 8006642:	46ac      	mov	ip, r5
 8006644:	f04f 0800 	mov.w	r8, #0
 8006648:	f859 4b04 	ldr.w	r4, [r9], #4
 800664c:	f8dc a000 	ldr.w	sl, [ip]
 8006650:	b2a3      	uxth	r3, r4
 8006652:	fa1f fa8a 	uxth.w	sl, sl
 8006656:	fb0b a303 	mla	r3, fp, r3, sl
 800665a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800665e:	f8dc 4000 	ldr.w	r4, [ip]
 8006662:	4443      	add	r3, r8
 8006664:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006668:	fb0b 840a 	mla	r4, fp, sl, r8
 800666c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006670:	46e2      	mov	sl, ip
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006678:	454f      	cmp	r7, r9
 800667a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800667e:	f84a 3b04 	str.w	r3, [sl], #4
 8006682:	d82b      	bhi.n	80066dc <__multiply+0x120>
 8006684:	f8cc 8004 	str.w	r8, [ip, #4]
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800668e:	3204      	adds	r2, #4
 8006690:	f1ba 0f00 	cmp.w	sl, #0
 8006694:	d020      	beq.n	80066d8 <__multiply+0x11c>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	4689      	mov	r9, r1
 800669a:	46a8      	mov	r8, r5
 800669c:	f04f 0b00 	mov.w	fp, #0
 80066a0:	f8b9 c000 	ldrh.w	ip, [r9]
 80066a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80066a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80066ac:	445c      	add	r4, fp
 80066ae:	46c4      	mov	ip, r8
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80066b6:	f84c 3b04 	str.w	r3, [ip], #4
 80066ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80066be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	fb0a b303 	mla	r3, sl, r3, fp
 80066c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80066cc:	454f      	cmp	r7, r9
 80066ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80066d2:	d805      	bhi.n	80066e0 <__multiply+0x124>
 80066d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80066d8:	3504      	adds	r5, #4
 80066da:	e79b      	b.n	8006614 <__multiply+0x58>
 80066dc:	46d4      	mov	ip, sl
 80066de:	e7b3      	b.n	8006648 <__multiply+0x8c>
 80066e0:	46e0      	mov	r8, ip
 80066e2:	e7dd      	b.n	80066a0 <__multiply+0xe4>
 80066e4:	3e01      	subs	r6, #1
 80066e6:	e799      	b.n	800661c <__multiply+0x60>

080066e8 <__pow5mult>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	4615      	mov	r5, r2
 80066ee:	f012 0203 	ands.w	r2, r2, #3
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	d007      	beq.n	8006708 <__pow5mult+0x20>
 80066f8:	3a01      	subs	r2, #1
 80066fa:	4c21      	ldr	r4, [pc, #132]	; (8006780 <__pow5mult+0x98>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006702:	f7ff fec9 	bl	8006498 <__multadd>
 8006706:	4607      	mov	r7, r0
 8006708:	10ad      	asrs	r5, r5, #2
 800670a:	d035      	beq.n	8006778 <__pow5mult+0x90>
 800670c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800670e:	b93c      	cbnz	r4, 8006720 <__pow5mult+0x38>
 8006710:	2010      	movs	r0, #16
 8006712:	f7ff fe63 	bl	80063dc <malloc>
 8006716:	6270      	str	r0, [r6, #36]	; 0x24
 8006718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800671c:	6004      	str	r4, [r0, #0]
 800671e:	60c4      	str	r4, [r0, #12]
 8006720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006728:	b94c      	cbnz	r4, 800673e <__pow5mult+0x56>
 800672a:	f240 2171 	movw	r1, #625	; 0x271
 800672e:	4630      	mov	r0, r6
 8006730:	f7ff ff3b 	bl	80065aa <__i2b>
 8006734:	2300      	movs	r3, #0
 8006736:	f8c8 0008 	str.w	r0, [r8, #8]
 800673a:	4604      	mov	r4, r0
 800673c:	6003      	str	r3, [r0, #0]
 800673e:	f04f 0800 	mov.w	r8, #0
 8006742:	07eb      	lsls	r3, r5, #31
 8006744:	d50a      	bpl.n	800675c <__pow5mult+0x74>
 8006746:	4639      	mov	r1, r7
 8006748:	4622      	mov	r2, r4
 800674a:	4630      	mov	r0, r6
 800674c:	f7ff ff36 	bl	80065bc <__multiply>
 8006750:	4639      	mov	r1, r7
 8006752:	4681      	mov	r9, r0
 8006754:	4630      	mov	r0, r6
 8006756:	f7ff fe88 	bl	800646a <_Bfree>
 800675a:	464f      	mov	r7, r9
 800675c:	106d      	asrs	r5, r5, #1
 800675e:	d00b      	beq.n	8006778 <__pow5mult+0x90>
 8006760:	6820      	ldr	r0, [r4, #0]
 8006762:	b938      	cbnz	r0, 8006774 <__pow5mult+0x8c>
 8006764:	4622      	mov	r2, r4
 8006766:	4621      	mov	r1, r4
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff ff27 	bl	80065bc <__multiply>
 800676e:	6020      	str	r0, [r4, #0]
 8006770:	f8c0 8000 	str.w	r8, [r0]
 8006774:	4604      	mov	r4, r0
 8006776:	e7e4      	b.n	8006742 <__pow5mult+0x5a>
 8006778:	4638      	mov	r0, r7
 800677a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677e:	bf00      	nop
 8006780:	08007048 	.word	0x08007048

08006784 <__lshift>:
 8006784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	460c      	mov	r4, r1
 800678a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	6849      	ldr	r1, [r1, #4]
 8006792:	eb0a 0903 	add.w	r9, sl, r3
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	4607      	mov	r7, r0
 800679a:	4616      	mov	r6, r2
 800679c:	f109 0501 	add.w	r5, r9, #1
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	db32      	blt.n	800680a <__lshift+0x86>
 80067a4:	4638      	mov	r0, r7
 80067a6:	f7ff fe2c 	bl	8006402 <_Balloc>
 80067aa:	2300      	movs	r3, #0
 80067ac:	4680      	mov	r8, r0
 80067ae:	f100 0114 	add.w	r1, r0, #20
 80067b2:	461a      	mov	r2, r3
 80067b4:	4553      	cmp	r3, sl
 80067b6:	db2b      	blt.n	8006810 <__lshift+0x8c>
 80067b8:	6920      	ldr	r0, [r4, #16]
 80067ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067be:	f104 0314 	add.w	r3, r4, #20
 80067c2:	f016 021f 	ands.w	r2, r6, #31
 80067c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067ce:	d025      	beq.n	800681c <__lshift+0x98>
 80067d0:	f1c2 0e20 	rsb	lr, r2, #32
 80067d4:	2000      	movs	r0, #0
 80067d6:	681e      	ldr	r6, [r3, #0]
 80067d8:	468a      	mov	sl, r1
 80067da:	4096      	lsls	r6, r2
 80067dc:	4330      	orrs	r0, r6
 80067de:	f84a 0b04 	str.w	r0, [sl], #4
 80067e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80067e6:	459c      	cmp	ip, r3
 80067e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80067ec:	d814      	bhi.n	8006818 <__lshift+0x94>
 80067ee:	6048      	str	r0, [r1, #4]
 80067f0:	b108      	cbz	r0, 80067f6 <__lshift+0x72>
 80067f2:	f109 0502 	add.w	r5, r9, #2
 80067f6:	3d01      	subs	r5, #1
 80067f8:	4638      	mov	r0, r7
 80067fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80067fe:	4621      	mov	r1, r4
 8006800:	f7ff fe33 	bl	800646a <_Bfree>
 8006804:	4640      	mov	r0, r8
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	3101      	adds	r1, #1
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	e7c7      	b.n	80067a0 <__lshift+0x1c>
 8006810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006814:	3301      	adds	r3, #1
 8006816:	e7cd      	b.n	80067b4 <__lshift+0x30>
 8006818:	4651      	mov	r1, sl
 800681a:	e7dc      	b.n	80067d6 <__lshift+0x52>
 800681c:	3904      	subs	r1, #4
 800681e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006822:	f841 2f04 	str.w	r2, [r1, #4]!
 8006826:	459c      	cmp	ip, r3
 8006828:	d8f9      	bhi.n	800681e <__lshift+0x9a>
 800682a:	e7e4      	b.n	80067f6 <__lshift+0x72>

0800682c <__mcmp>:
 800682c:	6903      	ldr	r3, [r0, #16]
 800682e:	690a      	ldr	r2, [r1, #16]
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	b530      	push	{r4, r5, lr}
 8006834:	d10c      	bne.n	8006850 <__mcmp+0x24>
 8006836:	0092      	lsls	r2, r2, #2
 8006838:	3014      	adds	r0, #20
 800683a:	3114      	adds	r1, #20
 800683c:	1884      	adds	r4, r0, r2
 800683e:	4411      	add	r1, r2
 8006840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006848:	4295      	cmp	r5, r2
 800684a:	d003      	beq.n	8006854 <__mcmp+0x28>
 800684c:	d305      	bcc.n	800685a <__mcmp+0x2e>
 800684e:	2301      	movs	r3, #1
 8006850:	4618      	mov	r0, r3
 8006852:	bd30      	pop	{r4, r5, pc}
 8006854:	42a0      	cmp	r0, r4
 8006856:	d3f3      	bcc.n	8006840 <__mcmp+0x14>
 8006858:	e7fa      	b.n	8006850 <__mcmp+0x24>
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	e7f7      	b.n	8006850 <__mcmp+0x24>

08006860 <__mdiff>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	460d      	mov	r5, r1
 8006866:	4607      	mov	r7, r0
 8006868:	4611      	mov	r1, r2
 800686a:	4628      	mov	r0, r5
 800686c:	4614      	mov	r4, r2
 800686e:	f7ff ffdd 	bl	800682c <__mcmp>
 8006872:	1e06      	subs	r6, r0, #0
 8006874:	d108      	bne.n	8006888 <__mdiff+0x28>
 8006876:	4631      	mov	r1, r6
 8006878:	4638      	mov	r0, r7
 800687a:	f7ff fdc2 	bl	8006402 <_Balloc>
 800687e:	2301      	movs	r3, #1
 8006880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	bfa4      	itt	ge
 800688a:	4623      	movge	r3, r4
 800688c:	462c      	movge	r4, r5
 800688e:	4638      	mov	r0, r7
 8006890:	6861      	ldr	r1, [r4, #4]
 8006892:	bfa6      	itte	ge
 8006894:	461d      	movge	r5, r3
 8006896:	2600      	movge	r6, #0
 8006898:	2601      	movlt	r6, #1
 800689a:	f7ff fdb2 	bl	8006402 <_Balloc>
 800689e:	692b      	ldr	r3, [r5, #16]
 80068a0:	60c6      	str	r6, [r0, #12]
 80068a2:	6926      	ldr	r6, [r4, #16]
 80068a4:	f105 0914 	add.w	r9, r5, #20
 80068a8:	f104 0214 	add.w	r2, r4, #20
 80068ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80068b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80068b4:	f100 0514 	add.w	r5, r0, #20
 80068b8:	f04f 0e00 	mov.w	lr, #0
 80068bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80068c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80068c4:	fa1e f18a 	uxtah	r1, lr, sl
 80068c8:	b2a3      	uxth	r3, r4
 80068ca:	1ac9      	subs	r1, r1, r3
 80068cc:	0c23      	lsrs	r3, r4, #16
 80068ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80068d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068d6:	b289      	uxth	r1, r1
 80068d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80068dc:	45c8      	cmp	r8, r9
 80068de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068e2:	4694      	mov	ip, r2
 80068e4:	f845 3b04 	str.w	r3, [r5], #4
 80068e8:	d8e8      	bhi.n	80068bc <__mdiff+0x5c>
 80068ea:	45bc      	cmp	ip, r7
 80068ec:	d304      	bcc.n	80068f8 <__mdiff+0x98>
 80068ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80068f2:	b183      	cbz	r3, 8006916 <__mdiff+0xb6>
 80068f4:	6106      	str	r6, [r0, #16]
 80068f6:	e7c5      	b.n	8006884 <__mdiff+0x24>
 80068f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068fc:	fa1e f381 	uxtah	r3, lr, r1
 8006900:	141a      	asrs	r2, r3, #16
 8006902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006906:	b29b      	uxth	r3, r3
 8006908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800690c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006910:	f845 3b04 	str.w	r3, [r5], #4
 8006914:	e7e9      	b.n	80068ea <__mdiff+0x8a>
 8006916:	3e01      	subs	r6, #1
 8006918:	e7e9      	b.n	80068ee <__mdiff+0x8e>

0800691a <__d2b>:
 800691a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800691e:	460e      	mov	r6, r1
 8006920:	2101      	movs	r1, #1
 8006922:	ec59 8b10 	vmov	r8, r9, d0
 8006926:	4615      	mov	r5, r2
 8006928:	f7ff fd6b 	bl	8006402 <_Balloc>
 800692c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006930:	4607      	mov	r7, r0
 8006932:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006936:	bb34      	cbnz	r4, 8006986 <__d2b+0x6c>
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	f1b8 0300 	subs.w	r3, r8, #0
 800693e:	d027      	beq.n	8006990 <__d2b+0x76>
 8006940:	a802      	add	r0, sp, #8
 8006942:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006946:	f7ff fe01 	bl	800654c <__lo0bits>
 800694a:	9900      	ldr	r1, [sp, #0]
 800694c:	b1f0      	cbz	r0, 800698c <__d2b+0x72>
 800694e:	9a01      	ldr	r2, [sp, #4]
 8006950:	f1c0 0320 	rsb	r3, r0, #32
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	430b      	orrs	r3, r1
 800695a:	40c2      	lsrs	r2, r0
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9b01      	ldr	r3, [sp, #4]
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf14      	ite	ne
 8006968:	2102      	movne	r1, #2
 800696a:	2101      	moveq	r1, #1
 800696c:	6139      	str	r1, [r7, #16]
 800696e:	b1c4      	cbz	r4, 80069a2 <__d2b+0x88>
 8006970:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006974:	4404      	add	r4, r0
 8006976:	6034      	str	r4, [r6, #0]
 8006978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800697c:	6028      	str	r0, [r5, #0]
 800697e:	4638      	mov	r0, r7
 8006980:	b003      	add	sp, #12
 8006982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698a:	e7d5      	b.n	8006938 <__d2b+0x1e>
 800698c:	6179      	str	r1, [r7, #20]
 800698e:	e7e7      	b.n	8006960 <__d2b+0x46>
 8006990:	a801      	add	r0, sp, #4
 8006992:	f7ff fddb 	bl	800654c <__lo0bits>
 8006996:	9b01      	ldr	r3, [sp, #4]
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	2101      	movs	r1, #1
 800699c:	6139      	str	r1, [r7, #16]
 800699e:	3020      	adds	r0, #32
 80069a0:	e7e5      	b.n	800696e <__d2b+0x54>
 80069a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80069a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069aa:	6030      	str	r0, [r6, #0]
 80069ac:	6918      	ldr	r0, [r3, #16]
 80069ae:	f7ff fdae 	bl	800650e <__hi0bits>
 80069b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069b6:	e7e1      	b.n	800697c <__d2b+0x62>

080069b8 <_calloc_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	fb02 f401 	mul.w	r4, r2, r1
 80069be:	4621      	mov	r1, r4
 80069c0:	f000 f856 	bl	8006a70 <_malloc_r>
 80069c4:	4605      	mov	r5, r0
 80069c6:	b118      	cbz	r0, 80069d0 <_calloc_r+0x18>
 80069c8:	4622      	mov	r2, r4
 80069ca:	2100      	movs	r1, #0
 80069cc:	f7fe fa30 	bl	8004e30 <memset>
 80069d0:	4628      	mov	r0, r5
 80069d2:	bd38      	pop	{r3, r4, r5, pc}

080069d4 <_free_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4605      	mov	r5, r0
 80069d8:	2900      	cmp	r1, #0
 80069da:	d045      	beq.n	8006a68 <_free_r+0x94>
 80069dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e0:	1f0c      	subs	r4, r1, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bfb8      	it	lt
 80069e6:	18e4      	addlt	r4, r4, r3
 80069e8:	f000 fa29 	bl	8006e3e <__malloc_lock>
 80069ec:	4a1f      	ldr	r2, [pc, #124]	; (8006a6c <_free_r+0x98>)
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	4610      	mov	r0, r2
 80069f2:	b933      	cbnz	r3, 8006a02 <_free_r+0x2e>
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6014      	str	r4, [r2, #0]
 80069f8:	4628      	mov	r0, r5
 80069fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069fe:	f000 ba1f 	b.w	8006e40 <__malloc_unlock>
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	d90c      	bls.n	8006a20 <_free_r+0x4c>
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	1862      	adds	r2, r4, r1
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	bf04      	itt	eq
 8006a0e:	681a      	ldreq	r2, [r3, #0]
 8006a10:	685b      	ldreq	r3, [r3, #4]
 8006a12:	6063      	str	r3, [r4, #4]
 8006a14:	bf04      	itt	eq
 8006a16:	1852      	addeq	r2, r2, r1
 8006a18:	6022      	streq	r2, [r4, #0]
 8006a1a:	6004      	str	r4, [r0, #0]
 8006a1c:	e7ec      	b.n	80069f8 <_free_r+0x24>
 8006a1e:	4613      	mov	r3, r2
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	b10a      	cbz	r2, 8006a28 <_free_r+0x54>
 8006a24:	42a2      	cmp	r2, r4
 8006a26:	d9fa      	bls.n	8006a1e <_free_r+0x4a>
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	1858      	adds	r0, r3, r1
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d10b      	bne.n	8006a48 <_free_r+0x74>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	4401      	add	r1, r0
 8006a34:	1858      	adds	r0, r3, r1
 8006a36:	4282      	cmp	r2, r0
 8006a38:	6019      	str	r1, [r3, #0]
 8006a3a:	d1dd      	bne.n	80069f8 <_free_r+0x24>
 8006a3c:	6810      	ldr	r0, [r2, #0]
 8006a3e:	6852      	ldr	r2, [r2, #4]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	4401      	add	r1, r0
 8006a44:	6019      	str	r1, [r3, #0]
 8006a46:	e7d7      	b.n	80069f8 <_free_r+0x24>
 8006a48:	d902      	bls.n	8006a50 <_free_r+0x7c>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	e7d3      	b.n	80069f8 <_free_r+0x24>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428a      	cmp	r2, r1
 8006a56:	bf04      	itt	eq
 8006a58:	6811      	ldreq	r1, [r2, #0]
 8006a5a:	6852      	ldreq	r2, [r2, #4]
 8006a5c:	6062      	str	r2, [r4, #4]
 8006a5e:	bf04      	itt	eq
 8006a60:	1809      	addeq	r1, r1, r0
 8006a62:	6021      	streq	r1, [r4, #0]
 8006a64:	605c      	str	r4, [r3, #4]
 8006a66:	e7c7      	b.n	80069f8 <_free_r+0x24>
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200001fc 	.word	0x200001fc

08006a70 <_malloc_r>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	1ccd      	adds	r5, r1, #3
 8006a74:	f025 0503 	bic.w	r5, r5, #3
 8006a78:	3508      	adds	r5, #8
 8006a7a:	2d0c      	cmp	r5, #12
 8006a7c:	bf38      	it	cc
 8006a7e:	250c      	movcc	r5, #12
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	4606      	mov	r6, r0
 8006a84:	db01      	blt.n	8006a8a <_malloc_r+0x1a>
 8006a86:	42a9      	cmp	r1, r5
 8006a88:	d903      	bls.n	8006a92 <_malloc_r+0x22>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	2000      	movs	r0, #0
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	f000 f9d4 	bl	8006e3e <__malloc_lock>
 8006a96:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <_malloc_r+0xac>)
 8006a98:	6814      	ldr	r4, [r2, #0]
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	b991      	cbnz	r1, 8006ac4 <_malloc_r+0x54>
 8006a9e:	4c20      	ldr	r4, [pc, #128]	; (8006b20 <_malloc_r+0xb0>)
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	b91b      	cbnz	r3, 8006aac <_malloc_r+0x3c>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 f98f 	bl	8006dc8 <_sbrk_r>
 8006aaa:	6020      	str	r0, [r4, #0]
 8006aac:	4629      	mov	r1, r5
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 f98a 	bl	8006dc8 <_sbrk_r>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d124      	bne.n	8006b02 <_malloc_r+0x92>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	4630      	mov	r0, r6
 8006abe:	f000 f9bf 	bl	8006e40 <__malloc_unlock>
 8006ac2:	e7e4      	b.n	8006a8e <_malloc_r+0x1e>
 8006ac4:	680b      	ldr	r3, [r1, #0]
 8006ac6:	1b5b      	subs	r3, r3, r5
 8006ac8:	d418      	bmi.n	8006afc <_malloc_r+0x8c>
 8006aca:	2b0b      	cmp	r3, #11
 8006acc:	d90f      	bls.n	8006aee <_malloc_r+0x7e>
 8006ace:	600b      	str	r3, [r1, #0]
 8006ad0:	50cd      	str	r5, [r1, r3]
 8006ad2:	18cc      	adds	r4, r1, r3
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f9b3 	bl	8006e40 <__malloc_unlock>
 8006ada:	f104 000b 	add.w	r0, r4, #11
 8006ade:	1d23      	adds	r3, r4, #4
 8006ae0:	f020 0007 	bic.w	r0, r0, #7
 8006ae4:	1ac3      	subs	r3, r0, r3
 8006ae6:	d0d3      	beq.n	8006a90 <_malloc_r+0x20>
 8006ae8:	425a      	negs	r2, r3
 8006aea:	50e2      	str	r2, [r4, r3]
 8006aec:	e7d0      	b.n	8006a90 <_malloc_r+0x20>
 8006aee:	428c      	cmp	r4, r1
 8006af0:	684b      	ldr	r3, [r1, #4]
 8006af2:	bf16      	itet	ne
 8006af4:	6063      	strne	r3, [r4, #4]
 8006af6:	6013      	streq	r3, [r2, #0]
 8006af8:	460c      	movne	r4, r1
 8006afa:	e7eb      	b.n	8006ad4 <_malloc_r+0x64>
 8006afc:	460c      	mov	r4, r1
 8006afe:	6849      	ldr	r1, [r1, #4]
 8006b00:	e7cc      	b.n	8006a9c <_malloc_r+0x2c>
 8006b02:	1cc4      	adds	r4, r0, #3
 8006b04:	f024 0403 	bic.w	r4, r4, #3
 8006b08:	42a0      	cmp	r0, r4
 8006b0a:	d005      	beq.n	8006b18 <_malloc_r+0xa8>
 8006b0c:	1a21      	subs	r1, r4, r0
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 f95a 	bl	8006dc8 <_sbrk_r>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0cf      	beq.n	8006ab8 <_malloc_r+0x48>
 8006b18:	6025      	str	r5, [r4, #0]
 8006b1a:	e7db      	b.n	8006ad4 <_malloc_r+0x64>
 8006b1c:	200001fc 	.word	0x200001fc
 8006b20:	20000200 	.word	0x20000200

08006b24 <__ssputs_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	688e      	ldr	r6, [r1, #8]
 8006b2a:	429e      	cmp	r6, r3
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	4690      	mov	r8, r2
 8006b32:	4699      	mov	r9, r3
 8006b34:	d837      	bhi.n	8006ba6 <__ssputs_r+0x82>
 8006b36:	898a      	ldrh	r2, [r1, #12]
 8006b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b3c:	d031      	beq.n	8006ba2 <__ssputs_r+0x7e>
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	6909      	ldr	r1, [r1, #16]
 8006b42:	1a6f      	subs	r7, r5, r1
 8006b44:	6965      	ldr	r5, [r4, #20]
 8006b46:	2302      	movs	r3, #2
 8006b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b50:	f109 0301 	add.w	r3, r9, #1
 8006b54:	443b      	add	r3, r7
 8006b56:	429d      	cmp	r5, r3
 8006b58:	bf38      	it	cc
 8006b5a:	461d      	movcc	r5, r3
 8006b5c:	0553      	lsls	r3, r2, #21
 8006b5e:	d530      	bpl.n	8006bc2 <__ssputs_r+0x9e>
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7ff ff85 	bl	8006a70 <_malloc_r>
 8006b66:	4606      	mov	r6, r0
 8006b68:	b950      	cbnz	r0, 8006b80 <__ssputs_r+0x5c>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	f8ca 3000 	str.w	r3, [sl]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b80:	463a      	mov	r2, r7
 8006b82:	6921      	ldr	r1, [r4, #16]
 8006b84:	f7ff fc32 	bl	80063ec <memcpy>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	6126      	str	r6, [r4, #16]
 8006b96:	6165      	str	r5, [r4, #20]
 8006b98:	443e      	add	r6, r7
 8006b9a:	1bed      	subs	r5, r5, r7
 8006b9c:	6026      	str	r6, [r4, #0]
 8006b9e:	60a5      	str	r5, [r4, #8]
 8006ba0:	464e      	mov	r6, r9
 8006ba2:	454e      	cmp	r6, r9
 8006ba4:	d900      	bls.n	8006ba8 <__ssputs_r+0x84>
 8006ba6:	464e      	mov	r6, r9
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4641      	mov	r1, r8
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	f000 f92d 	bl	8006e0c <memmove>
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	1b9b      	subs	r3, r3, r6
 8006bb6:	60a3      	str	r3, [r4, #8]
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	441e      	add	r6, r3
 8006bbc:	6026      	str	r6, [r4, #0]
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7dc      	b.n	8006b7c <__ssputs_r+0x58>
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	f000 f93d 	bl	8006e42 <_realloc_r>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d1e2      	bne.n	8006b94 <__ssputs_r+0x70>
 8006bce:	6921      	ldr	r1, [r4, #16]
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f7ff feff 	bl	80069d4 <_free_r>
 8006bd6:	e7c8      	b.n	8006b6a <__ssputs_r+0x46>

08006bd8 <_svfiprintf_r>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	461d      	mov	r5, r3
 8006bde:	898b      	ldrh	r3, [r1, #12]
 8006be0:	061f      	lsls	r7, r3, #24
 8006be2:	b09d      	sub	sp, #116	; 0x74
 8006be4:	4680      	mov	r8, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	4616      	mov	r6, r2
 8006bea:	d50f      	bpl.n	8006c0c <_svfiprintf_r+0x34>
 8006bec:	690b      	ldr	r3, [r1, #16]
 8006bee:	b96b      	cbnz	r3, 8006c0c <_svfiprintf_r+0x34>
 8006bf0:	2140      	movs	r1, #64	; 0x40
 8006bf2:	f7ff ff3d 	bl	8006a70 <_malloc_r>
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	6120      	str	r0, [r4, #16]
 8006bfa:	b928      	cbnz	r0, 8006c08 <_svfiprintf_r+0x30>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	f8c8 3000 	str.w	r3, [r8]
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295
 8006c06:	e0c8      	b.n	8006d9a <_svfiprintf_r+0x1c2>
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	6163      	str	r3, [r4, #20]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	2320      	movs	r3, #32
 8006c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c16:	2330      	movs	r3, #48	; 0x30
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1c:	9503      	str	r5, [sp, #12]
 8006c1e:	f04f 0b01 	mov.w	fp, #1
 8006c22:	4637      	mov	r7, r6
 8006c24:	463d      	mov	r5, r7
 8006c26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c2a:	b10b      	cbz	r3, 8006c30 <_svfiprintf_r+0x58>
 8006c2c:	2b25      	cmp	r3, #37	; 0x25
 8006c2e:	d13e      	bne.n	8006cae <_svfiprintf_r+0xd6>
 8006c30:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c34:	d00b      	beq.n	8006c4e <_svfiprintf_r+0x76>
 8006c36:	4653      	mov	r3, sl
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	f7ff ff71 	bl	8006b24 <__ssputs_r>
 8006c42:	3001      	adds	r0, #1
 8006c44:	f000 80a4 	beq.w	8006d90 <_svfiprintf_r+0x1b8>
 8006c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4a:	4453      	add	r3, sl
 8006c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4e:	783b      	ldrb	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 809d 	beq.w	8006d90 <_svfiprintf_r+0x1b8>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c68:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6a:	462f      	mov	r7, r5
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c72:	4850      	ldr	r0, [pc, #320]	; (8006db4 <_svfiprintf_r+0x1dc>)
 8006c74:	f7f9 fab4 	bl	80001e0 <memchr>
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	b9d0      	cbnz	r0, 8006cb2 <_svfiprintf_r+0xda>
 8006c7c:	06d9      	lsls	r1, r3, #27
 8006c7e:	bf44      	itt	mi
 8006c80:	2220      	movmi	r2, #32
 8006c82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c86:	071a      	lsls	r2, r3, #28
 8006c88:	bf44      	itt	mi
 8006c8a:	222b      	movmi	r2, #43	; 0x2b
 8006c8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c90:	782a      	ldrb	r2, [r5, #0]
 8006c92:	2a2a      	cmp	r2, #42	; 0x2a
 8006c94:	d015      	beq.n	8006cc2 <_svfiprintf_r+0xea>
 8006c96:	9a07      	ldr	r2, [sp, #28]
 8006c98:	462f      	mov	r7, r5
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	250a      	movs	r5, #10
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca4:	3b30      	subs	r3, #48	; 0x30
 8006ca6:	2b09      	cmp	r3, #9
 8006ca8:	d94d      	bls.n	8006d46 <_svfiprintf_r+0x16e>
 8006caa:	b1b8      	cbz	r0, 8006cdc <_svfiprintf_r+0x104>
 8006cac:	e00f      	b.n	8006cce <_svfiprintf_r+0xf6>
 8006cae:	462f      	mov	r7, r5
 8006cb0:	e7b8      	b.n	8006c24 <_svfiprintf_r+0x4c>
 8006cb2:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <_svfiprintf_r+0x1dc>)
 8006cb4:	1a80      	subs	r0, r0, r2
 8006cb6:	fa0b f000 	lsl.w	r0, fp, r0
 8006cba:	4318      	orrs	r0, r3
 8006cbc:	9004      	str	r0, [sp, #16]
 8006cbe:	463d      	mov	r5, r7
 8006cc0:	e7d3      	b.n	8006c6a <_svfiprintf_r+0x92>
 8006cc2:	9a03      	ldr	r2, [sp, #12]
 8006cc4:	1d11      	adds	r1, r2, #4
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	9103      	str	r1, [sp, #12]
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	db01      	blt.n	8006cd2 <_svfiprintf_r+0xfa>
 8006cce:	9207      	str	r2, [sp, #28]
 8006cd0:	e004      	b.n	8006cdc <_svfiprintf_r+0x104>
 8006cd2:	4252      	negs	r2, r2
 8006cd4:	f043 0302 	orr.w	r3, r3, #2
 8006cd8:	9207      	str	r2, [sp, #28]
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	783b      	ldrb	r3, [r7, #0]
 8006cde:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce0:	d10c      	bne.n	8006cfc <_svfiprintf_r+0x124>
 8006ce2:	787b      	ldrb	r3, [r7, #1]
 8006ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce6:	d133      	bne.n	8006d50 <_svfiprintf_r+0x178>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9203      	str	r2, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfb8      	it	lt
 8006cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cf8:	3702      	adds	r7, #2
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	4d2e      	ldr	r5, [pc, #184]	; (8006db8 <_svfiprintf_r+0x1e0>)
 8006cfe:	7839      	ldrb	r1, [r7, #0]
 8006d00:	2203      	movs	r2, #3
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7f9 fa6c 	bl	80001e0 <memchr>
 8006d08:	b138      	cbz	r0, 8006d1a <_svfiprintf_r+0x142>
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	1b40      	subs	r0, r0, r5
 8006d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	4303      	orrs	r3, r0
 8006d16:	3701      	adds	r7, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	7839      	ldrb	r1, [r7, #0]
 8006d1c:	4827      	ldr	r0, [pc, #156]	; (8006dbc <_svfiprintf_r+0x1e4>)
 8006d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d22:	2206      	movs	r2, #6
 8006d24:	1c7e      	adds	r6, r7, #1
 8006d26:	f7f9 fa5b 	bl	80001e0 <memchr>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d038      	beq.n	8006da0 <_svfiprintf_r+0x1c8>
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <_svfiprintf_r+0x1e8>)
 8006d30:	bb13      	cbnz	r3, 8006d78 <_svfiprintf_r+0x1a0>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3307      	adds	r3, #7
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	444b      	add	r3, r9
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	e76d      	b.n	8006c22 <_svfiprintf_r+0x4a>
 8006d46:	fb05 3202 	mla	r2, r5, r2, r3
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	460f      	mov	r7, r1
 8006d4e:	e7a6      	b.n	8006c9e <_svfiprintf_r+0xc6>
 8006d50:	2300      	movs	r3, #0
 8006d52:	3701      	adds	r7, #1
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	4619      	mov	r1, r3
 8006d58:	250a      	movs	r5, #10
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d60:	3a30      	subs	r2, #48	; 0x30
 8006d62:	2a09      	cmp	r2, #9
 8006d64:	d903      	bls.n	8006d6e <_svfiprintf_r+0x196>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0c8      	beq.n	8006cfc <_svfiprintf_r+0x124>
 8006d6a:	9105      	str	r1, [sp, #20]
 8006d6c:	e7c6      	b.n	8006cfc <_svfiprintf_r+0x124>
 8006d6e:	fb05 2101 	mla	r1, r5, r1, r2
 8006d72:	2301      	movs	r3, #1
 8006d74:	4607      	mov	r7, r0
 8006d76:	e7f0      	b.n	8006d5a <_svfiprintf_r+0x182>
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <_svfiprintf_r+0x1ec>)
 8006d80:	a904      	add	r1, sp, #16
 8006d82:	4640      	mov	r0, r8
 8006d84:	f7fe f8f0 	bl	8004f68 <_printf_float>
 8006d88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d8c:	4681      	mov	r9, r0
 8006d8e:	d1d6      	bne.n	8006d3e <_svfiprintf_r+0x166>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	065b      	lsls	r3, r3, #25
 8006d94:	f53f af35 	bmi.w	8006c02 <_svfiprintf_r+0x2a>
 8006d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9a:	b01d      	add	sp, #116	; 0x74
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	4622      	mov	r2, r4
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <_svfiprintf_r+0x1ec>)
 8006da8:	a904      	add	r1, sp, #16
 8006daa:	4640      	mov	r0, r8
 8006dac:	f7fe fb92 	bl	80054d4 <_printf_i>
 8006db0:	e7ea      	b.n	8006d88 <_svfiprintf_r+0x1b0>
 8006db2:	bf00      	nop
 8006db4:	08007054 	.word	0x08007054
 8006db8:	0800705a 	.word	0x0800705a
 8006dbc:	0800705e 	.word	0x0800705e
 8006dc0:	08004f69 	.word	0x08004f69
 8006dc4:	08006b25 	.word	0x08006b25

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4c06      	ldr	r4, [pc, #24]	; (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4605      	mov	r5, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	f7fa fb6c 	bl	80014b0 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20000400 	.word	0x20000400

08006de8 <__ascii_mbtowc>:
 8006de8:	b082      	sub	sp, #8
 8006dea:	b901      	cbnz	r1, 8006dee <__ascii_mbtowc+0x6>
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	b142      	cbz	r2, 8006e02 <__ascii_mbtowc+0x1a>
 8006df0:	b14b      	cbz	r3, 8006e06 <__ascii_mbtowc+0x1e>
 8006df2:	7813      	ldrb	r3, [r2, #0]
 8006df4:	600b      	str	r3, [r1, #0]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	1c10      	adds	r0, r2, #0
 8006dfa:	bf18      	it	ne
 8006dfc:	2001      	movne	r0, #1
 8006dfe:	b002      	add	sp, #8
 8006e00:	4770      	bx	lr
 8006e02:	4610      	mov	r0, r2
 8006e04:	e7fb      	b.n	8006dfe <__ascii_mbtowc+0x16>
 8006e06:	f06f 0001 	mvn.w	r0, #1
 8006e0a:	e7f8      	b.n	8006dfe <__ascii_mbtowc+0x16>

08006e0c <memmove>:
 8006e0c:	4288      	cmp	r0, r1
 8006e0e:	b510      	push	{r4, lr}
 8006e10:	eb01 0302 	add.w	r3, r1, r2
 8006e14:	d807      	bhi.n	8006e26 <memmove+0x1a>
 8006e16:	1e42      	subs	r2, r0, #1
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	d00a      	beq.n	8006e32 <memmove+0x26>
 8006e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e24:	e7f8      	b.n	8006e18 <memmove+0xc>
 8006e26:	4283      	cmp	r3, r0
 8006e28:	d9f5      	bls.n	8006e16 <memmove+0xa>
 8006e2a:	1881      	adds	r1, r0, r2
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	42d3      	cmn	r3, r2
 8006e30:	d100      	bne.n	8006e34 <memmove+0x28>
 8006e32:	bd10      	pop	{r4, pc}
 8006e34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e3c:	e7f7      	b.n	8006e2e <memmove+0x22>

08006e3e <__malloc_lock>:
 8006e3e:	4770      	bx	lr

08006e40 <__malloc_unlock>:
 8006e40:	4770      	bx	lr

08006e42 <_realloc_r>:
 8006e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e44:	4607      	mov	r7, r0
 8006e46:	4614      	mov	r4, r2
 8006e48:	460e      	mov	r6, r1
 8006e4a:	b921      	cbnz	r1, 8006e56 <_realloc_r+0x14>
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e52:	f7ff be0d 	b.w	8006a70 <_malloc_r>
 8006e56:	b922      	cbnz	r2, 8006e62 <_realloc_r+0x20>
 8006e58:	f7ff fdbc 	bl	80069d4 <_free_r>
 8006e5c:	4625      	mov	r5, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e62:	f000 f821 	bl	8006ea8 <_malloc_usable_size_r>
 8006e66:	42a0      	cmp	r0, r4
 8006e68:	d20f      	bcs.n	8006e8a <_realloc_r+0x48>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7ff fdff 	bl	8006a70 <_malloc_r>
 8006e72:	4605      	mov	r5, r0
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d0f2      	beq.n	8006e5e <_realloc_r+0x1c>
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	f7ff fab6 	bl	80063ec <memcpy>
 8006e80:	4631      	mov	r1, r6
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff fda6 	bl	80069d4 <_free_r>
 8006e88:	e7e9      	b.n	8006e5e <_realloc_r+0x1c>
 8006e8a:	4635      	mov	r5, r6
 8006e8c:	e7e7      	b.n	8006e5e <_realloc_r+0x1c>

08006e8e <__ascii_wctomb>:
 8006e8e:	b149      	cbz	r1, 8006ea4 <__ascii_wctomb+0x16>
 8006e90:	2aff      	cmp	r2, #255	; 0xff
 8006e92:	bf85      	ittet	hi
 8006e94:	238a      	movhi	r3, #138	; 0x8a
 8006e96:	6003      	strhi	r3, [r0, #0]
 8006e98:	700a      	strbls	r2, [r1, #0]
 8006e9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e9e:	bf98      	it	ls
 8006ea0:	2001      	movls	r0, #1
 8006ea2:	4770      	bx	lr
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4770      	bx	lr

08006ea8 <_malloc_usable_size_r>:
 8006ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eac:	1f18      	subs	r0, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfbc      	itt	lt
 8006eb2:	580b      	ldrlt	r3, [r1, r0]
 8006eb4:	18c0      	addlt	r0, r0, r3
 8006eb6:	4770      	bx	lr

08006eb8 <_init>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	bf00      	nop
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr

08006ec4 <_fini>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr
