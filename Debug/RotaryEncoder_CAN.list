
RotaryEncoder_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004400  08004400  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004400  08004400  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08004478  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004478  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d98f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a5b  00000000  00000000  0002da2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  0002f490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  000301a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bac7  00000000  00000000  00030e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a776  00000000  00000000  0004c8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a72d4  00000000  00000000  00057045  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa4  00000000  00000000  000fe394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004374 	.word	0x08004374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004374 	.word	0x08004374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fbb7 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f84b 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f97b 	bl	8000588 <MX_GPIO_Init>
  MX_CAN_Init();
 8000292:	f000 f887 	bl	80003a4 <MX_CAN_Init>
  MX_TIM3_Init();
 8000296:	f000 f8f1 	bl	800047c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800029a:	f000 f945 	bl	8000528 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800029e:	213c      	movs	r1, #60	; 0x3c
 80002a0:	4819      	ldr	r0, [pc, #100]	; (8000308 <main+0x88>)
 80002a2:	f002 ff13 	bl	80030cc <HAL_TIM_Encoder_Start>
  HAL_CAN_Start(&hcan);
 80002a6:	4819      	ldr	r0, [pc, #100]	; (800030c <main+0x8c>)
 80002a8:	f000 fdf3 	bl	8000e92 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80002ac:	2102      	movs	r1, #2
 80002ae:	4817      	ldr	r0, [pc, #92]	; (800030c <main+0x8c>)
 80002b0:	f001 f855 	bl	800135e <HAL_CAN_ActivateNotification>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <main+0x3e>
	  Error_Handler();
 80002ba:	f000 f9d9 	bl	8000670 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cnt = TIM3 -> CNT;
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <main+0x90>)
 80002c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <main+0x94>)
 80002c6:	601a      	str	r2, [r3, #0]
	  sprintf(scnt, "%d\r\n", cnt);
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <main+0x94>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	4912      	ldr	r1, [pc, #72]	; (8000318 <main+0x98>)
 80002d0:	4812      	ldr	r0, [pc, #72]	; (800031c <main+0x9c>)
 80002d2:	f003 fc49 	bl	8003b68 <siprintf>
	  HAL_UART_Transmit( &huart2, scnt, strlen(scnt) + 1, 0xFFFF);
 80002d6:	4811      	ldr	r0, [pc, #68]	; (800031c <main+0x9c>)
 80002d8:	f7ff ff7a 	bl	80001d0 <strlen>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29b      	uxth	r3, r3
 80002e0:	3301      	adds	r3, #1
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e8:	490c      	ldr	r1, [pc, #48]	; (800031c <main+0x9c>)
 80002ea:	480d      	ldr	r0, [pc, #52]	; (8000320 <main+0xa0>)
 80002ec:	f003 f8d6 	bl	800349c <HAL_UART_Transmit>
	  memcpy(send_data, &cnt, 4);
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <main+0x94>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	603b      	str	r3, [r7, #0]
	  CAN_SEND( BLDC0_CAN_ID, send_data);
 80002f6:	463b      	mov	r3, r7
 80002f8:	4619      	mov	r1, r3
 80002fa:	2020      	movs	r0, #32
 80002fc:	f000 f980 	bl	8000600 <CAN_SEND>
	  HAL_Delay( 10 );
 8000300:	200a      	movs	r0, #10
 8000302:	f000 fbdf 	bl	8000ac4 <HAL_Delay>
	  cnt = TIM3 -> CNT;
 8000306:	e7da      	b.n	80002be <main+0x3e>
 8000308:	20000128 	.word	0x20000128
 800030c:	20000100 	.word	0x20000100
 8000310:	40000400 	.word	0x40000400
 8000314:	200000fc 	.word	0x200000fc
 8000318:	0800438c 	.word	0x0800438c
 800031c:	20000098 	.word	0x20000098
 8000320:	20000188 	.word	0x20000188

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b090      	sub	sp, #64	; 0x40
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fc10 	bl	8003b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	2310      	movs	r3, #16
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000356:	2300      	movs	r3, #0
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fccd 	bl	8001d04 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000370:	f000 f97e 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2101      	movs	r1, #1
 800038c:	4618      	mov	r0, r3
 800038e:	f002 fbc1 	bl	8002b14 <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000398:	f000 f96a 	bl	8000670 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3740      	adds	r7, #64	; 0x40
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <MX_CAN_Init+0xd0>)
 80003ac:	4a32      	ldr	r2, [pc, #200]	; (8000478 <MX_CAN_Init+0xd4>)
 80003ae:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80003b0:	4b30      	ldr	r3, [pc, #192]	; (8000474 <MX_CAN_Init+0xd0>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003b6:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <MX_CAN_Init+0xd0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003bc:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <MX_CAN_Init+0xd0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80003c2:	4b2c      	ldr	r3, [pc, #176]	; (8000474 <MX_CAN_Init+0xd0>)
 80003c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003c8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003ca:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <MX_CAN_Init+0xd0>)
 80003cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003d0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_CAN_Init+0xd0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d8:	4b26      	ldr	r3, [pc, #152]	; (8000474 <MX_CAN_Init+0xd0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003de:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_CAN_Init+0xd0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003e4:	4b23      	ldr	r3, [pc, #140]	; (8000474 <MX_CAN_Init+0xd0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ea:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_CAN_Init+0xd0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <MX_CAN_Init+0xd0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003f6:	481f      	ldr	r0, [pc, #124]	; (8000474 <MX_CAN_Init+0xd0>)
 80003f8:	f000 fb86 	bl	8000b08 <HAL_CAN_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000402:	f000 f935 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterIdHigh = my_CAN_ID<<5;
 8000406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800040a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = my_CAN_ID<<5;
 800040c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000410:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = my_CAN_ID<<5;
 8000412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000416:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = my_CAN_ID<<5;
 8000418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800041c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterBank = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000426:	2301      	movs	r3, #1
 8000428:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterActivation = ENABLE;
 800042e:	2301      	movs	r3, #1
 8000430:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000432:	230e      	movs	r3, #14
 8000434:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	480e      	ldr	r0, [pc, #56]	; (8000474 <MX_CAN_Init+0xd0>)
 800043c:	f000 fc5f 	bl	8000cfe <HAL_CAN_ConfigFilter>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_CAN_Init+0xa6>
	  Error_Handler();
 8000446:	f000 f913 	bl	8000670 <Error_Handler>
  }
  HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2015      	movs	r0, #21
 8000450:	f001 faaf 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000454:	2015      	movs	r0, #21
 8000456:	f001 fac8 	bl	80019ea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2016      	movs	r0, #22
 8000460:	f001 faa7 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000464:	2016      	movs	r0, #22
 8000466:	f001 fac0 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3728      	adds	r7, #40	; 0x28
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000100 	.word	0x20000100
 8000478:	40006400 	.word	0x40006400

0800047c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08c      	sub	sp, #48	; 0x30
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2224      	movs	r2, #36	; 0x24
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fb64 	bl	8003b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_TIM3_Init+0xa4>)
 800049c:	4a21      	ldr	r2, [pc, #132]	; (8000524 <MX_TIM3_Init+0xa8>)
 800049e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM3_Init+0xa4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_TIM3_Init+0xa4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_TIM3_Init+0xa4>)
 80004ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_TIM3_Init+0xa4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_TIM3_Init+0xa4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004c0:	2303      	movs	r3, #3
 80004c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004d8:	2301      	movs	r3, #1
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4619      	mov	r1, r3
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <MX_TIM3_Init+0xa4>)
 80004ec:	f002 fd48 	bl	8002f80 <HAL_TIM_Encoder_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80004f6:	f000 f8bb 	bl	8000670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_TIM3_Init+0xa4>)
 8000508:	f002 ff0c 	bl	8003324 <HAL_TIMEx_MasterConfigSynchronization>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000512:	f000 f8ad 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3730      	adds	r7, #48	; 0x30
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000128 	.word	0x20000128
 8000524:	40000400 	.word	0x40000400

08000528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_USART2_UART_Init+0x58>)
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <MX_USART2_UART_Init+0x5c>)
 8000530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_USART2_UART_Init+0x58>)
 8000534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_USART2_UART_Init+0x58>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_USART2_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_USART2_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_USART2_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_USART2_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_USART2_UART_Init+0x58>)
 800056c:	f002 ff48 	bl	8003400 <HAL_UART_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000576:	f000 f87b 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000188 	.word	0x20000188
 8000584:	40004400 	.word	0x40004400

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_GPIO_Init+0x44>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <MX_GPIO_Init+0x44>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_GPIO_Init+0x44>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_GPIO_Init+0x44>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <MX_GPIO_Init+0x44>)
 80005ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_GPIO_Init+0x44>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80005dc:	2100      	movs	r1, #0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 fdab 	bl	800113a <HAL_CAN_GetRxMessage>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 80005ea:	f000 f841 	bl	8000670 <Error_Handler>
	}
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000180 	.word	0x20000180
 80005fc:	20000224 	.word	0x20000224

08000600 <CAN_SEND>:

void CAN_SEND(uint32_t _id, uint8_t *_data) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	TxHeader.StdId = _id;					// Tx CAN ID
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <CAN_SEND+0x60>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <CAN_SEND+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <CAN_SEND+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <CAN_SEND+0x60>)
 800061e:	2208      	movs	r2, #8
 8000620:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <CAN_SEND+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	751a      	strb	r2, [r3, #20]
	memcpy(TxData, _data, 8);
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <CAN_SEND+0x64>)
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	6811      	ldr	r1, [r2, #0]
 800062e:	6852      	ldr	r2, [r2, #4]
 8000630:	6019      	str	r1, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <CAN_SEND+0x68>)
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <CAN_SEND+0x64>)
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <CAN_SEND+0x60>)
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <CAN_SEND+0x6c>)
 800063c:	f000 fc6d 	bl	8000f1a <HAL_CAN_AddTxMessage>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <CAN_SEND+0x4a>
		Error_Handler();
 8000646:	f000 f813 	bl	8000670 <Error_Handler>
	}
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {}
 800064a:	bf00      	nop
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <CAN_SEND+0x6c>)
 800064e:	f000 fd3f 	bl	80010d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f9      	beq.n	800064c <CAN_SEND+0x4c>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000020c 	.word	0x2000020c
 8000664:	20000174 	.word	0x20000174
 8000668:	2000017c 	.word	0x2000017c
 800066c:	20000100 	.word	0x20000100

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000676:	e7fe      	b.n	8000676 <Error_Handler+0x6>

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x44>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a24      	ldr	r2, [pc, #144]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d141      	bne.n	8000766 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 80006e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000712:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000724:	2309      	movs	r3, #9
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f001 f975 	bl	8001a20 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2013      	movs	r0, #19
 800073c:	f001 f939 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000740:	2013      	movs	r0, #19
 8000742:	f001 f952 	bl	80019ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2014      	movs	r0, #20
 800074c:	f001 f931 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000750:	2014      	movs	r0, #20
 8000752:	f001 f94a 	bl	80019ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2015      	movs	r0, #21
 800075c:	f001 f929 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000760:	2015      	movs	r0, #21
 8000762:	f001 f942 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40006400 	.word	0x40006400
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d127      	bne.n	80007ea <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x80>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ca:	2330      	movs	r3, #48	; 0x30
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007da:	2302      	movs	r3, #2
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <HAL_TIM_Encoder_MspInit+0x84>)
 80007e6:	f001 f91b 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_UART_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d128      	bne.n	8000874 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_UART_MspInit+0x80>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000852:	230c      	movs	r3, #12
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000862:	2307      	movs	r3, #7
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 f8d6 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004400 	.word	0x40004400
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f8d8 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <CAN_TX_IRQHandler+0x10>)
 80008de:	f000 fd64 	bl	80013aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000100 	.word	0x20000100

080008ec <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <CAN_RX0_IRQHandler+0x10>)
 80008f2:	f000 fd5a 	bl	80013aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000100 	.word	0x20000100

08000900 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <CAN_RX1_IRQHandler+0x10>)
 8000906:	f000 fd50 	bl	80013aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000100 	.word	0x20000100

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f003 f8de 	bl	8003b04 <__errno>
 8000948:	4602      	mov	r2, r0
 800094a:	230c      	movs	r3, #12
 800094c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20003000 	.word	0x20003000
 8000974:	00000400 	.word	0x00000400
 8000978:	2000008c 	.word	0x2000008c
 800097c:	20000248 	.word	0x20000248

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490e      	ldr	r1, [pc, #56]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0b      	ldr	r4, [pc, #44]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ce:	f7ff ffd7 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f003 f89d 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d6:	f7ff fc53 	bl	8000280 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009e8:	08004408 	.word	0x08004408
  ldr r2, =_sbss
 80009ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009f0:	20000248 	.word	0x20000248

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x28>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 ffc7 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe30 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 ffdf 	bl	8001a06 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 ffa7 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000240 	.word	0x20000240

08000aac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000240 	.word	0x20000240

08000ac4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_Delay+0x40>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffde 	bl	8000aac <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e0ed      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fdca 	bl	80006c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0202 	bic.w	r2, r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3c:	f7ff ffb6 	bl	8000aac <HAL_GetTick>
 8000b40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b42:	e012      	b.n	8000b6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b44:	f7ff ffb2 	bl	8000aac <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d90b      	bls.n	8000b6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2205      	movs	r2, #5
 8000b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0c5      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1e5      	bne.n	8000b44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0201 	orr.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b88:	f7ff ff90 	bl	8000aac <HAL_GetTick>
 8000b8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b8e:	e012      	b.n	8000bb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b90:	f7ff ff8c 	bl	8000aac <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d90b      	bls.n	8000bb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2205      	movs	r2, #5
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e09f      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0e5      	beq.n	8000b90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7e5b      	ldrb	r3, [r3, #25]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0220 	orr.w	r2, r2, #32
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0220 	bic.w	r2, r2, #32
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7edb      	ldrb	r3, [r3, #27]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0210 	bic.w	r2, r2, #16
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0210 	orr.w	r2, r2, #16
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7f1b      	ldrb	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d108      	bne.n	8000c86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0208 	orr.w	r2, r2, #8
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e007      	b.n	8000c96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0208 	bic.w	r2, r2, #8
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7f5b      	ldrb	r3, [r3, #29]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d108      	bne.n	8000cb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0204 	orr.w	r2, r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0204 	bic.w	r2, r2, #4
 8000cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	ea42 0103 	orr.w	r1, r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d16:	7cfb      	ldrb	r3, [r7, #19]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d003      	beq.n	8000d24 <HAL_CAN_ConfigFilter+0x26>
 8000d1c:	7cfb      	ldrb	r3, [r7, #19]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	f040 80aa 	bne.w	8000e78 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d123      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3248      	adds	r2, #72	; 0x48
 8000d86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d9c:	6979      	ldr	r1, [r7, #20]
 8000d9e:	3348      	adds	r3, #72	; 0x48
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d122      	bne.n	8000df4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3248      	adds	r2, #72	; 0x48
 8000dd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dea:	6979      	ldr	r1, [r7, #20]
 8000dec:	3348      	adds	r3, #72	; 0x48
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e0e:	e007      	b.n	8000e20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e3a:	e007      	b.n	8000e4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e6a:	f023 0201 	bic.w	r2, r3, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e006      	b.n	8000e86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
  }
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d12e      	bne.n	8000f04 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ebe:	f7ff fdf5 	bl	8000aac <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec4:	e012      	b.n	8000eec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec6:	f7ff fdf1 	bl	8000aac <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d90b      	bls.n	8000eec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e012      	b.n	8000f12 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e5      	bne.n	8000ec6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e006      	b.n	8000f12 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b089      	sub	sp, #36	; 0x24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_AddTxMessage+0x2c>
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	f040 80b8 	bne.w	80010b6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10a      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a0 	beq.w	80010a6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	0e1b      	lsrs	r3, r3, #24
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d907      	bls.n	8000f86 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e09e      	b.n	80010c4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f86:	2201      	movs	r2, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10d      	bne.n	8000fb4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	6809      	ldr	r1, [r1, #0]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3318      	adds	r3, #24
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	440b      	add	r3, r1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e00f      	b.n	8000fd4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fbe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fc8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3318      	adds	r3, #24
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	440b      	add	r3, r1
 8000fd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3318      	adds	r3, #24
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	7d1b      	ldrb	r3, [r3, #20]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d111      	bne.n	8001014 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	6811      	ldr	r1, [r2, #0]
 8001004:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	440b      	add	r3, r1
 8001010:	3304      	adds	r3, #4
 8001012:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3307      	adds	r3, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	061a      	lsls	r2, r3, #24
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3306      	adds	r3, #6
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3305      	adds	r3, #5
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	4313      	orrs	r3, r2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	3204      	adds	r2, #4
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	4610      	mov	r0, r2
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	6811      	ldr	r1, [r2, #0]
 800103c:	ea43 0200 	orr.w	r2, r3, r0
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	440b      	add	r3, r1
 8001046:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800104a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3303      	adds	r3, #3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	061a      	lsls	r2, r3, #24
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3302      	adds	r3, #2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3301      	adds	r3, #1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	4313      	orrs	r3, r2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	4610      	mov	r0, r2
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	6811      	ldr	r1, [r2, #0]
 8001072:	ea43 0200 	orr.w	r2, r3, r0
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001080:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	6811      	ldr	r1, [r2, #0]
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3318      	adds	r3, #24
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	440b      	add	r3, r1
 80010a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e00e      	b.n	80010c4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e006      	b.n	80010c4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
  }
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3724      	adds	r7, #36	; 0x24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80010e4:	7afb      	ldrb	r3, [r7, #11]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d002      	beq.n	80010f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d11d      	bne.n	800112c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800112c:	68fb      	ldr	r3, [r7, #12]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800113a:	b480      	push	{r7}
 800113c:	b087      	sub	sp, #28
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d003      	beq.n	800115e <HAL_CAN_GetRxMessage+0x24>
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	2b02      	cmp	r3, #2
 800115a:	f040 80f3 	bne.w	8001344 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10e      	bne.n	8001182 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0e7      	b.n	8001352 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0d8      	b.n	8001352 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	331b      	adds	r3, #27
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0204 	and.w	r2, r3, #4
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	331b      	adds	r3, #27
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0d5b      	lsrs	r3, r3, #21
 80011ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	331b      	adds	r3, #27
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	331b      	adds	r3, #27
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0202 	and.w	r2, r3, #2
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	331b      	adds	r3, #27
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	4413      	add	r3, r2
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 020f 	and.w	r2, r3, #15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	331b      	adds	r3, #27
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	331b      	adds	r3, #27
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	3304      	adds	r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	0c1b      	lsrs	r3, r3, #16
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0a1a      	lsrs	r2, r3, #8
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0c1a      	lsrs	r2, r3, #16
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3302      	adds	r3, #2
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0e1a      	lsrs	r2, r3, #24
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3303      	adds	r3, #3
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3304      	adds	r3, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0a1a      	lsrs	r2, r3, #8
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3305      	adds	r3, #5
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0c1a      	lsrs	r2, r3, #16
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3306      	adds	r3, #6
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	0e1a      	lsrs	r2, r3, #24
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3307      	adds	r3, #7
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	e007      	b.n	8001340 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0220 	orr.w	r2, r2, #32
 800133e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	e006      	b.n	8001352 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
  }
}
 8001352:	4618      	mov	r0, r3
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d002      	beq.n	800137c <HAL_CAN_ActivateNotification+0x1e>
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d109      	bne.n	8001390 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6959      	ldr	r1, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	e006      	b.n	800139e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
  }
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b08a      	sub	sp, #40	; 0x28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d07c      	beq.n	80014ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d023      	beq.n	8001442 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f97d 	bl	800170c <HAL_CAN_TxMailbox0CompleteCallback>
 8001412:	e016      	b.n	8001442 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	e00c      	b.n	8001442 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
 800143a:	e002      	b.n	8001442 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f983 	bl	8001748 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d024      	beq.n	8001496 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001454:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f95d 	bl	8001720 <HAL_CAN_TxMailbox1CompleteCallback>
 8001466:	e016      	b.n	8001496 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	e00c      	b.n	8001496 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	e002      	b.n	8001496 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f963 	bl	800175c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d024      	beq.n	80014ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f93d 	bl	8001734 <HAL_CAN_TxMailbox2CompleteCallback>
 80014ba:	e016      	b.n	80014ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	e00c      	b.n	80014ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
 80014e2:	e002      	b.n	80014ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f943 	bl	8001770 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00c      	beq.n	800150e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001504:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2210      	movs	r2, #16
 800150c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f92a 	bl	8001784 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff f841 	bl	80005d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2210      	movs	r2, #16
 8001570:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2208      	movs	r2, #8
 800158c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f90c 	bl	80017ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f8f3 	bl	8001798 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2210      	movs	r2, #16
 80015cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8f6 	bl	80017c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2208      	movs	r2, #8
 80015ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f8ef 	bl	80017d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d075      	beq.n	80016ec <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d06c      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03d      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d038      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001678:	2b30      	cmp	r3, #48	; 0x30
 800167a:	d017      	beq.n	80016ac <HAL_CAN_IRQHandler+0x302>
 800167c:	2b30      	cmp	r3, #48	; 0x30
 800167e:	d804      	bhi.n	800168a <HAL_CAN_IRQHandler+0x2e0>
 8001680:	2b10      	cmp	r3, #16
 8001682:	d009      	beq.n	8001698 <HAL_CAN_IRQHandler+0x2ee>
 8001684:	2b20      	cmp	r3, #32
 8001686:	d00c      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001688:	e024      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800168a:	2b50      	cmp	r3, #80	; 0x50
 800168c:	d018      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x316>
 800168e:	2b60      	cmp	r3, #96	; 0x60
 8001690:	d01b      	beq.n	80016ca <HAL_CAN_IRQHandler+0x320>
 8001692:	2b40      	cmp	r3, #64	; 0x40
 8001694:	d00f      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001696:	e01d      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a0:	e018      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016aa:	e013      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b4:	e00e      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016be:	e009      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c8:	e004      	b.n	80016d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2204      	movs	r2, #4
 80016ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f872 	bl	80017e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e14e      	b.n	8001cce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8140 	beq.w	8001cc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d00b      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5c:	2b11      	cmp	r3, #17
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0xea>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	6939      	ldr	r1, [r7, #16]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 809a 	beq.w	8001cc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a54      	ldr	r2, [pc, #336]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd6:	d013      	beq.n	8001c00 <HAL_GPIO_Init+0x1e0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_GPIO_Init+0x2d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00d      	beq.n	8001bfc <HAL_GPIO_Init+0x1dc>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_GPIO_Init+0x2d8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <HAL_GPIO_Init+0x1d8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_GPIO_Init+0x1d4>
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e006      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	e004      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001c00:	2300      	movs	r3, #0
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	f002 0203 	and.w	r2, r2, #3
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	4093      	lsls	r3, r2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c12:	4937      	ldr	r1, [pc, #220]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c44:	4a2e      	ldr	r2, [pc, #184]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f47f aea9 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	48000c00 	.word	0x48000c00
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f000 bef4 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 816a 	beq.w	8002002 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d2e:	4bb3      	ldr	r3, [pc, #716]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d00c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d3a:	4bb0      	ldr	r3, [pc, #704]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d159      	bne.n	8001dfa <HAL_RCC_OscConfig+0xf6>
 8001d46:	4bad      	ldr	r3, [pc, #692]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d152      	bne.n	8001dfa <HAL_RCC_OscConfig+0xf6>
 8001d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_OscConfig+0x82>
 8001d80:	4b9e      	ldr	r3, [pc, #632]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0xae>
 8001d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001da2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001dae:	4b93      	ldr	r3, [pc, #588]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dbe:	fa92 f2a2 	rbit	r2, r2
 8001dc2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001dc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 810c 	beq.w	8002000 <HAL_RCC_OscConfig+0x2fc>
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8106 	bne.w	8002000 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f000 be86 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x110>
 8001e06:	4b7d      	ldr	r3, [pc, #500]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7c      	ldr	r2, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e030      	b.n	8001e76 <HAL_RCC_OscConfig+0x172>
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x134>
 8001e1e:	4b77      	ldr	r3, [pc, #476]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a76      	ldr	r2, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b74      	ldr	r3, [pc, #464]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a73      	ldr	r2, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x172>
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x15a>
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x172>
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a63      	ldr	r2, [pc, #396]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	495d      	ldr	r1, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d059      	beq.n	8001f48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe fe0a 	bl	8000aac <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7fe fe05 	bl	8000aac <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 be29 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ec8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x1e2>
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x20e>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f1e:	fa92 f2a2 	rbit	r2, r2
 8001f22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ab      	beq.n	8001e9e <HAL_RCC_OscConfig+0x19a>
 8001f46:	e05c      	b.n	8002002 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fdb0 	bl	8000aac <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f52:	f7fe fdab 	bl	8000aac <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d902      	bls.n	8001f68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f000 bdcf 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0x296>
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2c2>
 8001f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCC_OscConfig+0x2f8>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ab      	bne.n	8001f52 <HAL_RCC_OscConfig+0x24e>
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_OscConfig+0x2fe>
 8001ffc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 816f 	beq.w	80022f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002012:	4bd0      	ldr	r3, [pc, #832]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800201e:	4bcd      	ldr	r3, [pc, #820]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d16c      	bne.n	8002104 <HAL_RCC_OscConfig+0x400>
 800202a:	4bca      	ldr	r3, [pc, #808]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d166      	bne.n	8002104 <HAL_RCC_OscConfig+0x400>
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002048:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_OscConfig+0x362>
 8002060:	4bbc      	ldr	r3, [pc, #752]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e013      	b.n	800208e <HAL_RCC_OscConfig+0x38a>
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800207e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800208a:	4bb2      	ldr	r3, [pc, #712]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2202      	movs	r2, #2
 8002090:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002094:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d002      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f000 bd1b 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4ba0      	ldr	r3, [pc, #640]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	21f8      	movs	r1, #248	; 0xf8
 80020e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020e8:	fa91 f1a1 	rbit	r1, r1
 80020ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80020f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80020f4:	fab1 f181 	clz	r1, r1
 80020f8:	b2c9      	uxtb	r1, r1
 80020fa:	408b      	lsls	r3, r1
 80020fc:	4995      	ldr	r1, [pc, #596]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e0f5      	b.n	80022f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8085 	beq.w	800221a <HAL_RCC_OscConfig+0x516>
 8002110:	2301      	movs	r3, #1
 8002112:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002122:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	461a      	mov	r2, r3
 8002138:	2301      	movs	r3, #1
 800213a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fcb6 	bl	8000aac <HAL_GetTick>
 8002140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe fcb1 	bl	8000aac <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d902      	bls.n	800215c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	f000 bcd5 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800216e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0x488>
 8002186:	4b73      	ldr	r3, [pc, #460]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e013      	b.n	80021b4 <HAL_RCC_OscConfig+0x4b0>
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2202      	movs	r2, #2
 80021b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0220 	orr.w	r2, r2, #32
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0af      	beq.n	8002146 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	21f8      	movs	r1, #248	; 0xf8
 80021f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021fe:	fa91 f1a1 	rbit	r1, r1
 8002202:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002206:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800220a:	fab1 f181 	clz	r1, r1
 800220e:	b2c9      	uxtb	r1, r1
 8002210:	408b      	lsls	r3, r1
 8002212:	4950      	ldr	r1, [pc, #320]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e06a      	b.n	80022f0 <HAL_RCC_OscConfig+0x5ec>
 800221a:	2301      	movs	r3, #1
 800221c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800222c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800223a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe fc31 	bl	8000aac <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe fc2c 	bl	8000aac <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bc50 	b.w	8002b06 <HAL_RCC_OscConfig+0xe02>
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_RCC_OscConfig+0x592>
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	e013      	b.n	80022be <HAL_RCC_OscConfig+0x5ba>
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022a8:	2302      	movs	r3, #2
 80022aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x650>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2202      	movs	r2, #2
 80022c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022c8:	fa92 f2a2 	rbit	r2, r2
 80022cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80022d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1af      	bne.n	8002250 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80da 	beq.w	80024b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d069      	beq.n	80023de <HAL_RCC_OscConfig+0x6da>
 800230a:	2301      	movs	r3, #1
 800230c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800231c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x654>)
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	461a      	mov	r2, r3
 8002330:	2301      	movs	r3, #1
 8002332:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7fe fbba 	bl	8000aac <HAL_GetTick>
 8002338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233c:	e00e      	b.n	800235c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233e:	f7fe fbb5 	bl	8000aac <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d906      	bls.n	800235c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e3d9      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	10908120 	.word	0x10908120
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800236e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002372:	2202      	movs	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800238a:	2202      	movs	r2, #2
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800239c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4ba5      	ldr	r3, [pc, #660]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80023a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023a6:	2102      	movs	r1, #2
 80023a8:	6019      	str	r1, [r3, #0]
 80023aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f1a3 	rbit	r1, r3
 80023b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023b8:	6019      	str	r1, [r3, #0]
  return result;
 80023ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0b0      	beq.n	800233e <HAL_RCC_OscConfig+0x63a>
 80023dc:	e06a      	b.n	80024b4 <HAL_RCC_OscConfig+0x7b0>
 80023de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023f4:	601a      	str	r2, [r3, #0]
  return result;
 80023f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4b8c      	ldr	r3, [pc, #560]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe fb4c 	bl	8000aac <HAL_GetTick>
 8002414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	e009      	b.n	800242e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe fb47 	bl	8000aac <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e36b      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 800242e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002432:	2202      	movs	r2, #2
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800244a:	2202      	movs	r2, #2
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002462:	2202      	movs	r2, #2
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002474:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002476:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800247a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800247e:	2102      	movs	r1, #2
 8002480:	6019      	str	r1, [r3, #0]
 8002482:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f1a3 	rbit	r1, r3
 800248c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002490:	6019      	str	r1, [r3, #0]
  return result;
 8002492:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1b2      	bne.n	800241a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8158 	beq.w	8002774 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d112      	bne.n	80024fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x938>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d11a      	bne.n	800253e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x938>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4b      	ldr	r2, [pc, #300]	; (800263c <HAL_RCC_OscConfig+0x938>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002514:	f7fe faca 	bl	8000aac <HAL_GetTick>
 8002518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	e009      	b.n	8002532 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251e:	f7fe fac5 	bl	8000aac <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e2e9      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x938>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ef      	beq.n	800251e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x852>
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a39      	ldr	r2, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e02f      	b.n	80025b6 <HAL_RCC_OscConfig+0x8b2>
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x876>
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a33      	ldr	r2, [pc, #204]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	e01d      	b.n	80025b6 <HAL_RCC_OscConfig+0x8b2>
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x89a>
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x8b2>
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a21      	ldr	r2, [pc, #132]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d06b      	beq.n	8002698 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7fe fa74 	bl	8000aac <HAL_GetTick>
 80025c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fa6f 	bl	8000aac <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e291      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 80025e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025e6:	2202      	movs	r2, #2
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025fe:	2202      	movs	r2, #2
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002610:	601a      	str	r2, [r3, #0]
  return result;
 8002612:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002616:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d109      	bne.n	8002640 <HAL_RCC_OscConfig+0x93c>
 800262c:	4b01      	ldr	r3, [pc, #4]	; (8002634 <HAL_RCC_OscConfig+0x930>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	e014      	b.n	800265c <HAL_RCC_OscConfig+0x958>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	10908120 	.word	0x10908120
 800263c:	40007000 	.word	0x40007000
 8002640:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002644:	2202      	movs	r2, #2
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	fa93 f2a3 	rbit	r2, r3
 8002652:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4bbb      	ldr	r3, [pc, #748]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002660:	2102      	movs	r1, #2
 8002662:	6011      	str	r1, [r2, #0]
 8002664:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	fa92 f1a2 	rbit	r1, r2
 800266e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002672:	6011      	str	r1, [r2, #0]
  return result;
 8002674:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d099      	beq.n	80025ca <HAL_RCC_OscConfig+0x8c6>
 8002696:	e063      	b.n	8002760 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7fe fa08 	bl	8000aac <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fa03 	bl	8000aac <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e225      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 80026ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026d6:	2202      	movs	r2, #2
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026e8:	601a      	str	r2, [r3, #0]
  return result;
 80026ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d102      	bne.n	800270a <HAL_RCC_OscConfig+0xa06>
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	e00d      	b.n	8002726 <HAL_RCC_OscConfig+0xa22>
 800270a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800270e:	2202      	movs	r2, #2
 8002710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800272a:	2102      	movs	r1, #2
 800272c:	6011      	str	r1, [r2, #0]
 800272e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fa92 f1a2 	rbit	r1, r2
 8002738:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800273c:	6011      	str	r1, [r2, #0]
  return result;
 800273e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	fab2 f282 	clz	r2, r2
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f002 021f 	and.w	r2, r2, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1a0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002760:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002768:	4b77      	ldr	r3, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4a76      	ldr	r2, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002772:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 81c2 	beq.w	8002b04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002780:	4b71      	ldr	r3, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	f000 819c 	beq.w	8002ac6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b02      	cmp	r3, #2
 8002796:	f040 8114 	bne.w	80029c2 <HAL_RCC_OscConfig+0xcbe>
 800279a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800279e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f2a3 	rbit	r2, r3
 80027ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027b2:	601a      	str	r2, [r3, #0]
  return result;
 80027b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe f96c 	bl	8000aac <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe f967 	bl	8000aac <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e18b      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 80027ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002806:	601a      	str	r2, [r3, #0]
  return result;
 8002808:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800280c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0xb24>
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0xb5c>
 8002828:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800282c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f2a3 	rbit	r2, r3
 8002856:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002864:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002868:	6011      	str	r1, [r2, #0]
 800286a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	fa92 f1a2 	rbit	r1, r2
 8002874:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002878:	6011      	str	r1, [r2, #0]
  return result;
 800287a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d19e      	bne.n	80027da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	4925      	ldr	r1, [pc, #148]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d0:	601a      	str	r2, [r3, #0]
  return result;
 80028d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe f8dd 	bl	8000aac <HAL_GetTick>
 80028f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f6:	e009      	b.n	800290c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f8d8 	bl	8000aac <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0fc      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 800290c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002924:	601a      	str	r2, [r3, #0]
  return result;
 8002926:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800292a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCC_OscConfig+0xc48>
 8002940:	4b01      	ldr	r3, [pc, #4]	; (8002948 <HAL_RCC_OscConfig+0xc44>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	e01e      	b.n	8002984 <HAL_RCC_OscConfig+0xc80>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800296a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_OscConfig+0xe0c>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002988:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800298c:	6011      	str	r1, [r2, #0]
 800298e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	fa92 f1a2 	rbit	r1, r2
 8002998:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800299c:	6011      	str	r1, [r2, #0]
  return result;
 800299e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f002 021f 	and.w	r2, r2, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d09b      	beq.n	80028f8 <HAL_RCC_OscConfig+0xbf4>
 80029c0:	e0a0      	b.n	8002b04 <HAL_RCC_OscConfig+0xe00>
 80029c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029da:	601a      	str	r2, [r3, #0]
  return result;
 80029dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	461a      	mov	r2, r3
 80029f4:	2300      	movs	r3, #0
 80029f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe f858 	bl	8000aac <HAL_GetTick>
 80029fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe f853 	bl	8000aac <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e077      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
 8002a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_RCC_OscConfig+0xd4c>
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCC_OscConfig+0xe0c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e01b      	b.n	8002a88 <HAL_RCC_OscConfig+0xd84>
 8002a50:	f107 0320 	add.w	r3, r7, #32
 8002a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f107 0320 	add.w	r3, r7, #32
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f107 0318 	add.w	r3, r7, #24
 8002a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f107 0318 	add.w	r3, r7, #24
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_OscConfig+0xe0c>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f107 0210 	add.w	r2, r7, #16
 8002a8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a90:	6011      	str	r1, [r2, #0]
 8002a92:	f107 0210 	add.w	r2, r7, #16
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f107 020c 	add.w	r2, r7, #12
 8002aa0:	6011      	str	r1, [r2, #0]
  return result;
 8002aa2:	f107 020c 	add.w	r2, r7, #12
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f002 021f 	and.w	r2, r2, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d19e      	bne.n	8002a02 <HAL_RCC_OscConfig+0xcfe>
 8002ac4:	e01e      	b.n	8002b04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_RCC_OscConfig+0xe0c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002adc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d108      	bne.n	8002b00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002aee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b09e      	sub	sp, #120	; 0x78
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e162      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b90      	ldr	r3, [pc, #576]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d910      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b8d      	ldr	r3, [pc, #564]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	498b      	ldr	r1, [pc, #556]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e14a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	497f      	ldr	r1, [pc, #508]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80dc 	beq.w	8002d40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d13c      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xf6>
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_RCC_ClockConfig+0xa6>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	e00f      	b.n	8002bda <HAL_RCC_ClockConfig+0xc6>
 8002bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8002bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bde:	65ba      	str	r2, [r7, #88]	; 0x58
 8002be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d17b      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0f3      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d13c      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x178>
 8002c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x128>
 8002c36:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	e00f      	b.n	8002c5c <HAL_RCC_ClockConfig+0x148>
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c60:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c64:	fa92 f2a2 	rbit	r2, r2
 8002c68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6c:	fab2 f282 	clz	r2, r2
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f042 0220 	orr.w	r2, r2, #32
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f002 021f 	and.w	r2, r2, #31
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13a      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b2      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x1a0>
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	e00d      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1bc>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	61ba      	str	r2, [r7, #24]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	fa92 f2a2 	rbit	r2, r2
 8002cda:	617a      	str	r2, [r7, #20]
  return result;
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	fab2 f282 	clz	r2, r2
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f042 0220 	orr.w	r2, r2, #32
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f002 021f 	and.w	r2, r2, #31
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e079      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	491a      	ldr	r1, [pc, #104]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fd fecc 	bl	8000aac <HAL_GetTick>
 8002d14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fd fec8 	bl	8000aac <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e061      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d214      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4906      	ldr	r1, [pc, #24]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e040      	b.n	8002df2 <HAL_RCC_ClockConfig+0x2de>
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_ClockConfig+0x2e8>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	491a      	ldr	r1, [pc, #104]	; (8002dfc <HAL_RCC_ClockConfig+0x2e8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x2e8>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4912      	ldr	r1, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x2e8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002db6:	f000 f829 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dba:	4601      	mov	r1, r0
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_RCC_ClockConfig+0x2e8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc4:	22f0      	movs	r2, #240	; 0xf0
 8002dc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	fa92 f2a2 	rbit	r2, r2
 8002dce:	60fa      	str	r2, [r7, #12]
  return result;
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	40d3      	lsrs	r3, r2
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x2ec>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	fa21 f303 	lsr.w	r3, r1, r3
 8002de2:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_RCC_ClockConfig+0x2f0>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_ClockConfig+0x2f4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fe1a 	bl	8000a24 <HAL_InitTick>
  
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3778      	adds	r7, #120	; 0x78
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08004394 	.word	0x08004394
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b08b      	sub	sp, #44	; 0x2c
 8002e10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x30>
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x36>
 8002e3a:	e03c      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e3e:	623b      	str	r3, [r7, #32]
      break;
 8002e40:	e03c      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	fa92 f2a2 	rbit	r2, r2
 8002e54:	607a      	str	r2, [r7, #4]
  return result;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	fab2 f282 	clz	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	40d3      	lsrs	r3, r2
 8002e60:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	220f      	movs	r2, #15
 8002e70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	fa92 f2a2 	rbit	r2, r2
 8002e78:	60fa      	str	r2, [r7, #12]
  return result;
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	fab2 f282 	clz	r2, r2
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	40d3      	lsrs	r3, r2
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e94:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	623b      	str	r3, [r7, #32]
      break;
 8002eb4:	e002      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eb8:	623b      	str	r3, [r7, #32]
      break;
 8002eba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	372c      	adds	r7, #44	; 0x2c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	080043ac 	.word	0x080043ac
 8002ed8:	080043bc 	.word	0x080043bc
 8002edc:	003d0900 	.word	0x003d0900

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002efe:	f7ff ffef 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f02:	4601      	mov	r1, r0
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	fa92 f2a2 	rbit	r2, r2
 8002f18:	603a      	str	r2, [r7, #0]
  return result;
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	40d3      	lsrs	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	080043a4 	.word	0x080043a4

08002f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f42:	f7ff ffcd 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f46:	4601      	mov	r1, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	603a      	str	r2, [r7, #0]
  return result;
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	40d3      	lsrs	r3, r2
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	080043a4 	.word	0x080043a4

08002f80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e097      	b.n	80030c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd fbe5 	bl	8000778 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002fc4:	f023 0307 	bic.w	r3, r3, #7
 8002fc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 f907 	bl	80031e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	4313      	orrs	r3, r2
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003020:	f023 030c 	bic.w	r3, r3, #12
 8003024:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	4313      	orrs	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	011a      	lsls	r2, r3, #4
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	031b      	lsls	r3, r3, #12
 8003050:	4313      	orrs	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	4313      	orrs	r3, r2
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d110      	bne.n	800311e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003102:	7b7b      	ldrb	r3, [r7, #13]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e068      	b.n	80031de <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311c:	e031      	b.n	8003182 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d110      	bne.n	8003146 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003124:	7bbb      	ldrb	r3, [r7, #14]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d102      	bne.n	8003130 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800312a:	7b3b      	ldrb	r3, [r7, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e054      	b.n	80031de <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003144:	e01d      	b.n	8003182 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800314c:	7bbb      	ldrb	r3, [r7, #14]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003152:	7b7b      	ldrb	r3, [r7, #13]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003158:	7b3b      	ldrb	r3, [r7, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e03d      	b.n	80031de <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_TIM_Encoder_Start+0xc2>
 8003188:	2b04      	cmp	r3, #4
 800318a:	d008      	beq.n	800319e <HAL_TIM_Encoder_Start+0xd2>
 800318c:	e00f      	b.n	80031ae <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f89e 	bl	80032d8 <TIM_CCxChannelCmd>
      break;
 800319c:	e016      	b.n	80031cc <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	2104      	movs	r1, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f896 	bl	80032d8 <TIM_CCxChannelCmd>
      break;
 80031ac:	e00e      	b.n	80031cc <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f88e 	bl	80032d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2201      	movs	r2, #1
 80031c2:	2104      	movs	r1, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f887 	bl	80032d8 <TIM_CCxChannelCmd>
      break;
 80031ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <TIM_Base_SetConfig+0xdc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x28>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x28>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <TIM_Base_SetConfig+0xe0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <TIM_Base_SetConfig+0xdc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <TIM_Base_SetConfig+0x6a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d00f      	beq.n	8003252 <TIM_Base_SetConfig+0x6a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <TIM_Base_SetConfig+0xe0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_Base_SetConfig+0x6a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <TIM_Base_SetConfig+0xe4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_Base_SetConfig+0x6a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <TIM_Base_SetConfig+0xe8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_Base_SetConfig+0x6a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <TIM_Base_SetConfig+0xec>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d108      	bne.n	8003264 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <TIM_Base_SetConfig+0xdc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0xc0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <TIM_Base_SetConfig+0xe4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0xc0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <TIM_Base_SetConfig+0xe8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0xc0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <TIM_Base_SetConfig+0xec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d103      	bne.n	80032b0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800

080032d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2201      	movs	r2, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	431a      	orrs	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003338:	2302      	movs	r3, #2
 800333a:	e054      	b.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d108      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800336c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00e      	beq.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d009      	beq.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10c      	bne.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40014000 	.word	0x40014000

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd f9ec 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8c0 	bl	80035c4 <UART_SetConfig>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9ec 	bl	8003834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa73 	bl	8003978 <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 8082 	bne.w	80035ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_UART_Transmit+0x26>
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07a      	b.n	80035bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UART_Transmit+0x38>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e073      	b.n	80035bc <HAL_UART_Transmit+0x120>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ea:	f7fd fadf 	bl	8000aac <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d108      	bne.n	800351c <HAL_UART_Transmit+0x80>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e003      	b.n	8003524 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800352c:	e02d      	b.n	800358a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fa66 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e039      	b.n	80035bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	881a      	ldrh	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355a:	b292      	uxth	r2, r2
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	3302      	adds	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e008      	b.n	8003578 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b292      	uxth	r2, r2
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa32 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e005      	b.n	80035bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b8b      	ldr	r3, [pc, #556]	; (800381c <UART_SetConfig+0x258>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a79      	ldr	r2, [pc, #484]	; (8003820 <UART_SetConfig+0x25c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d121      	bne.n	8003684 <UART_SetConfig+0xc0>
 8003640:	4b78      	ldr	r3, [pc, #480]	; (8003824 <UART_SetConfig+0x260>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d817      	bhi.n	800367c <UART_SetConfig+0xb8>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x90>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003665 	.word	0x08003665
 8003658:	08003671 	.word	0x08003671
 800365c:	08003677 	.word	0x08003677
 8003660:	0800366b 	.word	0x0800366b
 8003664:	2300      	movs	r3, #0
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e01e      	b.n	80036a8 <UART_SetConfig+0xe4>
 800366a:	2302      	movs	r3, #2
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e01b      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003670:	2304      	movs	r3, #4
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e018      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003676:	2308      	movs	r3, #8
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e015      	b.n	80036a8 <UART_SetConfig+0xe4>
 800367c:	2310      	movs	r3, #16
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	bf00      	nop
 8003682:	e011      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a67      	ldr	r2, [pc, #412]	; (8003828 <UART_SetConfig+0x264>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d102      	bne.n	8003694 <UART_SetConfig+0xd0>
 800368e:	2300      	movs	r3, #0
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e009      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a64      	ldr	r2, [pc, #400]	; (800382c <UART_SetConfig+0x268>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d102      	bne.n	80036a4 <UART_SetConfig+0xe0>
 800369e:	2300      	movs	r3, #0
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e001      	b.n	80036a8 <UART_SetConfig+0xe4>
 80036a4:	2310      	movs	r3, #16
 80036a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d15c      	bne.n	800376c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d828      	bhi.n	800370a <UART_SetConfig+0x146>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0xfc>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7ff fc08 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff fc26 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <UART_SetConfig+0x26c>)
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7ff fb87 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 80036fe:	61b8      	str	r0, [r7, #24]
        break;
 8003700:	e008      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	77bb      	strb	r3, [r7, #30]
        break;
 8003712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d074      	beq.n	8003804 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	005a      	lsls	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d916      	bls.n	8003766 <UART_SetConfig+0x1a2>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d212      	bcs.n	8003766 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f023 030f 	bic.w	r3, r3, #15
 8003748:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	b29a      	uxth	r2, r3
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	4313      	orrs	r3, r2
 800375a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	89fa      	ldrh	r2, [r7, #14]
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	e04e      	b.n	8003804 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	77bb      	strb	r3, [r7, #30]
 800376a:	e04b      	b.n	8003804 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d827      	bhi.n	80037c2 <UART_SetConfig+0x1fe>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <UART_SetConfig+0x1b4>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	0800379d 	.word	0x0800379d
 800377c:	080037a5 	.word	0x080037a5
 8003780:	080037ad 	.word	0x080037ad
 8003784:	080037c3 	.word	0x080037c3
 8003788:	080037b3 	.word	0x080037b3
 800378c:	080037c3 	.word	0x080037c3
 8003790:	080037c3 	.word	0x080037c3
 8003794:	080037c3 	.word	0x080037c3
 8003798:	080037bb 	.word	0x080037bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800379c:	f7ff fbac 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80037a0:	61b8      	str	r0, [r7, #24]
        break;
 80037a2:	e013      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a4:	f7ff fbca 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 80037a8:	61b8      	str	r0, [r7, #24]
        break;
 80037aa:	e00f      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <UART_SetConfig+0x26c>)
 80037ae:	61bb      	str	r3, [r7, #24]
        break;
 80037b0:	e00c      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b2:	f7ff fb2b 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 80037b6:	61b8      	str	r0, [r7, #24]
        break;
 80037b8:	e008      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037be:	61bb      	str	r3, [r7, #24]
        break;
 80037c0:	e004      	b.n	80037cc <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ca:	bf00      	nop
    }

    if (pclk != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085a      	lsrs	r2, r3, #1
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d908      	bls.n	8003800 <UART_SetConfig+0x23c>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d204      	bcs.n	8003800 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e001      	b.n	8003804 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003810:	7fbb      	ldrb	r3, [r7, #30]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	efff69f3 	.word	0xefff69f3
 8003820:	40013800 	.word	0x40013800
 8003824:	40021000 	.word	0x40021000
 8003828:	40004400 	.word	0x40004400
 800382c:	40004800 	.word	0x40004800
 8003830:	007a1200 	.word	0x007a1200

08003834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003932:	d10a      	bne.n	800394a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003988:	f7fd f890 	bl	8000aac <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d10e      	bne.n	80039ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f82d 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e023      	b.n	8003a02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d10e      	bne.n	80039e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f817 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00d      	b.n	8003a02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1a:	e05e      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d05a      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a24:	f7fd f842 	bl	8000aac <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11b      	bne.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e043      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02c      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8e:	d124      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e00f      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d091      	beq.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4e0d      	ldr	r6, [pc, #52]	; (8003b48 <__libc_init_array+0x38>)
 8003b14:	4c0d      	ldr	r4, [pc, #52]	; (8003b4c <__libc_init_array+0x3c>)
 8003b16:	1ba4      	subs	r4, r4, r6
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	42a5      	cmp	r5, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	4e0b      	ldr	r6, [pc, #44]	; (8003b50 <__libc_init_array+0x40>)
 8003b22:	4c0c      	ldr	r4, [pc, #48]	; (8003b54 <__libc_init_array+0x44>)
 8003b24:	f000 fc26 	bl	8004374 <_init>
 8003b28:	1ba4      	subs	r4, r4, r6
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	42a5      	cmp	r5, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b38:	4798      	blx	r3
 8003b3a:	3501      	adds	r5, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b42:	4798      	blx	r3
 8003b44:	3501      	adds	r5, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08004400 	.word	0x08004400
 8003b4c:	08004400 	.word	0x08004400
 8003b50:	08004400 	.word	0x08004400
 8003b54:	08004404 	.word	0x08004404

08003b58 <memset>:
 8003b58:	4402      	add	r2, r0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <memset+0xa>
 8003b60:	4770      	bx	lr
 8003b62:	f803 1b01 	strb.w	r1, [r3], #1
 8003b66:	e7f9      	b.n	8003b5c <memset+0x4>

08003b68 <siprintf>:
 8003b68:	b40e      	push	{r1, r2, r3}
 8003b6a:	b500      	push	{lr}
 8003b6c:	b09c      	sub	sp, #112	; 0x70
 8003b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b70:	9002      	str	r0, [sp, #8]
 8003b72:	9006      	str	r0, [sp, #24]
 8003b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b78:	4809      	ldr	r0, [pc, #36]	; (8003ba0 <siprintf+0x38>)
 8003b7a:	9107      	str	r1, [sp, #28]
 8003b7c:	9104      	str	r1, [sp, #16]
 8003b7e:	4909      	ldr	r1, [pc, #36]	; (8003ba4 <siprintf+0x3c>)
 8003b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b84:	9105      	str	r1, [sp, #20]
 8003b86:	6800      	ldr	r0, [r0, #0]
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	a902      	add	r1, sp, #8
 8003b8c:	f000 f866 	bl	8003c5c <_svfiprintf_r>
 8003b90:	9b02      	ldr	r3, [sp, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	b01c      	add	sp, #112	; 0x70
 8003b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b9c:	b003      	add	sp, #12
 8003b9e:	4770      	bx	lr
 8003ba0:	2000000c 	.word	0x2000000c
 8003ba4:	ffff0208 	.word	0xffff0208

08003ba8 <__ssputs_r>:
 8003ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bac:	688e      	ldr	r6, [r1, #8]
 8003bae:	429e      	cmp	r6, r3
 8003bb0:	4682      	mov	sl, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	4690      	mov	r8, r2
 8003bb6:	4699      	mov	r9, r3
 8003bb8:	d837      	bhi.n	8003c2a <__ssputs_r+0x82>
 8003bba:	898a      	ldrh	r2, [r1, #12]
 8003bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bc0:	d031      	beq.n	8003c26 <__ssputs_r+0x7e>
 8003bc2:	6825      	ldr	r5, [r4, #0]
 8003bc4:	6909      	ldr	r1, [r1, #16]
 8003bc6:	1a6f      	subs	r7, r5, r1
 8003bc8:	6965      	ldr	r5, [r4, #20]
 8003bca:	2302      	movs	r3, #2
 8003bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003bd4:	f109 0301 	add.w	r3, r9, #1
 8003bd8:	443b      	add	r3, r7
 8003bda:	429d      	cmp	r5, r3
 8003bdc:	bf38      	it	cc
 8003bde:	461d      	movcc	r5, r3
 8003be0:	0553      	lsls	r3, r2, #21
 8003be2:	d530      	bpl.n	8003c46 <__ssputs_r+0x9e>
 8003be4:	4629      	mov	r1, r5
 8003be6:	f000 fb2b 	bl	8004240 <_malloc_r>
 8003bea:	4606      	mov	r6, r0
 8003bec:	b950      	cbnz	r0, 8003c04 <__ssputs_r+0x5c>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	f8ca 3000 	str.w	r3, [sl]
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c04:	463a      	mov	r2, r7
 8003c06:	6921      	ldr	r1, [r4, #16]
 8003c08:	f000 faa8 	bl	800415c <memcpy>
 8003c0c:	89a3      	ldrh	r3, [r4, #12]
 8003c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c16:	81a3      	strh	r3, [r4, #12]
 8003c18:	6126      	str	r6, [r4, #16]
 8003c1a:	6165      	str	r5, [r4, #20]
 8003c1c:	443e      	add	r6, r7
 8003c1e:	1bed      	subs	r5, r5, r7
 8003c20:	6026      	str	r6, [r4, #0]
 8003c22:	60a5      	str	r5, [r4, #8]
 8003c24:	464e      	mov	r6, r9
 8003c26:	454e      	cmp	r6, r9
 8003c28:	d900      	bls.n	8003c2c <__ssputs_r+0x84>
 8003c2a:	464e      	mov	r6, r9
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4641      	mov	r1, r8
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	f000 fa9e 	bl	8004172 <memmove>
 8003c36:	68a3      	ldr	r3, [r4, #8]
 8003c38:	1b9b      	subs	r3, r3, r6
 8003c3a:	60a3      	str	r3, [r4, #8]
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	441e      	add	r6, r3
 8003c40:	6026      	str	r6, [r4, #0]
 8003c42:	2000      	movs	r0, #0
 8003c44:	e7dc      	b.n	8003c00 <__ssputs_r+0x58>
 8003c46:	462a      	mov	r2, r5
 8003c48:	f000 fb54 	bl	80042f4 <_realloc_r>
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d1e2      	bne.n	8003c18 <__ssputs_r+0x70>
 8003c52:	6921      	ldr	r1, [r4, #16]
 8003c54:	4650      	mov	r0, sl
 8003c56:	f000 faa5 	bl	80041a4 <_free_r>
 8003c5a:	e7c8      	b.n	8003bee <__ssputs_r+0x46>

08003c5c <_svfiprintf_r>:
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	461d      	mov	r5, r3
 8003c62:	898b      	ldrh	r3, [r1, #12]
 8003c64:	061f      	lsls	r7, r3, #24
 8003c66:	b09d      	sub	sp, #116	; 0x74
 8003c68:	4680      	mov	r8, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	d50f      	bpl.n	8003c90 <_svfiprintf_r+0x34>
 8003c70:	690b      	ldr	r3, [r1, #16]
 8003c72:	b96b      	cbnz	r3, 8003c90 <_svfiprintf_r+0x34>
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	f000 fae3 	bl	8004240 <_malloc_r>
 8003c7a:	6020      	str	r0, [r4, #0]
 8003c7c:	6120      	str	r0, [r4, #16]
 8003c7e:	b928      	cbnz	r0, 8003c8c <_svfiprintf_r+0x30>
 8003c80:	230c      	movs	r3, #12
 8003c82:	f8c8 3000 	str.w	r3, [r8]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	e0c8      	b.n	8003e1e <_svfiprintf_r+0x1c2>
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	6163      	str	r3, [r4, #20]
 8003c90:	2300      	movs	r3, #0
 8003c92:	9309      	str	r3, [sp, #36]	; 0x24
 8003c94:	2320      	movs	r3, #32
 8003c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c9a:	2330      	movs	r3, #48	; 0x30
 8003c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ca0:	9503      	str	r5, [sp, #12]
 8003ca2:	f04f 0b01 	mov.w	fp, #1
 8003ca6:	4637      	mov	r7, r6
 8003ca8:	463d      	mov	r5, r7
 8003caa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cae:	b10b      	cbz	r3, 8003cb4 <_svfiprintf_r+0x58>
 8003cb0:	2b25      	cmp	r3, #37	; 0x25
 8003cb2:	d13e      	bne.n	8003d32 <_svfiprintf_r+0xd6>
 8003cb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003cb8:	d00b      	beq.n	8003cd2 <_svfiprintf_r+0x76>
 8003cba:	4653      	mov	r3, sl
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	f7ff ff71 	bl	8003ba8 <__ssputs_r>
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f000 80a4 	beq.w	8003e14 <_svfiprintf_r+0x1b8>
 8003ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cce:	4453      	add	r3, sl
 8003cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd2:	783b      	ldrb	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 809d 	beq.w	8003e14 <_svfiprintf_r+0x1b8>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ce4:	9304      	str	r3, [sp, #16]
 8003ce6:	9307      	str	r3, [sp, #28]
 8003ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cec:	931a      	str	r3, [sp, #104]	; 0x68
 8003cee:	462f      	mov	r7, r5
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003cf6:	4850      	ldr	r0, [pc, #320]	; (8003e38 <_svfiprintf_r+0x1dc>)
 8003cf8:	f7fc fa72 	bl	80001e0 <memchr>
 8003cfc:	9b04      	ldr	r3, [sp, #16]
 8003cfe:	b9d0      	cbnz	r0, 8003d36 <_svfiprintf_r+0xda>
 8003d00:	06d9      	lsls	r1, r3, #27
 8003d02:	bf44      	itt	mi
 8003d04:	2220      	movmi	r2, #32
 8003d06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d0a:	071a      	lsls	r2, r3, #28
 8003d0c:	bf44      	itt	mi
 8003d0e:	222b      	movmi	r2, #43	; 0x2b
 8003d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d14:	782a      	ldrb	r2, [r5, #0]
 8003d16:	2a2a      	cmp	r2, #42	; 0x2a
 8003d18:	d015      	beq.n	8003d46 <_svfiprintf_r+0xea>
 8003d1a:	9a07      	ldr	r2, [sp, #28]
 8003d1c:	462f      	mov	r7, r5
 8003d1e:	2000      	movs	r0, #0
 8003d20:	250a      	movs	r5, #10
 8003d22:	4639      	mov	r1, r7
 8003d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d28:	3b30      	subs	r3, #48	; 0x30
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	d94d      	bls.n	8003dca <_svfiprintf_r+0x16e>
 8003d2e:	b1b8      	cbz	r0, 8003d60 <_svfiprintf_r+0x104>
 8003d30:	e00f      	b.n	8003d52 <_svfiprintf_r+0xf6>
 8003d32:	462f      	mov	r7, r5
 8003d34:	e7b8      	b.n	8003ca8 <_svfiprintf_r+0x4c>
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <_svfiprintf_r+0x1dc>)
 8003d38:	1a80      	subs	r0, r0, r2
 8003d3a:	fa0b f000 	lsl.w	r0, fp, r0
 8003d3e:	4318      	orrs	r0, r3
 8003d40:	9004      	str	r0, [sp, #16]
 8003d42:	463d      	mov	r5, r7
 8003d44:	e7d3      	b.n	8003cee <_svfiprintf_r+0x92>
 8003d46:	9a03      	ldr	r2, [sp, #12]
 8003d48:	1d11      	adds	r1, r2, #4
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	9103      	str	r1, [sp, #12]
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	db01      	blt.n	8003d56 <_svfiprintf_r+0xfa>
 8003d52:	9207      	str	r2, [sp, #28]
 8003d54:	e004      	b.n	8003d60 <_svfiprintf_r+0x104>
 8003d56:	4252      	negs	r2, r2
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	9207      	str	r2, [sp, #28]
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	783b      	ldrb	r3, [r7, #0]
 8003d62:	2b2e      	cmp	r3, #46	; 0x2e
 8003d64:	d10c      	bne.n	8003d80 <_svfiprintf_r+0x124>
 8003d66:	787b      	ldrb	r3, [r7, #1]
 8003d68:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6a:	d133      	bne.n	8003dd4 <_svfiprintf_r+0x178>
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	9203      	str	r2, [sp, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bfb8      	it	lt
 8003d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d7c:	3702      	adds	r7, #2
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	4d2e      	ldr	r5, [pc, #184]	; (8003e3c <_svfiprintf_r+0x1e0>)
 8003d82:	7839      	ldrb	r1, [r7, #0]
 8003d84:	2203      	movs	r2, #3
 8003d86:	4628      	mov	r0, r5
 8003d88:	f7fc fa2a 	bl	80001e0 <memchr>
 8003d8c:	b138      	cbz	r0, 8003d9e <_svfiprintf_r+0x142>
 8003d8e:	2340      	movs	r3, #64	; 0x40
 8003d90:	1b40      	subs	r0, r0, r5
 8003d92:	fa03 f000 	lsl.w	r0, r3, r0
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	4303      	orrs	r3, r0
 8003d9a:	3701      	adds	r7, #1
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	7839      	ldrb	r1, [r7, #0]
 8003da0:	4827      	ldr	r0, [pc, #156]	; (8003e40 <_svfiprintf_r+0x1e4>)
 8003da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003da6:	2206      	movs	r2, #6
 8003da8:	1c7e      	adds	r6, r7, #1
 8003daa:	f7fc fa19 	bl	80001e0 <memchr>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d038      	beq.n	8003e24 <_svfiprintf_r+0x1c8>
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <_svfiprintf_r+0x1e8>)
 8003db4:	bb13      	cbnz	r3, 8003dfc <_svfiprintf_r+0x1a0>
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	3307      	adds	r3, #7
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	9303      	str	r3, [sp, #12]
 8003dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc4:	444b      	add	r3, r9
 8003dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc8:	e76d      	b.n	8003ca6 <_svfiprintf_r+0x4a>
 8003dca:	fb05 3202 	mla	r2, r5, r2, r3
 8003dce:	2001      	movs	r0, #1
 8003dd0:	460f      	mov	r7, r1
 8003dd2:	e7a6      	b.n	8003d22 <_svfiprintf_r+0xc6>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	3701      	adds	r7, #1
 8003dd8:	9305      	str	r3, [sp, #20]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	250a      	movs	r5, #10
 8003dde:	4638      	mov	r0, r7
 8003de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003de4:	3a30      	subs	r2, #48	; 0x30
 8003de6:	2a09      	cmp	r2, #9
 8003de8:	d903      	bls.n	8003df2 <_svfiprintf_r+0x196>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0c8      	beq.n	8003d80 <_svfiprintf_r+0x124>
 8003dee:	9105      	str	r1, [sp, #20]
 8003df0:	e7c6      	b.n	8003d80 <_svfiprintf_r+0x124>
 8003df2:	fb05 2101 	mla	r1, r5, r1, r2
 8003df6:	2301      	movs	r3, #1
 8003df8:	4607      	mov	r7, r0
 8003dfa:	e7f0      	b.n	8003dde <_svfiprintf_r+0x182>
 8003dfc:	ab03      	add	r3, sp, #12
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4622      	mov	r2, r4
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003e04:	a904      	add	r1, sp, #16
 8003e06:	4640      	mov	r0, r8
 8003e08:	f3af 8000 	nop.w
 8003e0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e10:	4681      	mov	r9, r0
 8003e12:	d1d6      	bne.n	8003dc2 <_svfiprintf_r+0x166>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	065b      	lsls	r3, r3, #25
 8003e18:	f53f af35 	bmi.w	8003c86 <_svfiprintf_r+0x2a>
 8003e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e1e:	b01d      	add	sp, #116	; 0x74
 8003e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e24:	ab03      	add	r3, sp, #12
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003e2c:	a904      	add	r1, sp, #16
 8003e2e:	4640      	mov	r0, r8
 8003e30:	f000 f882 	bl	8003f38 <_printf_i>
 8003e34:	e7ea      	b.n	8003e0c <_svfiprintf_r+0x1b0>
 8003e36:	bf00      	nop
 8003e38:	080043cc 	.word	0x080043cc
 8003e3c:	080043d2 	.word	0x080043d2
 8003e40:	080043d6 	.word	0x080043d6
 8003e44:	00000000 	.word	0x00000000
 8003e48:	08003ba9 	.word	0x08003ba9

08003e4c <_printf_common>:
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	4691      	mov	r9, r2
 8003e52:	461f      	mov	r7, r3
 8003e54:	688a      	ldr	r2, [r1, #8]
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bfb8      	it	lt
 8003e60:	4613      	movlt	r3, r2
 8003e62:	f8c9 3000 	str.w	r3, [r9]
 8003e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	b112      	cbz	r2, 8003e76 <_printf_common+0x2a>
 8003e70:	3301      	adds	r3, #1
 8003e72:	f8c9 3000 	str.w	r3, [r9]
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	0699      	lsls	r1, r3, #26
 8003e7a:	bf42      	ittt	mi
 8003e7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e80:	3302      	addmi	r3, #2
 8003e82:	f8c9 3000 	strmi.w	r3, [r9]
 8003e86:	6825      	ldr	r5, [r4, #0]
 8003e88:	f015 0506 	ands.w	r5, r5, #6
 8003e8c:	d107      	bne.n	8003e9e <_printf_common+0x52>
 8003e8e:	f104 0a19 	add.w	sl, r4, #25
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	f8d9 2000 	ldr.w	r2, [r9]
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	42ab      	cmp	r3, r5
 8003e9c:	dc28      	bgt.n	8003ef0 <_printf_common+0xa4>
 8003e9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	3300      	adds	r3, #0
 8003ea6:	bf18      	it	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	0692      	lsls	r2, r2, #26
 8003eac:	d42d      	bmi.n	8003f0a <_printf_common+0xbe>
 8003eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb2:	4639      	mov	r1, r7
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	47c0      	blx	r8
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d020      	beq.n	8003efe <_printf_common+0xb2>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	68e5      	ldr	r5, [r4, #12]
 8003ec0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ec4:	f003 0306 	and.w	r3, r3, #6
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	bf08      	it	eq
 8003ecc:	1aad      	subeq	r5, r5, r2
 8003ece:	68a3      	ldr	r3, [r4, #8]
 8003ed0:	6922      	ldr	r2, [r4, #16]
 8003ed2:	bf0c      	ite	eq
 8003ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed8:	2500      	movne	r5, #0
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bfc4      	itt	gt
 8003ede:	1a9b      	subgt	r3, r3, r2
 8003ee0:	18ed      	addgt	r5, r5, r3
 8003ee2:	f04f 0900 	mov.w	r9, #0
 8003ee6:	341a      	adds	r4, #26
 8003ee8:	454d      	cmp	r5, r9
 8003eea:	d11a      	bne.n	8003f22 <_printf_common+0xd6>
 8003eec:	2000      	movs	r0, #0
 8003eee:	e008      	b.n	8003f02 <_printf_common+0xb6>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	47c0      	blx	r8
 8003efa:	3001      	adds	r0, #1
 8003efc:	d103      	bne.n	8003f06 <_printf_common+0xba>
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	3501      	adds	r5, #1
 8003f08:	e7c3      	b.n	8003e92 <_printf_common+0x46>
 8003f0a:	18e1      	adds	r1, r4, r3
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	2030      	movs	r0, #48	; 0x30
 8003f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f14:	4422      	add	r2, r4
 8003f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f1e:	3302      	adds	r3, #2
 8003f20:	e7c5      	b.n	8003eae <_printf_common+0x62>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4622      	mov	r2, r4
 8003f26:	4639      	mov	r1, r7
 8003f28:	4630      	mov	r0, r6
 8003f2a:	47c0      	blx	r8
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d0e6      	beq.n	8003efe <_printf_common+0xb2>
 8003f30:	f109 0901 	add.w	r9, r9, #1
 8003f34:	e7d8      	b.n	8003ee8 <_printf_common+0x9c>
	...

08003f38 <_printf_i>:
 8003f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f40:	460c      	mov	r4, r1
 8003f42:	7e09      	ldrb	r1, [r1, #24]
 8003f44:	b085      	sub	sp, #20
 8003f46:	296e      	cmp	r1, #110	; 0x6e
 8003f48:	4617      	mov	r7, r2
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	4698      	mov	r8, r3
 8003f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f50:	f000 80b3 	beq.w	80040ba <_printf_i+0x182>
 8003f54:	d822      	bhi.n	8003f9c <_printf_i+0x64>
 8003f56:	2963      	cmp	r1, #99	; 0x63
 8003f58:	d036      	beq.n	8003fc8 <_printf_i+0x90>
 8003f5a:	d80a      	bhi.n	8003f72 <_printf_i+0x3a>
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	f000 80b9 	beq.w	80040d4 <_printf_i+0x19c>
 8003f62:	2958      	cmp	r1, #88	; 0x58
 8003f64:	f000 8083 	beq.w	800406e <_printf_i+0x136>
 8003f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f70:	e032      	b.n	8003fd8 <_printf_i+0xa0>
 8003f72:	2964      	cmp	r1, #100	; 0x64
 8003f74:	d001      	beq.n	8003f7a <_printf_i+0x42>
 8003f76:	2969      	cmp	r1, #105	; 0x69
 8003f78:	d1f6      	bne.n	8003f68 <_printf_i+0x30>
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	6813      	ldr	r3, [r2, #0]
 8003f7e:	0605      	lsls	r5, r0, #24
 8003f80:	f103 0104 	add.w	r1, r3, #4
 8003f84:	d52a      	bpl.n	8003fdc <_printf_i+0xa4>
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da03      	bge.n	8003f96 <_printf_i+0x5e>
 8003f8e:	222d      	movs	r2, #45	; 0x2d
 8003f90:	425b      	negs	r3, r3
 8003f92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f96:	486f      	ldr	r0, [pc, #444]	; (8004154 <_printf_i+0x21c>)
 8003f98:	220a      	movs	r2, #10
 8003f9a:	e039      	b.n	8004010 <_printf_i+0xd8>
 8003f9c:	2973      	cmp	r1, #115	; 0x73
 8003f9e:	f000 809d 	beq.w	80040dc <_printf_i+0x1a4>
 8003fa2:	d808      	bhi.n	8003fb6 <_printf_i+0x7e>
 8003fa4:	296f      	cmp	r1, #111	; 0x6f
 8003fa6:	d020      	beq.n	8003fea <_printf_i+0xb2>
 8003fa8:	2970      	cmp	r1, #112	; 0x70
 8003faa:	d1dd      	bne.n	8003f68 <_printf_i+0x30>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f043 0320 	orr.w	r3, r3, #32
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	e003      	b.n	8003fbe <_printf_i+0x86>
 8003fb6:	2975      	cmp	r1, #117	; 0x75
 8003fb8:	d017      	beq.n	8003fea <_printf_i+0xb2>
 8003fba:	2978      	cmp	r1, #120	; 0x78
 8003fbc:	d1d4      	bne.n	8003f68 <_printf_i+0x30>
 8003fbe:	2378      	movs	r3, #120	; 0x78
 8003fc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fc4:	4864      	ldr	r0, [pc, #400]	; (8004158 <_printf_i+0x220>)
 8003fc6:	e055      	b.n	8004074 <_printf_i+0x13c>
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6011      	str	r1, [r2, #0]
 8003fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e08c      	b.n	80040f6 <_printf_i+0x1be>
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6011      	str	r1, [r2, #0]
 8003fe0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fe4:	bf18      	it	ne
 8003fe6:	b21b      	sxthne	r3, r3
 8003fe8:	e7cf      	b.n	8003f8a <_printf_i+0x52>
 8003fea:	6813      	ldr	r3, [r2, #0]
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	1d18      	adds	r0, r3, #4
 8003ff0:	6010      	str	r0, [r2, #0]
 8003ff2:	0628      	lsls	r0, r5, #24
 8003ff4:	d501      	bpl.n	8003ffa <_printf_i+0xc2>
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	e002      	b.n	8004000 <_printf_i+0xc8>
 8003ffa:	0668      	lsls	r0, r5, #25
 8003ffc:	d5fb      	bpl.n	8003ff6 <_printf_i+0xbe>
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	4854      	ldr	r0, [pc, #336]	; (8004154 <_printf_i+0x21c>)
 8004002:	296f      	cmp	r1, #111	; 0x6f
 8004004:	bf14      	ite	ne
 8004006:	220a      	movne	r2, #10
 8004008:	2208      	moveq	r2, #8
 800400a:	2100      	movs	r1, #0
 800400c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004010:	6865      	ldr	r5, [r4, #4]
 8004012:	60a5      	str	r5, [r4, #8]
 8004014:	2d00      	cmp	r5, #0
 8004016:	f2c0 8095 	blt.w	8004144 <_printf_i+0x20c>
 800401a:	6821      	ldr	r1, [r4, #0]
 800401c:	f021 0104 	bic.w	r1, r1, #4
 8004020:	6021      	str	r1, [r4, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <_printf_i+0x16a>
 8004026:	2d00      	cmp	r5, #0
 8004028:	f040 808e 	bne.w	8004148 <_printf_i+0x210>
 800402c:	4665      	mov	r5, ip
 800402e:	2a08      	cmp	r2, #8
 8004030:	d10b      	bne.n	800404a <_printf_i+0x112>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	07db      	lsls	r3, r3, #31
 8004036:	d508      	bpl.n	800404a <_printf_i+0x112>
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	6862      	ldr	r2, [r4, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	bfde      	ittt	le
 8004040:	2330      	movle	r3, #48	; 0x30
 8004042:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004046:	f105 35ff 	addle.w	r5, r5, #4294967295
 800404a:	ebac 0305 	sub.w	r3, ip, r5
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	f8cd 8000 	str.w	r8, [sp]
 8004054:	463b      	mov	r3, r7
 8004056:	aa03      	add	r2, sp, #12
 8004058:	4621      	mov	r1, r4
 800405a:	4630      	mov	r0, r6
 800405c:	f7ff fef6 	bl	8003e4c <_printf_common>
 8004060:	3001      	adds	r0, #1
 8004062:	d14d      	bne.n	8004100 <_printf_i+0x1c8>
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	b005      	add	sp, #20
 800406a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800406e:	4839      	ldr	r0, [pc, #228]	; (8004154 <_printf_i+0x21c>)
 8004070:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	6821      	ldr	r1, [r4, #0]
 8004078:	1d1d      	adds	r5, r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6015      	str	r5, [r2, #0]
 800407e:	060a      	lsls	r2, r1, #24
 8004080:	d50b      	bpl.n	800409a <_printf_i+0x162>
 8004082:	07ca      	lsls	r2, r1, #31
 8004084:	bf44      	itt	mi
 8004086:	f041 0120 	orrmi.w	r1, r1, #32
 800408a:	6021      	strmi	r1, [r4, #0]
 800408c:	b91b      	cbnz	r3, 8004096 <_printf_i+0x15e>
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	f022 0220 	bic.w	r2, r2, #32
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	2210      	movs	r2, #16
 8004098:	e7b7      	b.n	800400a <_printf_i+0xd2>
 800409a:	064d      	lsls	r5, r1, #25
 800409c:	bf48      	it	mi
 800409e:	b29b      	uxthmi	r3, r3
 80040a0:	e7ef      	b.n	8004082 <_printf_i+0x14a>
 80040a2:	4665      	mov	r5, ip
 80040a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80040a8:	fb02 3311 	mls	r3, r2, r1, r3
 80040ac:	5cc3      	ldrb	r3, [r0, r3]
 80040ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040b2:	460b      	mov	r3, r1
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d1f5      	bne.n	80040a4 <_printf_i+0x16c>
 80040b8:	e7b9      	b.n	800402e <_printf_i+0xf6>
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	6825      	ldr	r5, [r4, #0]
 80040be:	6961      	ldr	r1, [r4, #20]
 80040c0:	1d18      	adds	r0, r3, #4
 80040c2:	6010      	str	r0, [r2, #0]
 80040c4:	0628      	lsls	r0, r5, #24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	d501      	bpl.n	80040ce <_printf_i+0x196>
 80040ca:	6019      	str	r1, [r3, #0]
 80040cc:	e002      	b.n	80040d4 <_printf_i+0x19c>
 80040ce:	066a      	lsls	r2, r5, #25
 80040d0:	d5fb      	bpl.n	80040ca <_printf_i+0x192>
 80040d2:	8019      	strh	r1, [r3, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	4665      	mov	r5, ip
 80040da:	e7b9      	b.n	8004050 <_printf_i+0x118>
 80040dc:	6813      	ldr	r3, [r2, #0]
 80040de:	1d19      	adds	r1, r3, #4
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	681d      	ldr	r5, [r3, #0]
 80040e4:	6862      	ldr	r2, [r4, #4]
 80040e6:	2100      	movs	r1, #0
 80040e8:	4628      	mov	r0, r5
 80040ea:	f7fc f879 	bl	80001e0 <memchr>
 80040ee:	b108      	cbz	r0, 80040f4 <_printf_i+0x1bc>
 80040f0:	1b40      	subs	r0, r0, r5
 80040f2:	6060      	str	r0, [r4, #4]
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	2300      	movs	r3, #0
 80040fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040fe:	e7a7      	b.n	8004050 <_printf_i+0x118>
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	462a      	mov	r2, r5
 8004104:	4639      	mov	r1, r7
 8004106:	4630      	mov	r0, r6
 8004108:	47c0      	blx	r8
 800410a:	3001      	adds	r0, #1
 800410c:	d0aa      	beq.n	8004064 <_printf_i+0x12c>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	079b      	lsls	r3, r3, #30
 8004112:	d413      	bmi.n	800413c <_printf_i+0x204>
 8004114:	68e0      	ldr	r0, [r4, #12]
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	4298      	cmp	r0, r3
 800411a:	bfb8      	it	lt
 800411c:	4618      	movlt	r0, r3
 800411e:	e7a3      	b.n	8004068 <_printf_i+0x130>
 8004120:	2301      	movs	r3, #1
 8004122:	464a      	mov	r2, r9
 8004124:	4639      	mov	r1, r7
 8004126:	4630      	mov	r0, r6
 8004128:	47c0      	blx	r8
 800412a:	3001      	adds	r0, #1
 800412c:	d09a      	beq.n	8004064 <_printf_i+0x12c>
 800412e:	3501      	adds	r5, #1
 8004130:	68e3      	ldr	r3, [r4, #12]
 8004132:	9a03      	ldr	r2, [sp, #12]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	42ab      	cmp	r3, r5
 8004138:	dcf2      	bgt.n	8004120 <_printf_i+0x1e8>
 800413a:	e7eb      	b.n	8004114 <_printf_i+0x1dc>
 800413c:	2500      	movs	r5, #0
 800413e:	f104 0919 	add.w	r9, r4, #25
 8004142:	e7f5      	b.n	8004130 <_printf_i+0x1f8>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ac      	bne.n	80040a2 <_printf_i+0x16a>
 8004148:	7803      	ldrb	r3, [r0, #0]
 800414a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800414e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004152:	e76c      	b.n	800402e <_printf_i+0xf6>
 8004154:	080043dd 	.word	0x080043dd
 8004158:	080043ee 	.word	0x080043ee

0800415c <memcpy>:
 800415c:	b510      	push	{r4, lr}
 800415e:	1e43      	subs	r3, r0, #1
 8004160:	440a      	add	r2, r1
 8004162:	4291      	cmp	r1, r2
 8004164:	d100      	bne.n	8004168 <memcpy+0xc>
 8004166:	bd10      	pop	{r4, pc}
 8004168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800416c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004170:	e7f7      	b.n	8004162 <memcpy+0x6>

08004172 <memmove>:
 8004172:	4288      	cmp	r0, r1
 8004174:	b510      	push	{r4, lr}
 8004176:	eb01 0302 	add.w	r3, r1, r2
 800417a:	d807      	bhi.n	800418c <memmove+0x1a>
 800417c:	1e42      	subs	r2, r0, #1
 800417e:	4299      	cmp	r1, r3
 8004180:	d00a      	beq.n	8004198 <memmove+0x26>
 8004182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004186:	f802 4f01 	strb.w	r4, [r2, #1]!
 800418a:	e7f8      	b.n	800417e <memmove+0xc>
 800418c:	4283      	cmp	r3, r0
 800418e:	d9f5      	bls.n	800417c <memmove+0xa>
 8004190:	1881      	adds	r1, r0, r2
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	42d3      	cmn	r3, r2
 8004196:	d100      	bne.n	800419a <memmove+0x28>
 8004198:	bd10      	pop	{r4, pc}
 800419a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800419e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041a2:	e7f7      	b.n	8004194 <memmove+0x22>

080041a4 <_free_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d045      	beq.n	8004238 <_free_r+0x94>
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f0c      	subs	r4, r1, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	18e4      	addlt	r4, r4, r3
 80041b8:	f000 f8d2 	bl	8004360 <__malloc_lock>
 80041bc:	4a1f      	ldr	r2, [pc, #124]	; (800423c <_free_r+0x98>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	4610      	mov	r0, r2
 80041c2:	b933      	cbnz	r3, 80041d2 <_free_r+0x2e>
 80041c4:	6063      	str	r3, [r4, #4]
 80041c6:	6014      	str	r4, [r2, #0]
 80041c8:	4628      	mov	r0, r5
 80041ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ce:	f000 b8c8 	b.w	8004362 <__malloc_unlock>
 80041d2:	42a3      	cmp	r3, r4
 80041d4:	d90c      	bls.n	80041f0 <_free_r+0x4c>
 80041d6:	6821      	ldr	r1, [r4, #0]
 80041d8:	1862      	adds	r2, r4, r1
 80041da:	4293      	cmp	r3, r2
 80041dc:	bf04      	itt	eq
 80041de:	681a      	ldreq	r2, [r3, #0]
 80041e0:	685b      	ldreq	r3, [r3, #4]
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	bf04      	itt	eq
 80041e6:	1852      	addeq	r2, r2, r1
 80041e8:	6022      	streq	r2, [r4, #0]
 80041ea:	6004      	str	r4, [r0, #0]
 80041ec:	e7ec      	b.n	80041c8 <_free_r+0x24>
 80041ee:	4613      	mov	r3, r2
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	b10a      	cbz	r2, 80041f8 <_free_r+0x54>
 80041f4:	42a2      	cmp	r2, r4
 80041f6:	d9fa      	bls.n	80041ee <_free_r+0x4a>
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	1858      	adds	r0, r3, r1
 80041fc:	42a0      	cmp	r0, r4
 80041fe:	d10b      	bne.n	8004218 <_free_r+0x74>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	4401      	add	r1, r0
 8004204:	1858      	adds	r0, r3, r1
 8004206:	4282      	cmp	r2, r0
 8004208:	6019      	str	r1, [r3, #0]
 800420a:	d1dd      	bne.n	80041c8 <_free_r+0x24>
 800420c:	6810      	ldr	r0, [r2, #0]
 800420e:	6852      	ldr	r2, [r2, #4]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	4401      	add	r1, r0
 8004214:	6019      	str	r1, [r3, #0]
 8004216:	e7d7      	b.n	80041c8 <_free_r+0x24>
 8004218:	d902      	bls.n	8004220 <_free_r+0x7c>
 800421a:	230c      	movs	r3, #12
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	e7d3      	b.n	80041c8 <_free_r+0x24>
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	1821      	adds	r1, r4, r0
 8004224:	428a      	cmp	r2, r1
 8004226:	bf04      	itt	eq
 8004228:	6811      	ldreq	r1, [r2, #0]
 800422a:	6852      	ldreq	r2, [r2, #4]
 800422c:	6062      	str	r2, [r4, #4]
 800422e:	bf04      	itt	eq
 8004230:	1809      	addeq	r1, r1, r0
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	605c      	str	r4, [r3, #4]
 8004236:	e7c7      	b.n	80041c8 <_free_r+0x24>
 8004238:	bd38      	pop	{r3, r4, r5, pc}
 800423a:	bf00      	nop
 800423c:	20000090 	.word	0x20000090

08004240 <_malloc_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	1ccd      	adds	r5, r1, #3
 8004244:	f025 0503 	bic.w	r5, r5, #3
 8004248:	3508      	adds	r5, #8
 800424a:	2d0c      	cmp	r5, #12
 800424c:	bf38      	it	cc
 800424e:	250c      	movcc	r5, #12
 8004250:	2d00      	cmp	r5, #0
 8004252:	4606      	mov	r6, r0
 8004254:	db01      	blt.n	800425a <_malloc_r+0x1a>
 8004256:	42a9      	cmp	r1, r5
 8004258:	d903      	bls.n	8004262 <_malloc_r+0x22>
 800425a:	230c      	movs	r3, #12
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	2000      	movs	r0, #0
 8004260:	bd70      	pop	{r4, r5, r6, pc}
 8004262:	f000 f87d 	bl	8004360 <__malloc_lock>
 8004266:	4a21      	ldr	r2, [pc, #132]	; (80042ec <_malloc_r+0xac>)
 8004268:	6814      	ldr	r4, [r2, #0]
 800426a:	4621      	mov	r1, r4
 800426c:	b991      	cbnz	r1, 8004294 <_malloc_r+0x54>
 800426e:	4c20      	ldr	r4, [pc, #128]	; (80042f0 <_malloc_r+0xb0>)
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	b91b      	cbnz	r3, 800427c <_malloc_r+0x3c>
 8004274:	4630      	mov	r0, r6
 8004276:	f000 f863 	bl	8004340 <_sbrk_r>
 800427a:	6020      	str	r0, [r4, #0]
 800427c:	4629      	mov	r1, r5
 800427e:	4630      	mov	r0, r6
 8004280:	f000 f85e 	bl	8004340 <_sbrk_r>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d124      	bne.n	80042d2 <_malloc_r+0x92>
 8004288:	230c      	movs	r3, #12
 800428a:	6033      	str	r3, [r6, #0]
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f868 	bl	8004362 <__malloc_unlock>
 8004292:	e7e4      	b.n	800425e <_malloc_r+0x1e>
 8004294:	680b      	ldr	r3, [r1, #0]
 8004296:	1b5b      	subs	r3, r3, r5
 8004298:	d418      	bmi.n	80042cc <_malloc_r+0x8c>
 800429a:	2b0b      	cmp	r3, #11
 800429c:	d90f      	bls.n	80042be <_malloc_r+0x7e>
 800429e:	600b      	str	r3, [r1, #0]
 80042a0:	50cd      	str	r5, [r1, r3]
 80042a2:	18cc      	adds	r4, r1, r3
 80042a4:	4630      	mov	r0, r6
 80042a6:	f000 f85c 	bl	8004362 <__malloc_unlock>
 80042aa:	f104 000b 	add.w	r0, r4, #11
 80042ae:	1d23      	adds	r3, r4, #4
 80042b0:	f020 0007 	bic.w	r0, r0, #7
 80042b4:	1ac3      	subs	r3, r0, r3
 80042b6:	d0d3      	beq.n	8004260 <_malloc_r+0x20>
 80042b8:	425a      	negs	r2, r3
 80042ba:	50e2      	str	r2, [r4, r3]
 80042bc:	e7d0      	b.n	8004260 <_malloc_r+0x20>
 80042be:	428c      	cmp	r4, r1
 80042c0:	684b      	ldr	r3, [r1, #4]
 80042c2:	bf16      	itet	ne
 80042c4:	6063      	strne	r3, [r4, #4]
 80042c6:	6013      	streq	r3, [r2, #0]
 80042c8:	460c      	movne	r4, r1
 80042ca:	e7eb      	b.n	80042a4 <_malloc_r+0x64>
 80042cc:	460c      	mov	r4, r1
 80042ce:	6849      	ldr	r1, [r1, #4]
 80042d0:	e7cc      	b.n	800426c <_malloc_r+0x2c>
 80042d2:	1cc4      	adds	r4, r0, #3
 80042d4:	f024 0403 	bic.w	r4, r4, #3
 80042d8:	42a0      	cmp	r0, r4
 80042da:	d005      	beq.n	80042e8 <_malloc_r+0xa8>
 80042dc:	1a21      	subs	r1, r4, r0
 80042de:	4630      	mov	r0, r6
 80042e0:	f000 f82e 	bl	8004340 <_sbrk_r>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d0cf      	beq.n	8004288 <_malloc_r+0x48>
 80042e8:	6025      	str	r5, [r4, #0]
 80042ea:	e7db      	b.n	80042a4 <_malloc_r+0x64>
 80042ec:	20000090 	.word	0x20000090
 80042f0:	20000094 	.word	0x20000094

080042f4 <_realloc_r>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	4607      	mov	r7, r0
 80042f8:	4614      	mov	r4, r2
 80042fa:	460e      	mov	r6, r1
 80042fc:	b921      	cbnz	r1, 8004308 <_realloc_r+0x14>
 80042fe:	4611      	mov	r1, r2
 8004300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004304:	f7ff bf9c 	b.w	8004240 <_malloc_r>
 8004308:	b922      	cbnz	r2, 8004314 <_realloc_r+0x20>
 800430a:	f7ff ff4b 	bl	80041a4 <_free_r>
 800430e:	4625      	mov	r5, r4
 8004310:	4628      	mov	r0, r5
 8004312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004314:	f000 f826 	bl	8004364 <_malloc_usable_size_r>
 8004318:	42a0      	cmp	r0, r4
 800431a:	d20f      	bcs.n	800433c <_realloc_r+0x48>
 800431c:	4621      	mov	r1, r4
 800431e:	4638      	mov	r0, r7
 8004320:	f7ff ff8e 	bl	8004240 <_malloc_r>
 8004324:	4605      	mov	r5, r0
 8004326:	2800      	cmp	r0, #0
 8004328:	d0f2      	beq.n	8004310 <_realloc_r+0x1c>
 800432a:	4631      	mov	r1, r6
 800432c:	4622      	mov	r2, r4
 800432e:	f7ff ff15 	bl	800415c <memcpy>
 8004332:	4631      	mov	r1, r6
 8004334:	4638      	mov	r0, r7
 8004336:	f7ff ff35 	bl	80041a4 <_free_r>
 800433a:	e7e9      	b.n	8004310 <_realloc_r+0x1c>
 800433c:	4635      	mov	r5, r6
 800433e:	e7e7      	b.n	8004310 <_realloc_r+0x1c>

08004340 <_sbrk_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4c06      	ldr	r4, [pc, #24]	; (800435c <_sbrk_r+0x1c>)
 8004344:	2300      	movs	r3, #0
 8004346:	4605      	mov	r5, r0
 8004348:	4608      	mov	r0, r1
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	f7fc fae2 	bl	8000914 <_sbrk>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_sbrk_r+0x1a>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	b103      	cbz	r3, 800435a <_sbrk_r+0x1a>
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	20000244 	.word	0x20000244

08004360 <__malloc_lock>:
 8004360:	4770      	bx	lr

08004362 <__malloc_unlock>:
 8004362:	4770      	bx	lr

08004364 <_malloc_usable_size_r>:
 8004364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004368:	1f18      	subs	r0, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfbc      	itt	lt
 800436e:	580b      	ldrlt	r3, [r1, r0]
 8004370:	18c0      	addlt	r0, r0, r3
 8004372:	4770      	bx	lr

08004374 <_init>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr

08004380 <_fini>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr
